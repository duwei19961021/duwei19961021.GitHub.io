<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BLOG</title>
  
  
  <link href="https://duwei19961021.github.io/atom.xml" rel="self"/>
  
  <link href="https://duwei19961021.github.io/"/>
  <updated>2021-05-23T01:25:50.105Z</updated>
  <id>https://duwei19961021.github.io/</id>
  
  <author>
    <name>拦云</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统</title>
    <link href="https://duwei19961021.github.io/2021/05/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://duwei19961021.github.io/2021/05/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-05-23T01:25:50.105Z</published>
    <updated>2021-05-23T01:25:50.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第九章：虚拟内存"><a href="#第九章：虚拟内存" class="headerlink" title="第九章：虚拟内存"></a>第九章：虚拟内存</h3><h6 id="1、什么是虚拟内存？"><a href="#1、什么是虚拟内存？" class="headerlink" title="1、什么是虚拟内存？"></a>1、什么是虚拟内存？</h6><p>虚拟内存是磁盘上(较低层)连续N个字节组成的数组，每个字节都有唯一的虚拟地址作为数组的索引，磁盘上数组的内容被缓存在主存中。(虚拟页存在于磁盘上)</p><p>物理内存被分隔成物理页(Physical Page,PP)。</p><p>VM系统将虚拟内存分隔成虚拟页(Virtual Page,VP)，虚拟页面的集合分为三个不相交的子集：</p><ol><li>未分配的(VM系统还未分配或者未创建的页，未分配的块没有任何数据和他们相关联，因为不占用任何磁盘空间)。</li><li>缓存的(已缓存在物理内存中的已分配页)。</li><li>未缓存的(未缓存在物理内存中的已分配页)。</li></ol><h6 id="2、DRAM缓存组织结构"><a href="#2、DRAM缓存组织结构" class="headerlink" title="2、DRAM缓存组织结构"></a>2、DRAM缓存组织结构</h6><ul><li>SRAM：表示位于cpu和主存之间的L1、L2、L3高速缓存。</li><li>DRAM：表示虚拟内存系统的缓存，它在主存中缓存虚拟页。</li><li>直   写：当 CPU 要将数据写入内存时 除了更新缓冲内存(高速缓存L1、L2、L3)上的数据外也将数据写在 DRAM 中 以维持主存与缓冲内存的一致性 当要写入内存的数据一多 速度自然就慢了下来 </li><li>回   写：每当 CPU 要将数据写入内存时 只会先更新缓冲内存(高速缓存L1、L2、L3)上的数据 随后再让缓冲内存在总线不塞车的时候 才把数据写回 DRAM 所以速度自然快得多</li></ul><h6 id="3、页表"><a href="#3、页表" class="headerlink" title="3、页表"></a>3、页表</h6><p>虚拟内存必须有某种方法来判定一个虚拟页是否缓存在DRAM中的某个地方。如果是，系统还必须确定这个虚拟页存放在哪个物理页(主存)。如果不命中还必须判断这个虚拟页存放在磁盘的哪个位置上，在物理页中选择一个牺牲页，并将虚拟页从磁盘复制到DRAM中，替换这个牺牲页。(操作系统为每个进程都维护一个独立的页表)</p><p>页表：将虚拟页映射到物理页。每次地址翻译硬件将一个虚拟地址转换为物理地址时，都会读取页表，操作系统负责维护页表的内容，以及在磁盘与DRAM之间来回传送页。</p><p><img src="/image/image-20201020134441586.png" alt="image-20201020134441586"></p><p>我们将假设每个PTE是由一个有效位(valid bit)和一个n位地址字段组成，有效位表明了该虚拟页当前是否被缓存在DRAM中。如果设置了有效位，那么地址字段就表示DRAM中相应的物理页的起始位置，这个物理页中缓存了该虚拟页。 如果没有设置有效位，那么一个空地址表示这个虚拟页还未被分配。否则，这个地址就指向该虚拟页在磁盘上的起始位置。</p><h6 id="4、缺页"><a href="#4、缺页" class="headerlink" title="4、缺页"></a>4、缺页</h6><p>DRAM缓存不命中称为缺页。</p><p>自己的理解：在cpu获取虚拟页中的数据时，地址翻译硬件去读页表的页表记录的有效位，如果有效位为0则推断出该虚拟页未被缓存，并且触发一个缺页异常。缺页异常调用内核中的缺页异常处理程序，该程序会在主存的PP(物理页)中选择一个被缓存的VP作为牺牲页，接下来将要缓存的vp从磁盘中加载出来缓存到主存上去(替换牺牲页)。</p><p><img src="/image/image-20201020140133328.png" alt="image-20201020140133328"></p><h6 id="5、地址翻译"><a href="#5、地址翻译" class="headerlink" title="5、地址翻译"></a>5、地址翻译</h6><p>当页面命中时，CPU硬件执行的步骤：</p><ol><li>处理器生成一个虚拟地址，并把它传送给MMU。</li><li>MMU生成PTE地址，并从高速缓存/主存请求得到它。</li><li>高速缓存/主存向MMU返回PTE。</li><li>MMU构造物理地址，并把它传给告诉缓存/主存。</li><li>高速缓存/主存返回所请求的数据字给处理器。</li></ol><p><img src="/image/image-20201020145055727.png" alt="image-20201020145055727"></p><p>缺页，CPU硬件执行步骤：</p><ol><li>处理器生成一个虚拟地址，并把它传送给MMU。</li><li>MMU生成PTE地址，并从高速缓存/主存请求得到它。</li><li>高速缓存/主存向MMU返回PTE。</li><li>PTE中的有效为是0，所以MMU触发了一次异常，传递CPU中的控制到操作系统内核中的缺页异常处理程序。</li><li>缺页处理程序确定出物理内存中的牺牲页，如果这个页面修改了则把它换出到磁盘。</li><li>缺页处理程序页面调入新的页面，并更新内存中的PTE。</li><li>缺页处理程序返回到原来的进程，再次执行导致缺页的指令，CPU将引起缺页的虚拟地址重新发送给MMU。</li></ol><p><img src="/image/image-20201020145822292.png" alt="image-20201020145822292"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第九章：虚拟内存&quot;&gt;&lt;a href=&quot;#第九章：虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;第九章：虚拟内存&quot;&gt;&lt;/a&gt;第九章：虚拟内存&lt;/h3&gt;&lt;h6 id=&quot;1、什么是虚拟内存？&quot;&gt;&lt;a href=&quot;#1、什么是虚拟内存？&quot; class=&quot;</summary>
      
    
    
    
    <category term="操作系统" scheme="https://duwei19961021.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="no" scheme="https://duwei19961021.github.io/tags/no/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="https://duwei19961021.github.io/2021/05/22/BSTree/"/>
    <id>https://duwei19961021.github.io/2021/05/22/BSTree/</id>
    <published>2021-05-22T12:47:06.000Z</published>
    <updated>2021-05-22T17:28:49.145Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p>中序是有序的。</p><p><img src="BSTree.png" alt="BSTree"></p><h5 id="搜索二叉树的删除"><a href="#搜索二叉树的删除" class="headerlink" title="搜索二叉树的删除"></a>搜索二叉树的删除</h5><p>插入和查找相对简单，略过。</p><p>删除首先分为三种情况：</p><ol><li><p>被删除的结点有左右孩子结点。</p><p>例：要删除3结点，先在3结点的右子树种找到值最小的结点（最左的结点）—– 4结点，将3结点的值修改为4，再删除4。</p><p>要删除5，先将5结点的值修改为6，再删除6结点。</p><p><img src="https://img.3amupupup.online/delNodeWhoHasTwoChild.png" alt="delNodeWhoHasTwoChild"></p></li><li><p>被删除的结点没有孩子结点。</p><p>例：要删除上图中值为0的结点，直接使0结点的父结点1的left指针为空即可。</p></li><li><p>被删除的结点有一个孩子结点。</p><p>例：要删除上图中值为8的结点，使8结点的父结点7的right指针指向8结点的右孩子即可。</p></li></ol><p>通过观察可知：2、3情况可归纳为一种情况。比如：如果要删除0结点，使其父结点1的left指针指向0结点的left，即1-&gt;left = 0-&gt;left，而0结点的left为空，所以最终1结点的left指向空。如果要删除结点8，使其父结点7的right结点指向结点8的右结点，即7-&gt;right = 8-&gt;right。</p><p><img src="https://img.3amupupup.online/delNodeWhoHasOneOrZeroChild.png" alt="delNodeWhoHasOneOrZeroChild"></p><p>因此最终要删除一个结点分为两大种情况：</p><ol><li>被删除的结点有两个孩子。</li><li>被删除的结点有一个或零个孩子。</li></ol><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><pre class=" language-c++"><code class="language-c++">#pragma once#include <iostream>template<class T>struct BSTreeNode{    T _key;    struct BSTreeNode<T>* _left;    struct BSTreeNode<T>* _right;    BSTreeNode(const T &key):_key(key), _left(nullptr), _right(nullptr)    {}};template<class T>class BSTree{    typedef BSTreeNode<T> Node;private:    Node* _root = nullptr;    void _InOrder(Node* _root)    {        if(_root == nullptr)        {            return;        }        _InOrder(_root->_left);        std::cout << _root->_key << " ";        _InOrder(_root->_right);    }public:    bool Erase(const T &k)    {        Node* parent = nullptr;        Node* current = _root;        while(current)        {            if(k > current->_key)            {                parent = current;                current = current->_right;            }            else if(k < current->_key)            {                parent = current;                current = current->_left;            }            else // 找到了，此时current就是要删除的结点            {                if(current->_left == nullptr) // 情况2-1                {                    if(current == _root) // 特殊情况：current等于_root说明整个二叉树没有左子树且要删除的结点是根结点                    {                        _root = current->_right;                    }                    else                    {                        if(current == parent->_left) // 情况2-1-1                        {                            parent->_left = current->_right;                        }                        else // 情况2-1-2                        {                            parent->_right = current->_right;                        }                    }                    delete current;                }                else if(current->_right == nullptr) // 情况2-2                {                    if(current == _root) // 特殊情况：current等于_root说明整个二叉树没有右子树且要删除的结点是根结点                    {                        _root = current->_left;                    }                    else                    {                        if(current = parent->_left) // 情况2-2-1                        {                            parent->_left = current->_left;                        }                        else // 情况2-2-2                        {                            parent->_right = current->_left;                        }                    }                    delete current;                }                else // 情况2-3，左右孩子均不为空                {                    Node* smParent = current;                    Node* subMin = current->_right; // 寻找右树的最小结点（右树的最左结点）                    while(subMin->_left)                    {                        smParent = subMin;                        subMin = subMin->_left; // subMin一定是一个左为空的结点                    }                    current->_key = subMin->_key;                    if(subMin == smParent->_left)                    {                        smParent->_left = subMin->_right;                    }                    else                    {                        smParent->_right = subMin->_right;                    }                    delete subMin;                }                return true;            }        }        return false;    }    Node* Find(const T &k)    {        Node* current = _root;        while(current)        {            if(k > current->_key)            {                current = current->_right;            }            else if(k < current->_key)            {                current = current->_left;            }            else            {                return current;            }        }        return nullptr;    }    bool Insert(const T &k)    {        if(_root == nullptr)        {            _root = new Node(k);            return true;        }        Node* parent = nullptr;        Node* current = _root;        while(current)        {            if(k > current->_key)            {                parent = current;                current = current->_right;            }            else if(k < current->_key)            {                parent = current;                current = current->_left;            }            else            {                return false;            }        }        Node* newnode = new Node(k);        if(k > parent->_key)        {            parent->_right = newnode;        }        else        {            parent->_left = newnode;        }        return true;    }    void InOrder()    {        _InOrder(_root);        std::cout << std::endl;    }};</code></pre><h6 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h6><p>情况2-1-1：current左孩子为空且为父结点的左孩子</p><p><img src="https://img.3amupupup.online/delNode-2-1-1.png" alt="情况2-1-1"></p><p>情况2-1-2：current左孩子为空且为父结点的右孩子</p><p><img src="https://img.3amupupup.online/delNode-2-1-2.png" alt="情况2-1-2"></p><p>情况2-2-1：current左孩子不为空右孩子为空，且为父结点的左孩子</p><p><img src="https://img.3amupupup.online/delNode-2-2-1.png" alt="情况2-2-1"></p><p>情况2-2-2：current左孩子不为空右孩子为空，且为父结点的右孩子</p><p><img src="https://img.3amupupup.online/delNode-2-2-2.png" alt="情况2-2-2"></p><p> 情况2-3-1：subMin为smParent左孩子</p><p><img src="https://img.3amupupup.online/delNode-2-3-1.png" alt="情况2-3-1"></p><p>情况2-3-2：subMin为smParent右孩子</p><p><img src="https://img.3amupupup.online/delNode-2-3-2.png" alt="情况2-3-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h4&gt;&lt;p&gt;中序是有序的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;BSTree.png&quot; alt=&quot;BSTree&quot;&gt;&lt;/p&gt;
&lt;h5</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="c++" scheme="https://duwei19961021.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>socket</title>
    <link href="https://duwei19961021.github.io/2021/05/12/socket/"/>
    <id>https://duwei19961021.github.io/2021/05/12/socket/</id>
    <published>2021-05-12T05:44:40.000Z</published>
    <updated>2021-05-20T05:56:40.085Z</updated>
    
    <content type="html"><![CDATA[<h4 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h4><p>内存分为大端存储和小端存储，网络数据同样有大小端之分。</p><blockquote><p>发送主机通常将发送缓冲区中的数据按照内存地址从低到高的顺序发出。</p><p>接收主机把从网络上收到的字节依次保存在接收缓冲区中，也是按照内存从低到高的顺序保存。</p><p>因此，网络数据流的地址应该规定：先发出的数据是低地址，后发出的数据是高地址。</p><p>TCP/IP协议规定，网络数据流应采用大端字节序，即低地址高字节。</p><p>不管是大端机还是小端机，都会按照TCP/IP规定的网络字节序来发送/接受数据。</p><p>如果当前发送主机是小端，就需要先将数据转换为大端，否则就忽略直接发送。</p></blockquote><h6 id="小端机-amp-大端机"><a href="#小端机-amp-大端机" class="headerlink" title="小端机 &amp; 大端机"></a>小端机 &amp; 大端机</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-shell"><code class="language-shell">☁  exercise  gcc small.c -g☁  exercise  gdb a.outGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-120.el7Copyright (C) 2013 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.  Type "show copying"and "show warranty" for details.This GDB was configured as "x86_64-redhat-linux-gnu".For bug reporting instructions, please see:<http://www.gnu.org/software/gdb/bugs/>...Reading symbols from /root/exercise/a.out...done.(gdb) l1    #include <stdio.h>23    int main()4    {5        int a = 0x11223344;6        return 0;7    }(gdb) b 6Breakpoint 1 at 0x4004d8: file small.c, line 6.(gdb) rStarting program: /root/exercise/a.outBreakpoint 1, main () at small.c:66        return 0;(gdb) x/16xb &a # x：查看内存，8：显示连续16个单元，x：以16进制方式显示，b：一个字节为一个单元0x7fffffffe35c:    0x44    0x33    0x22    0x11    0x00    0x00    0x00    0x000x7fffffffe364:    0x00    0x00    0x00    0x00    0x85    0x1a    0xa5    0xf7(gdb)</code></pre><h6 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h6><p>通过gdb查看内存可知：a值为：0x11223344，但是其在内存上的表示为：44 33 22 11，低权重为存储在低地址处，高权重位存储在高低地址处，这样的存储方式称为小端存储法。反之则为大端存储。</p><p>按照TCP/IP协议规定，如果要将a的内容通过网络发送给另一台主机：因为我这里是小端机，a在内存上为：44 33 22 11，发送之前需要将其转换为大端：11 22 33 44，然后按照低地址到高地址的方式发送，接受主机接收到的顺序为：11 22 33 44，接收主机保存时会按照低地址到高地址的方式保存在内存中：11 22 33 44</p><h6 id="C语言接口"><a href="#C语言接口" class="headerlink" title="C语言接口"></a>C语言接口</h6><p>为了使网络具有可移植性，使同样的代码在大端机和小端机编译后都能正常运行，可以调用库函数做网络字节序和主机字节序的转换。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span>uint32_t <span class="token function">htonl</span><span class="token punctuation">(</span>uint32_t hostlong<span class="token punctuation">)</span><span class="token punctuation">;</span>uint16_t <span class="token function">htons</span><span class="token punctuation">(</span>uint16_t hostshort<span class="token punctuation">)</span><span class="token punctuation">;</span>uint32_t <span class="token function">ntohl</span><span class="token punctuation">(</span>uint32_t netlong<span class="token punctuation">)</span><span class="token punctuation">;</span>uint16_t <span class="token function">ntohs</span><span class="token punctuation">(</span>uint16_t netshort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// h表示host，n表示net，l表示32位长整数，s表示16位短整数 (32位系统)</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// /usr/include/linux/in.h</span><span class="token keyword">struct</span> sockaddr_in <span class="token punctuation">{</span>  __kernel_sa_family_t  sin_family<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Address family       */</span>  __be16        sin_port<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Port number          */</span>  <span class="token keyword">struct</span> in_addr    sin_addr<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Internet address     */</span>  <span class="token comment" spellcheck="true">/* Pad to size of `struct sockaddr'. */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span>     __pad<span class="token punctuation">[</span>__SOCK_SIZE__ <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span>            <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> in_addr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Internet address. */</span><span class="token keyword">struct</span> in_addr <span class="token punctuation">{</span>    __be32  s_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><h6 id="server"><a href="#server" class="headerlink" title="server"></a>server</h6><pre class=" language-c++"><code class="language-c++">#pragma once#include <iostream>#include <string>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <unistd.h>#include <stdlib.h>class udpServer{private:    std::string _ip;    short _port;    int _sock;public:    udpServer(std::string ip = "127.0.0.1", short port = 8080)    {        _ip = ip;        _port = port;    }    void initServer()    {        _sock = socket(AF_INET, SOCK_DGRAM, 0);        std::cout << "sock: " << _sock << std::endl;        struct sockaddr_in local;        local.sin_family = AF_INET;        local.sin_port = htons(_port); // 将主机序列转换为网络序列（解决大小端问题）        local.sin_addr.s_addr = inet_addr(_ip.c_str()); // 将字符串类型的ip地址转换成4字节的整形（ip地址可以用四个字节表示）        if(bind(_sock, (struct sockaddr*)&local, sizeof(local)) < 0)        {            std::cerr << "bind error" << std::endl;            exit(-1);        }    }    void start()    {        char buf[64];        for(;;)        {            buf[0] = '\0';            struct sockaddr_in end_point;            socklen_t len = sizeof(end_point);            ssize_t s = recvfrom(_sock, buf, sizeof(buf)-1, 0,(struct sockaddr*)&end_point, &len); // 接收：套接字fd，接收存放的缓冲区，缓冲区的大小，阻塞或非阻塞方式，成员有协议、目的端口、目的端口的结构体（输出型参数），结构体大小            if(s > 0)            {                buf[s] = '\0';                std::cout << "client# " << buf << std::endl;                sendto(_sock, buf, s, 0, (struct sockaddr*)&end_point, len); // 发送：end_point是输入型参数            }        }    }    ~udpServer()    {        close(_sock);    }};</code></pre><h6 id="client"><a href="#client" class="headerlink" title="client"></a>client</h6><pre class=" language-c++"><code class="language-c++">#pragma once#include <iostream>#include <string>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <unistd.h>#include <stdlib.h>class udpClient{private:    std::string _ip;    short _port;    int _sock;public:    udpClient(std::string ip = "127.0.0.1", short port = 8080)    {        _ip = ip;        _port = port;    }    void initServer()    {        _sock = socket(AF_INET, SOCK_DGRAM, 0); // 创建套接字        std::cout << "sock: " << _sock << std::endl;    }    void start()    {        struct sockaddr_in peer;        peer.sin_family = AF_INET;        peer.sin_port = htons(_port);        peer.sin_addr.s_addr = inet_addr(_ip.c_str());        std::string msg;        for(;;)        {            std::cout << "Please Enter: ";            std::cin >> msg;            sendto(_sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&peer,  sizeof(peer));            char recvMsg[64];            ssize_t s = recvfrom(_sock, recvMsg, sizeof(recvMsg)-1, 0, NULL, NULL);            if(s > 0)            {                recvMsg[s] = '\0';                std::cout << "Server# " << recvMsg << std::endl;            }        }    }    ~udpClient()    {        close(_sock);    }};</code></pre><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><h5 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h5><h6 id="单进程"><a href="#单进程" class="headerlink" title="单进程"></a>单进程</h6><p>一次只能处理一个请求。</p><pre class=" language-c++"><code class="language-c++">#ifndef __TCP_SERVER_#define __TCP_SERVER_#include <iostream>#include <string>#include <cstdlib>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <cstring>#include <unistd.h>#include <signal.h>#include <pthread.h>#define BACKLOG 5class tcpServer{private:    int _port; // 端口    int listen_sock; // 套接字（文件描述符）public:    tcpServer(int port = 8080):_port(port), listen_sock(-1)    {    }    void initServer()    {        signal(SIGCHLD, SIG_IGN); // 父进程注册sigchild信号，子进程自行退出，父进程不关心        listen_sock = socket(AF_INET, SOCK_STREAM, 0);        if(listen_sock < 0)        {            std::cerr << "socket error" << std::endl;            exit(2);        }        struct sockaddr_in local;        local.sin_family = AF_INET;        local.sin_port = htons(_port);        local.sin_addr.s_addr = INADDR_ANY;        if(bind(listen_sock, (struct sockaddr*)&local, sizeof(local)) < 0)        {            std::cerr << "bind error" << std::endl;            exit(3);        }        if(listen(listen_sock, BACKLOG) < 0)        {            std::cerr << "listen error" << std::endl;            exit(4);        }    }    void service(int sock)    {        char buf[128];        while(true)        {            buf[0] = '\0';            ssize_t s = recv(sock, buf, sizeof(buf)-1, 0);            std::cout << s << std::endl;            if(s > 0)            {                buf[s] = '\0';                std::cout << "client # " << buf << std::endl;                send(sock, buf, strlen(buf), 0);            }            if(s == 0)            {                close(sock);                std::cout << "client quit" << std::endl;                break;            }        }    }    void start()    {        struct sockaddr_in endpoint;        while(true)        {            socklen_t len = sizeof(endpoint);            int sock = accept(listen_sock, (struct sockaddr*)&endpoint, &len);            if(sock < 0)            {                std::cerr << "accept error" << std::endl;                continue;            }            std::cout << "get a link" << std::endl;      service(sock);        }    }    ~tcpServer()    {    }};#endif</code></pre><h6 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h6><p>效率不会高，创建进程开销很大，另外进程比较占用系统资源。</p><pre class=" language-c++"><code class="language-c++">#ifndef __TCP_SERVER_#define __TCP_SERVER_#include <iostream>#include <string>#include <cstdlib>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <cstring>#include <unistd.h>#include <signal.h>#include <pthread.h>#define BACKLOG 5class tcpServer{private:    int _port; // 端口    int listen_sock; // 套接字（文件描述符）public:    tcpServer(int port = 8080):_port(port), listen_sock(-1)    {    }    void initServer()    {        signal(SIGCHLD, SIG_IGN); // 父进程注册sigchild信号，子进程自行退出，父进程不关心        listen_sock = socket(AF_INET, SOCK_STREAM, 0);        if(listen_sock < 0)        {            std::cerr << "socket error" << std::endl;            exit(2);        }        struct sockaddr_in local;        local.sin_family = AF_INET;        local.sin_port = htons(_port);        local.sin_addr.s_addr = INADDR_ANY;        if(bind(listen_sock, (struct sockaddr*)&local, sizeof(local)) < 0)        {            std::cerr << "bind error" << std::endl;            exit(3);        }        if(listen(listen_sock, BACKLOG) < 0)        {            std::cerr << "listen error" << std::endl;            exit(4);        }    }    void service(int sock)    {        char buf[128];        while(true)        {            buf[0] = '\0';            ssize_t s = recv(sock, buf, sizeof(buf)-1, 0);            std::cout << s << std::endl;            if(s > 0)            {                buf[s] = '\0';                std::cout << "client # " << buf << std::endl;                send(sock, buf, strlen(buf), 0);            }            if(s == 0)            {                close(sock);                std::cout << "client quit" << std::endl;                break;            }        }    }    void start()    {        struct sockaddr_in endpoint;        while(true)        {            socklen_t len = sizeof(endpoint);            int sock = accept(listen_sock, (struct sockaddr*)&endpoint, &len);            if(sock < 0)            {                std::cerr << "accept error" << std::endl;                continue;            }            std::cout << "get a link" << std::endl;      pid_t id = fork();      if(id == 0)      {            close(listen_sock); // 子进程只关心sock，listen_sock子进程不关心，可以关闭            service(sock);            exit(0);       }       close(sock); // 父进程不关心sock，sock交给子进程，而父进程只关心接收请求然后交给子进程处理。sock必须关掉：父进程不断接收连接，不断创建套接字，然后子进程继承了被创建的套接字，如果不关闭，父进程打开的fd会越来越多        }    }    ~tcpServer()    {    }};#endif</code></pre><h6 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h6><pre class=" language-c++"><code class="language-c++">#ifndef __TCP_SERVER_#define __TCP_SERVER_#include <iostream>#include <string>#include <cstdlib>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <cstring>#include <unistd.h>#include <signal.h>#include <pthread.h>#define BACKLOG 5class tcpServer{private:    int _port; // 端口    int listen_sock; // 套接字（文件描述符）public:    tcpServer(int port = 8080):_port(port), listen_sock(-1)    {    }    void initServer()    {        signal(SIGCHLD, SIG_IGN); // 父进程注册sigchild信号，子进程自行退出，父进程不关心        listen_sock = socket(AF_INET, SOCK_STREAM, 0);        if(listen_sock < 0)        {            std::cerr << "socket error" << std::endl;            exit(2);        }        struct sockaddr_in local;        local.sin_family = AF_INET;        local.sin_port = htons(_port);        local.sin_addr.s_addr = INADDR_ANY;        if(bind(listen_sock, (struct sockaddr*)&local, sizeof(local)) < 0)        {            std::cerr << "bind error" << std::endl;            exit(3);        }        if(listen(listen_sock, BACKLOG) < 0)        {            std::cerr << "listen error" << std::endl;            exit(4);        }    }    static void* service(void* p)    {        int sock = *(int*)p;        pthread_detach(pthread_self()); // 线程分离，主线程无需等待子线程，子线程指向完成自行退出        char buf[128];        while(true)        {            buf[0] = '\0';            ssize_t s = recv(sock, buf, sizeof(buf)-1, 0);            std::cout << s << std::endl;            if(s > 0)            {                buf[s] = '\0';                std::cout << "client # " << buf << std::endl;                send(sock, buf, strlen(buf), 0);            }            if(s == 0)            {                close(sock);                std::cout << "client quit" << std::endl;                break;            }        }    }    void start()    {        struct sockaddr_in endpoint;        while(true)        {            socklen_t len = sizeof(endpoint);            int sock = accept(listen_sock, (struct sockaddr*)&endpoint, &len);            if(sock < 0)            {                std::cerr << "accept error" << std::endl;                continue;            }            std::cout << "get a link" << std::endl;            pthread_t tid;            int* p = new int;            *p = sock;            pthread_create(&tid, NULL, service, (void*)p);        }    }    ~tcpServer()    {    }};#endif</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;网络字节序&quot;&gt;&lt;a href=&quot;#网络字节序&quot; class=&quot;headerlink&quot; title=&quot;网络字节序&quot;&gt;&lt;/a&gt;网络字节序&lt;/h4&gt;&lt;p&gt;内存分为大端存储和小端存储，网络数据同样有大小端之分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发送主机通常将发送缓</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="net" scheme="https://duwei19961021.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>nginx线程池</title>
    <link href="https://duwei19961021.github.io/2021/05/04/ngx_thread_pool/"/>
    <id>https://duwei19961021.github.io/2021/05/04/ngx_thread_pool/</id>
    <published>2021-05-03T16:43:27.000Z</published>
    <updated>2021-05-06T16:28:37.285Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx线程池"><a href="#nginx线程池" class="headerlink" title="nginx线程池"></a>nginx线程池</h4><pre class=" language-c++"><code class="language-c++">// task链表struct ngx_thread_task_s {    ngx_thread_task_t   *next; // 指向下一个task结构    ngx_uint_t          id; // 起标识作用的id    void                *ctx; // 传给handler的参数    void                (*handler)(void *data, ngx_log_t *log); // 要执行的任务(函数指针)    ngx_event_t         event;};// 存取任务的数据结构(链表实现的队列)typedef struct {    ngx_thread_task_t        *first; // 队尾    ngx_thread_task_t       **last; // 队头} ngx_thread_pool_queue_t;struct ngx_thread_pool_s {    ngx_thread_mutex_t        mtx; // 互斥锁：其本质是 pthread_mutex_t，使用的pthread库    ngx_thread_pool_queue_t   queue; // 通过这个数据结构的两个指针，添加task，取task交给线程执行    ngx_int_t                 waiting;    ngx_thread_cond_t         cond; // 条件变量：其本质是 pthread_cond_t，使用的pthread库    ngx_log_t                *log;    ngx_str_t                 name; // 线程池名字，默认default    ngx_uint_t                threads; // 线程池中线程的数量    ngx_int_t                 max_queue; // 队列中task最大数量    u_char                   *file;    ngx_uint_t                line;};</code></pre><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><ol><li><p>static ngx_int_t ngx_thread_pool_init(ngx_thread_pool_t *tp, ngx_log_t *log, ngx_pool_t *pool): 初始化线程池</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> ngx_int_t  <span class="token function">ngx_thread_pool_init</span><span class="token punctuation">(</span>ngx_thread_pool_t <span class="token operator">*</span>tp<span class="token punctuation">,</span> ngx_log_t <span class="token operator">*</span>log<span class="token punctuation">,</span> ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>             err<span class="token punctuation">;</span>    pthread_t       tid<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程id</span> ngx_uint_t      n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程个数</span>    pthread_attr_t  attr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程属性的对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ngx_notify <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>               <span class="token string">"the configured event method cannot be used with thread pools"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ngx_thread_pool_queue_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*        #define ngx_thread_pool_queue_init(q)                                         \          (q)->first = NULL;                                                        \          (q)->last = &amp;(q)->first      初始化ngx_thread_pool_queue_t：空队列    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_thread_mutex_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> log<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        ngx_int_t ngx_thread_mutex_create(ngx_thread_mutex_t *mtx, ngx_log_t *log)        {            ngx_err_t            err;            pthread_mutexattr_t  attr; // 设置互斥锁属性的结构            err = pthread_mutexattr_init(&amp;attr); // 初始化锁属性结构            if (err != 0) {                ngx_log_error(NGX_LOG_EMERG, log, err,                              "pthread_mutexattr_init() failed");                return NGX_ERROR;            }            err = pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_ERRORCHECK);            // 通过：man pthread_mutexattr_settype 查询手册得知，这个函数功能是设置锁的类型。            // PTHREAD_MUTEX_ERRORCHECK：这种类型的互斥锁提供错误检查，一个线程试图重新锁            // 互斥锁而不首先解锁它将返回一个错误。试图解锁另一个线程已锁定的互斥锁的线程将返回            // 一个错误。一个线程尝试解锁已解锁的互斥锁将返回一个错误。            // 出现上述三种情况时就会范湖错误。            // 由此可知：生产者将task初始化好之后放入ngx_thread_pool_queue_t，线程池的线程再去这个链表中获取task，            // 获取task时如果发现有其它线程已经在操作这个链表了，线程不会进入阻塞，会直接return，因此线程处理task这            // 个过程是异步非阻塞的            if (err != 0) {                ngx_log_error(NGX_LOG_EMERG, log, err,                              "pthread_mutexattr_settype"                              "(PTHREAD_MUTEX_ERRORCHECK) failed");                return NGX_ERROR;            }            err = pthread_mutex_init(mtx, &amp;attr); // 这一步才是真正的初始化锁并给锁设置属性            if (err != 0) {                ngx_log_error(NGX_LOG_EMERG, log, err,                              "pthread_mutex_init() failed");                return NGX_ERROR;            }            err = pthread_mutexattr_destroy(&amp;attr); // 销毁attr，属性已经设置完，可以释放，避免内存泄露            if (err != 0) {                ngx_log_error(NGX_LOG_ALERT, log, err,                              "pthread_mutexattr_destroy() failed");            }            return NGX_OK;        }    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_thread_cond_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>cond<span class="token punctuation">,</span> log<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 初始条件变量，如果初始化失败则线程池的初始化就是有问题的，之前创建的互斥锁资源需要释放</span>        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_thread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*      ngx_int_t ngx_thread_cond_create(ngx_thread_cond_t *cond, ngx_log_t *log)      {          ngx_err_t  err;          err = pthread_cond_init(cond, NULL);          if (err == 0) {              return NGX_OK;          }          ngx_log_error(NGX_LOG_EMERG, log, err, "pthread_cond_init() failed");          return NGX_ERROR;      }    */</span>    tp<span class="token operator">-></span>log <span class="token operator">=</span> log<span class="token punctuation">;</span>    err <span class="token operator">=</span> <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化给线程设置属性的结构</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> log<span class="token punctuation">,</span> err<span class="token punctuation">,</span>                      <span class="token string">"pthread_attr_init() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    err <span class="token operator">=</span> <span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> PTHREAD_CREATE_DETACHED<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程分离，这种属性的线程在运行结束后会自动释放所有资源，无需等待，而无需使用pthread_join进行回收，避免阻塞主线程。这里仅仅初始化attr结构，并未真正意义上给线程设置属性。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> log<span class="token punctuation">,</span> err<span class="token punctuation">,</span>                      <span class="token string">"pthread_attr_setdetachstate() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    err <span class="token operator">=</span> <span class="token function">pthread_attr_setstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> PTHREAD_STACK_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> log<span class="token punctuation">,</span> err<span class="token punctuation">,</span>                      <span class="token string">"pthread_attr_setstacksize() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> tp<span class="token operator">-></span>threads<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 创建n个线程</span>        err <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> ngx_thread_pool_cycle<span class="token punctuation">,</span> tp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程执行的函数是ngx_thread_pool_cycle，给ngx_thread_pool_cycle函数的参数是tp(线程池本身)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> log<span class="token punctuation">,</span> err<span class="token punctuation">,</span>                          <span class="token string">"pthread_create() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 此时n个线程已经创建完毕，它们都执行同一个工作：执行ngx_thread_pool_cycle函数（获取任务，执行任务）</span>    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 销毁设置线程属性的结构，避免内存泄露</span>    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>static void * ngx_thread_pool_cycle(void *data)</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_thread_pool_cycle</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_thread_pool_t <span class="token operator">*</span>tp <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程池指针</span>    <span class="token keyword">int</span>                 err<span class="token punctuation">;</span>    sigset_t            set<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程的信号集</span>    ngx_thread_task_t  <span class="token operator">*</span>task<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// task组成队列（叫链表也行）中的元素，元素结构中有个函数指针，也就是要执行的任务函数的指针</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token function">ngx_time_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                   <span class="token string">"thread in pool \"%V\" started"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tp<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sigfillset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所有信号对应的bitmap上都设置为1</span>    <span class="token function">sigdelset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGILL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行了非法指令</span>    <span class="token function">sigdelset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGFPE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 发生致命的算数运算错误 </span>    <span class="token function">sigdelset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGSEGV<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 段错误</span>    <span class="token function">sigdelset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGBUS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 非法地址</span>    err <span class="token operator">=</span> <span class="token function">pthread_sigmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>set<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 除了以上四个信号，其它信号都会被阻塞（block）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token string">"pthread_sigmask() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_thread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给mtx上锁，如果mtx已经被锁了则会报错（因为之前设置过锁属性--PTHREAD_MUTEX_ERRORCHECK），这个线程执行结束，走到</span>            <span class="token comment" spellcheck="true">// 这一步链表上的task并没有被取下来。如果线程获取task时发现task队列正有其它线程在从中获取任务则直接结束，不进行阻塞。</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 有一点没想明白：如果return那么这个线程就结束了，线程池里的线程数量会减少</span>              <span class="token comment" spellcheck="true">// 在线程们刚启动的时候可能会出现多个线程争抢一把锁的问题，ngx这里是直接将争抢锁的线程结束掉而不是阻塞，虽然可能会造成某些线程退出，</span>              <span class="token comment" spellcheck="true">// 造成线程池中线程数量减少，但是这里不阻塞选择结束，带来了性能上的提升，且并不是会持续减少，当所有线程都在cond条件变量下等待时，</span>              <span class="token comment" spellcheck="true">// 线程的运行就是有序的了，就不会出现争抢锁导致锁退出的情况了。虽然线程数量会减少，但是也并不是会一直减少，在所有线程进入cond条件变量下</span>              <span class="token comment" spellcheck="true">// 时，便不会再发生争抢锁的情况，且效率比互斥锁要更高。</span>              <span class="token comment" spellcheck="true">// 在此过程中生产者是worker进程，生产者只有一个！！！，线程多个，所以消费起来，消费者必然比生产者快。</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 上锁成功，进入临界区！！！</span>        <span class="token comment" spellcheck="true">/* the number may become negative */</span>        tp<span class="token operator">-></span>waiting<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 未知</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tp<span class="token operator">-></span>queue<span class="token punctuation">.</span>first <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果task队列空（没有任务取），则线程在cond条件变量下休眠，直到被唤醒。使用while：如果醒来发现任务队列还是为空继续休眠</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_thread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 阻塞在当前位置</span>                <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// pthread_cond_wait函数在进入休眠时会将锁释放，重新被唤醒时再加锁。如果wait失败则锁不会被释放，所以在这里是用while而不是if，ngx_thread_cond_wait执行失败会释放锁</span>            <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_thread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解锁</span>                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        task <span class="token operator">=</span> tp<span class="token operator">-></span>queue<span class="token punctuation">.</span>first<span class="token punctuation">;</span>         tp<span class="token operator">-></span>queue<span class="token punctuation">.</span>first <span class="token operator">=</span> task<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出一个task</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tp<span class="token operator">-></span>queue<span class="token punctuation">.</span>first <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断是否取完，取完则将task队列恢复至初始状态</span>            tp<span class="token operator">-></span>queue<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token operator">&amp;</span>tp<span class="token operator">-></span>queue<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_thread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 取到task之后是没必要等task中的任务执行完毕之后再释放锁，取出之后就可以立马释放锁了，让其它线程取，提高线程协作的效率。</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>        <span class="token function">ngx_time_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                       <span class="token string">"run task #%ui in thread pool \"%V\""</span><span class="token punctuation">,</span>                       task<span class="token operator">-></span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tp<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token operator">-></span><span class="token function">handler</span><span class="token punctuation">(</span>task<span class="token operator">-></span>ctx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时可以执行task中的任务了</span>        <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                       <span class="token string">"complete task #%ui in thread pool \"%V\""</span><span class="token punctuation">,</span>                       task<span class="token operator">-></span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tp<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">ngx_spinlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ngx_thread_pool_done_lock<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// task执行完需要将task添加到done链表上去，添加这个操作执行的时间非常短，所以这里采用的自旋锁，提高效率，减少线程切换带来的开销。</span>        <span class="token operator">*</span>ngx_thread_pool_done<span class="token punctuation">.</span>last <span class="token operator">=</span> task<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将task添加到链表末尾</span>        ngx_thread_pool_done<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">ngx_memory_barrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ngx_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ngx_thread_pool_done_lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解锁队列</span>        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_notify</span><span class="token punctuation">(</span>ngx_thread_pool_handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 暂时没看懂，貌似和事件驱动模型有关</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">ngx_thread_pool_handler</span><span class="token punctuation">(</span>ngx_event_t <span class="token operator">*</span>ev<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_event_t        <span class="token operator">*</span>event<span class="token punctuation">;</span>    ngx_thread_task_t  <span class="token operator">*</span>task<span class="token punctuation">;</span>    <span class="token function">ngx_log_debug0</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> ev<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"thread pool handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ngx_spinlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ngx_thread_pool_done_lock<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用的自旋锁，将已完成的task加入至ngx_thread_pool_done链表，操作步骤少，需要的时间也少，使用自旋锁是最合适的，避免进入阻塞，线程切换带来的开销</span>    task <span class="token operator">=</span> ngx_thread_pool_done<span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// task保存头结点，这一段代码：一次取出done链表上的多个task</span>    ngx_thread_pool_done<span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ngx_thread_pool_done<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_thread_pool_done<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token function">ngx_memory_barrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ngx_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ngx_thread_pool_done_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历从done链表上取下来的多个结点</span>        <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> ev<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                       <span class="token string">"run completion handler for task #%ui"</span><span class="token punctuation">,</span> task<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        event <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token operator">-></span>event<span class="token punctuation">;</span>        task <span class="token operator">=</span> task<span class="token operator">-></span>next<span class="token punctuation">;</span>        event<span class="token operator">-></span>complete <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记为已经完成</span>        event<span class="token operator">-></span>active <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        event<span class="token operator">-></span><span class="token function">handler</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_thread_pool_t <strong>***ngx_thread_pool_add</strong>(<strong>ngx_conf_t ***</strong>cf<strong>,</strong> ngx_str_t *****name)：添加一个内存池</p><pre class=" language-c"><code class="language-c">ngx_thread_pool_t <span class="token operator">*</span><span class="token function">ngx_thread_pool_add</span><span class="token punctuation">(</span>ngx_conf_t <span class="token operator">*</span>cf<span class="token punctuation">,</span> ngx_str_t <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_thread_pool_t       <span class="token operator">*</span>tp<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>tpp<span class="token punctuation">;</span>    ngx_thread_pool_conf_t  <span class="token operator">*</span>tcf<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果没定义线程池的名字默认为 "default"</span>        name <span class="token operator">=</span> <span class="token operator">&amp;</span>ngx_thread_pool_default<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tp <span class="token operator">=</span> <span class="token function">ngx_thread_pool_get</span><span class="token punctuation">(</span>cf<span class="token operator">-></span>cycle<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先查找线程池的集合，判断其中是否已经创建过，有则直接返回其指针</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tp <span class="token operator">=</span> <span class="token function">ngx_pcalloc</span><span class="token punctuation">(</span>cf<span class="token operator">-></span>pool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_thread_pool_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在内存池上给线程池的结构申请内存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tp<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    tp<span class="token operator">-></span>file <span class="token operator">=</span> cf<span class="token operator">-></span>conf_file<span class="token operator">-></span>file<span class="token punctuation">.</span>name<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    tp<span class="token operator">-></span>line <span class="token operator">=</span> cf<span class="token operator">-></span>conf_file<span class="token operator">-></span>line<span class="token punctuation">;</span>    tcf <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_thread_pool_conf_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">ngx_get_conf</span><span class="token punctuation">(</span>cf<span class="token operator">-></span>cycle<span class="token operator">-></span>conf_ctx<span class="token punctuation">,</span>                                                  ngx_thread_pool_module<span class="token punctuation">)</span><span class="token punctuation">;</span>    tpp <span class="token operator">=</span> <span class="token function">ngx_array_push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tcf<span class="token operator">-></span>pools<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tpp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>tpp <span class="token operator">=</span> tp<span class="token punctuation">;</span>    <span class="token keyword">return</span> tp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_thread_pool_t <strong>***ngx_thread_pool_get</strong>(<strong>ngx_cycle_t ***</strong>cycle<strong>,</strong> ngx_str_t *****name)：通过name获取内存池指针</p><pre class=" language-c"><code class="language-c">ngx_thread_pool_t <span class="token operator">*</span><span class="token function">ngx_thread_pool_get</span><span class="token punctuation">(</span>ngx_cycle_t <span class="token operator">*</span>cycle<span class="token punctuation">,</span> ngx_str_t <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_uint_t                i<span class="token punctuation">;</span>    ngx_thread_pool_t       <span class="token operator">*</span><span class="token operator">*</span>tpp<span class="token punctuation">;</span>    ngx_thread_pool_conf_t   <span class="token operator">*</span>tcf<span class="token punctuation">;</span>    tcf <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_thread_pool_conf_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">ngx_get_conf</span><span class="token punctuation">(</span>cycle<span class="token operator">-></span>conf_ctx<span class="token punctuation">,</span>                                                  ngx_thread_pool_module<span class="token punctuation">)</span><span class="token punctuation">;</span>    tpp <span class="token operator">=</span> tcf<span class="token operator">-></span>pools<span class="token punctuation">.</span>elts<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tcf<span class="token operator">-></span>pools<span class="token punctuation">.</span>nelts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tpp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>name<span class="token punctuation">.</span>len <span class="token operator">==</span> name<span class="token operator">-></span>len            <span class="token operator">&amp;&amp;</span> <span class="token function">ngx_strncmp</span><span class="token punctuation">(</span>tpp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>name<span class="token punctuation">.</span>data<span class="token punctuation">,</span> name<span class="token operator">-></span>data<span class="token punctuation">,</span> name<span class="token operator">-></span>len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> tpp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>static void ngx_thread_pool_destroy<strong>(</strong>ngx_thread_pool_t *****tp)：销毁线程池</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">ngx_thread_pool_destroy</span><span class="token punctuation">(</span>ngx_thread_pool_t <span class="token operator">*</span>tp<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_uint_t           n<span class="token punctuation">;</span>    ngx_thread_task_t    task<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> ngx_uint_t  lock<span class="token punctuation">;</span>    <span class="token function">ngx_memzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>task<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_thread_task_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    task<span class="token punctuation">.</span>handler <span class="token operator">=</span> ngx_thread_pool_exit_handler<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改task的handler指针，指向退出线程的函数</span>    task<span class="token punctuation">.</span>ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>lock<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> tp<span class="token operator">-></span>threads<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_thread_task_post</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>task<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断当前task是否能退出，能退出则会解锁lock</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_sched_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        task<span class="token punctuation">.</span>event<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_thread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>cond<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 销毁条件变量</span>    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_thread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 销毁互斥锁</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_int_t ngx_thread_task_post(ngx_thread_pool_t *tp, ngx_thread_task_t *task)：添加task进入task队列</p><pre class=" language-c"><code class="language-c">ngx_int_t<span class="token function">ngx_thread_task_post</span><span class="token punctuation">(</span>ngx_thread_pool_t <span class="token operator">*</span>tp<span class="token punctuation">,</span> ngx_thread_task_t <span class="token operator">*</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token operator">-></span>event<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                     <span class="token string">"task #%ui already active"</span><span class="token punctuation">,</span> task<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_thread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>tp<span class="token operator">-></span>waiting <span class="token operator">>=</span> tp<span class="token operator">-></span>max_queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_thread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ERR<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                     <span class="token string">"thread pool \"%V\" queue overflow: %i tasks waiting"</span><span class="token punctuation">,</span>                     <span class="token operator">&amp;</span>tp<span class="token operator">-></span>name<span class="token punctuation">,</span> tp<span class="token operator">-></span>waiting<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   task<span class="token operator">-></span>event<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   task<span class="token operator">-></span>id <span class="token operator">=</span> ngx_thread_pool_task_id<span class="token operator">++</span><span class="token punctuation">;</span>   task<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_thread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>cond<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 有task进队事件发生，唤醒线程处理，奇怪的是为什么是先唤醒消费者线程，再把task放入队列</span>       <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_thread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token operator">*</span>tp<span class="token operator">-></span>queue<span class="token punctuation">.</span>last <span class="token operator">=</span> task<span class="token punctuation">;</span>   tp<span class="token operator">-></span>queue<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token operator">-></span>next<span class="token punctuation">;</span>   tp<span class="token operator">-></span>waiting<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">ngx_thread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tp<span class="token operator">-></span>mtx<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_CORE<span class="token punctuation">,</span> tp<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                  <span class="token string">"task #%ui added to thread pool \"%V\""</span><span class="token punctuation">,</span>                  task<span class="token operator">-></span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tp<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src="../../../Desktop/source/image/ngx_task_queue.png" alt="ngx_task_queue"></p><p>线程从task队列获取任务时，尽可能的多获取任务多执行任务，而不是多个线程同步式的去从task队列获取，减少线程的切换。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx线程池&quot;&gt;&lt;a href=&quot;#nginx线程池&quot; class=&quot;headerlink&quot; title=&quot;nginx线程池&quot;&gt;&lt;/a&gt;nginx线程池&lt;/h4&gt;&lt;pre class=&quot; language-c++&quot;&gt;&lt;code class=&quot;language-</summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="thread_pool" scheme="https://duwei19961021.github.io/tags/thread-pool/"/>
    
  </entry>
  
  <entry>
    <title>c++继承</title>
    <link href="https://duwei19961021.github.io/2021/05/03/c++polymorphic/"/>
    <id>https://duwei19961021.github.io/2021/05/03/c++polymorphic/</id>
    <published>2021-05-03T04:17:03.000Z</published>
    <updated>2021-05-03T06:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;class Person{public:    virtual void ByTicket()    {        cout << "正常排队----全价格买票" << endl;    }};class Student: public Person{public:    virtual void ByTicket()    {        cout << "正常排队----半价格买票" << endl;    }};// 1、继承类中，虚函数的重写。//    重写的条件：//          a. 父子类中的函数都必须是虚函数。//          b. 函数名、参数、返回值都要相同。// 2、基类指针或者指针去调用这个虚函数。//    指向谁，调用谁的虚函数void Buy(Person& p){      // 不满足多态：跟类型有关，也就是说p是什么类型，就调用这个类型的成员函数。      // 满足多态：跟对象有关，也就是说指向的是哪个对象就调用哪个的虚函数。    p.ByTicket();}int main(){    Person p;    Buy(p);    Student s;    Buy(s);    return 0;}</code></pre><h5 id="虚函数重写的两个例外"><a href="#虚函数重写的两个例外" class="headerlink" title="虚函数重写的两个例外"></a>虚函数重写的两个例外</h5><h6 id="1、协变"><a href="#1、协变" class="headerlink" title="1、协变"></a>1、协变</h6><p>基类与派生类虚函数返回值类型不同。</p><p>派生类重写基类虚函数时，与基类虚函数返回值类型不同。即基类虚函数返回基类对象的指针或引用，派生类虚函数返回派生类对象的指针或引用。</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;class A{};class B: public A{};class Person{public:    virtual A* ByTicket()    {        cout << "正常排队----全价格买票" << endl;        return new A;    }};class Student: public Person{public:    virtual B* ByTicket()    {        cout << "正常排队----半价格买票" << endl;        return new B;    }};void Buy(Person& p){    p.ByTicket();}int main(){    Person p;    Buy(p);    Student s;    Buy(s);    return 0;}</code></pre><h6 id="2、析构函数的重写"><a href="#2、析构函数的重写" class="headerlink" title="2、析构函数的重写"></a>2、析构函数的重写</h6><p>基类与派生类的析构函数名不同</p><p>如果基类的析构函数为虚函数，此时派生类析构函数只要定义，无论是否加关键字virtual，都与基类的析构函数构成重写。虽然基类与派生类的析构函数名字不同，违背了重写的规则，其实不然，这里可以理解为编译器对析构函数的名称做了特殊处理，编译后析构函数的名字统一处理成destructor。</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;class Person{public:    virtual ~Person()    {        cout << "~Person" << endl;    }};class Student: public Person{public:    ~Student()    {        cout << "~Student" << endl;    }};int main(){    /*    Person p1;    Student s1;output:    ~Student // s1后入栈后销毁，销毁时先调用自己的析构函数    ~Person // 因为Student继承了Person类，所以派生类在销毁时还需要调用父类的析构函数去销毁属于父类的那部分数据    ~Person // 最后调用父类的析构函数    */    /*    1、如果父子类的析构函数不构成多态    Person *p1 = new Person;    Person *p2 = new Student;    delete p1; // p1.destructor()    delete p2; // p2.destructor() // 不构成多态就会按照类型去调用output:    ~Person // 父类调用析构函数    ~Person    // 由于编译器的处理，析构函数名会被处理成destructor，delete父类指针，会调用父类的析构函数(屏蔽了子类函数的析构函数，它们是同名成员destructor)，此时Student类对象中属于父类的数据被析构函数销毁，但是子类的析构函数没有被调用，造成内存泄露。    */    /*    2、如果父子类的析构函数构成多态    Person *p1 = new Person;    Person *p2 = new Student;    delete p1;    delete p2;output:    ~Person // 父类析构    ~Student // delete时，调用对象对应的析构函数    ~Person    */    return 0;}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h4&gt;&lt;h5 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h5&gt;&lt;pre c</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="c++" scheme="https://duwei19961021.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++继承</title>
    <link href="https://duwei19961021.github.io/2021/04/25/c++inheritance/"/>
    <id>https://duwei19961021.github.io/2021/04/25/c++inheritance/</id>
    <published>2021-04-25T14:55:23.000Z</published>
    <updated>2021-05-03T04:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="1、什么是继承？"><a href="#1、什么是继承？" class="headerlink" title="1、什么是继承？"></a>1、什么是继承？</h5><p>继承是面向对象程序设计使代码可以复用的重要手段，允许程序员在保持原有类特性的基础上进行扩展，增加功能，这样产生的新类叫派生类。继承是类设计层次的复用。</p><pre class=" language-c++"><code class="language-c++">class Person{public:    void speak()    {        ;    }    void sleep()    {        ;    }public:    int age;    string name;private:    float weight;};class boy: public Person{};class girl: public Person{};</code></pre><p>boy类和girl类都具有speak()、sleep()行为，以及年龄、名字属性，它们都可以从Person类中继承，而没有必要在他们自己的类中再次声明定义。在这个例子中：Person类称为父类或者基类，boy、girl类称为子类或者派生类。</p><h5 id="2、继承定义"><a href="#2、继承定义" class="headerlink" title="2、继承定义"></a>2、继承定义</h5><h6 id="继承关系和访问限定符"><a href="#继承关系和访问限定符" class="headerlink" title="继承关系和访问限定符"></a>继承关系和访问限定符</h6><p>继承方式：</p><ul><li>public 继承</li><li>protected 继承</li><li>private 继承</li></ul><h6 id="继承父类，子类访问父类成员的变化。"><a href="#继承父类，子类访问父类成员的变化。" class="headerlink" title="继承父类，子类访问父类成员的变化。"></a>继承父类，子类访问父类成员的变化。</h6><table><thead><tr><th align="left">类成员/继承方式</th><th align="center">public继承</th><th align="center">protected继承</th><th align="center">private继承</th></tr></thead><tbody><tr><td align="left">基类的public成员</td><td align="center">派生类的public成员</td><td align="center">派生类的protected成员</td><td align="center">派生类的private成员</td></tr><tr><td align="left">基类的protected成员</td><td align="center">派生类的protected成员</td><td align="center">派生类的protected成员</td><td align="center">派生类的private成员</td></tr><tr><td align="left">基类的private成员</td><td align="center">在派生类中不可见</td><td align="center">在派生类中不可见</td><td align="center">在派生类中不可见</td></tr></tbody></table><p>1、在子类中的访问方式 = min(基类访问方式，继承方式)。</p><p>2、基类private成员，在子类中不可见。(不可见，但是任然被继承)。</p><pre class=" language-c++"><code class="language-c++">#include <string>#include <iostream>using namespace std;class Person{public:    void speak()    {        ;    }    void sleep()    {        ;    }public:    int age;    string name;private:    float weight;};class boy: public Person{};class girl: public Person{};int main(){    cout << "sizeof(Person) = " << sizeof(Person) << endl; // 24    cout << "sizeof(boy) = " << sizeof(boy) << endl; // 24    cout << "sizeof(girl) = " << sizeof(girl) << endl; // 24      // Person、boy、girl类的大小相同    boy b;    cout << b.Person::weight << endl; // error,父类的private成员，派生类无法访问    return 0;}</code></pre><h4 id="基类和派生类对象赋值转换（只存在于public继承）"><a href="#基类和派生类对象赋值转换（只存在于public继承）" class="headerlink" title="基类和派生类对象赋值转换（只存在于public继承）"></a>基类和派生类对象赋值转换（只存在于public继承）</h4><ul><li>派生类可以赋值给 基类的对象 / 基类的指针 / 基类的引用，有个形象的说法叫做切片或者切割。</li><li>基类对象不能赋值给派生类对象。</li><li>基类的指针可以通过强制类型转换赋值给派生类的指针，但是必须是基类的指针是指向派生类对象时才是安全的。</li></ul><p><img src="https://img.3amupupup.online/CppInheritance.png" alt="切片"></p><pre class=" language-c++"><code class="language-c++">#include <string>#include <iostream>using namespace std;class Person{public:    Person()    {        _name = "duwei";        _sex = "man";        _age = 24;    }public:    string _name;    string _sex;    int _age;};class Student: public Person{public:    int _No;};int main(){    Person p;    Student stu;    p = stu;      cout << p._name << "," << p._sex << "," << p._age << endl; // duwei,man,24    cout << p._NO << endl; // 错误：‘class Person’没有名为‘_NO’的成员。如图所示，发生了切片    return 0;}</code></pre><h5 id="3、继承中的作用域"><a href="#3、继承中的作用域" class="headerlink" title="3、继承中的作用域"></a>3、继承中的作用域</h5><blockquote><ol><li><p>在继承体系中基类和派生类都有独立的作用域。</p></li><li><p>子类和父类中存在同名成员，子类成员将屏蔽对父类中同名成员的直接访问，这种情况叫隐藏，也叫重定义。</p><pre class=" language-c++"><code class="language-c++">#include <string>#include <iostream>using namespace std;class Person{public:    string _name = "duwei";    int _age = 24;    string _city = "hz";};class Student:public Person{public:    string _name = "zhangsan";    int _age = 25;    string _home = "hunan";};int main(){    Student stu;    cout << stu._name << endl; // zhangsan    cout << stu.Person::_name << endl; // duwei 如果需要访问父类中的同名成员，需要加上作用域。    return 0;}</code></pre></li><li><p>如果是成员函数的隐藏，只需要函数名相同就构成隐藏。</p></li><li><p>在实际继承体系中，最好不要定义同名的成员。</p></li></ol></blockquote><h5 id="4、派生类的默认成员函数"><a href="#4、派生类的默认成员函数" class="headerlink" title="4、派生类的默认成员函数"></a>4、派生类的默认成员函数</h5><ol><li><p>派生类的构造函数必须调用基类的构造函数初始化基类的那一部分成员。<strong>如果基类没有默认的构造函数，则必须在派生类构造函数的初始化列表阶段显示调用。</strong></p><pre class=" language-c++"><code class="language-c++">#include <string>#include <iostream>using namespace std;class Person{public:    Person()    {        _name = "duwei";        _sex = "man";        _age = 24;    }public:    string _name;    string _sex;    int _age;};class Student: public Person{public:    Student(int No)    : Person() // 继承下来的父类部分成员，要使用父类的构造函数去初始化，不能自己显示的初始化。    , _No(No)    {}public:    int _No;};int main(){    Student s(20);    cout << s._name << "," << s._sex << "," << s._age << endl; // duwei,man,24    cout << s._No << endl; // 20    return 0;}</code></pre></li><li><p>派生类的拷贝构造函数必须调用基类的拷贝构造完成基类的拷贝初始化。</p><pre class=" language-c++"><code class="language-c++">#include <string>#include <iostream>using namespace std;class Person{public:   Person()   {       _name = "duwei";       _sex = "man";       _age = 24;   }public:   string _name;   string _sex;   int _age;};class Student: public Person{public:   Student(int No)   : Person()   , _No(No)   {}   Student(const Student &s)   : Person(s) // 存在切片行为，派生类对象赋值给基类对象   , _No(s._No)   {}public:   int _No;};int main(){   Student s(20);   Student s2(s);   return 0;}</code></pre></li><li><p>派生类的operator=必须要调用基类的operator=完成基的复制。</p><pre class=" language-c++"><code class="language-c++">#include <string>#include <iostream>using namespace std;class Person{public:    Person()    {        _name = "duwei";        _sex = "man";        _age = 24;    }public:    string _name;    string _sex;    int _age;};class Student: public Person{public:    Student(int No)    : Person()    , _No(No)    {}    Student(const Student &s)    : Person(s)    , _No(s._No)    {}    Student& operator=(const Student &s)    {        if(this != &s)        {            Person::operator=(s); // 需要加上作用域，否则会和子类中的 operator= 产生歧义            _No = s._No;        }        return *this;    }public:    int _No;};int main(){    Student s(20);    Student s2(s);    Student s3 = s2;    return 0;}</code></pre></li><li><p>派生类的析构函数会在被调用完成后自动调用基类的析构函数清理基类成员。因为这样才能保证派生对象先清理派生类成员再清理基类成员的顺序。（先创建的后销毁）</p></li><li><p>派生类对象初始化先调用基类构造再调派生类构造。</p></li><li><p>派生类对象析构清理先调用派生类析构再调基类的析构。</p></li></ol><h5 id="5、继承与友元"><a href="#5、继承与友元" class="headerlink" title="5、继承与友元"></a>5、继承与友元</h5><p>友元关系不能继承，也就是说基类友元不能访问子类私有和保护成员。</p><h5 id="6、继承和静态成员"><a href="#6、继承和静态成员" class="headerlink" title="6、继承和静态成员"></a>6、继承和静态成员</h5><p>基类定义了static静态成员，则整个继承体系里面只有一个这样的成员。无论派生出多少个子类，都只有一 个static成员实例 。</p><h5 id="7、菱形继承"><a href="#7、菱形继承" class="headerlink" title="7、菱形继承"></a>7、菱形继承</h5><h6 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h6><p>一个子类只有一个直接父类时称这个继承关系为单继承。</p><p>![单继承](../Library/Application Support/typora-user-images/image-20210429205858101.png)</p><h6 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h6><p>一个子类有两个或以上直接父类时称这个继承关系为多继承。</p><p>![多继承](../Library/Application Support/typora-user-images/image-20210429210815054.png)</p><h6 id="棱形继承"><a href="#棱形继承" class="headerlink" title="棱形继承"></a>棱形继承</h6><p>多继承的特殊情况</p><p>![棱形继承](../Library/Application Support/typora-user-images/image-20210429210855540.png)</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;class Person{public:    string name;};class Teacher : public Person{    int _id; // 职工编号};class Student : public Person{public:    int _num; // 学号};class Assistant:public Student, public Teacher{    string _course; // 课程名};int main(){    Assistant a;    // a.name = "duwei"; // 错误：对成员‘name’的请求有歧义    a.Student::name = "duwei"; // 指定父类可以解决二义性，但是数据会存在冗余    a.Teacher::name = "duwei";    return 0;}</code></pre><h6 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h6><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;class Person{public:    string name;};class Teacher : virtual public Person{    int _id; // 职工编号};class Student : virtual public Person{public:    int _num; // 学号};class Assistant:public Student, public Teacher{    string _course; // 课程名};int main(){    Assistant a;    a.name = "duwei";    cout << a.name << endl; // duwei    a.Student::name = "zhangsan";    cout << a.name << endl; // zhangsan    a.Teacher::name = "lisi";    cout << a.name << endl; // lisi    return 0;}</code></pre><h6 id="虚拟继承分析"><a href="#虚拟继承分析" class="headerlink" title="虚拟继承分析"></a>虚拟继承分析</h6><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;class A{public:    int _a;};class B : public A{public:    int _b;};class C : public A{public:    int _c; // 学号};class D: public B, public C{public:    int _d;};int main(){    D d;    cout << sizeof(d) << endl;    d.B::_a = 1;    d.C::_a = 2;    d._b = 3;    d._d = 4;    return 0;}</code></pre><p>![image-20210429225636867](../Library/Application Support/typora-user-images/image-20210429225636867.png)</p><p>借助Clion查看d对象在内存上的结构：</p><p>其中成员 _a 各自一份的，类继承之后的存储和结构体成员的存储类似。</p><p>![image-20210429231041888](../Library/Application Support/typora-user-images/image-20210429231041888.png)</p><p>使用虚拟继承之后只有一份公共的虚基类成员 A，解决了数据冗余和二义性 </p><p>![image-20210502155450341](../Library/Application Support/typora-user-images/image-20210502155450341.png)</p><blockquote><p>set p pertty &lt;on/off&gt;: 按照层次打印结构体</p><p>set p obj &lt;on/off&gt;: 在C++中，如果一个对象指针指向其派生类，如果打开这个选项，GDB会自动按照虚方法调用的规则显示输出，如果关闭这个选项的话，GDB就不管虚函数表了。这个选项默认是off。 使用show print object查看对象选项的设置。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h4&gt;&lt;h5 id=&quot;1、什么是继承？&quot;&gt;&lt;a href=&quot;#1、什么是继承？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是继承？&quot;</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="c++" scheme="https://duwei19961021.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>thread</title>
    <link href="https://duwei19961021.github.io/2021/04/20/thread/"/>
    <id>https://duwei19961021.github.io/2021/04/20/thread/</id>
    <published>2021-04-20T09:02:24.000Z</published>
    <updated>2021-05-20T03:12:26.567Z</updated>
    
    <content type="html"><![CDATA[<h5 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h5><ul><li>在一个程序里的一个执行路线就叫做线程。更准确的定义是：线程是“一个进程的内部序列”。</li><li>一个进程至少有一个线程。</li><li>线程在进程内部运行，本质是在进程地址空间运行。</li><li>透过进程虚拟地址空间，可以看到进程大部分的资源，将进程资源合理的分配给每个执行流，就形成了线程执行流。</li></ul><p>进程：承担系统分配资源的基本实体。为了承担资源操作系统为进程提供了大批数据结构和内存块，以承担程序的数据和代码。</p><p>线程：调度的基本单位，是进程内部的执行流。（线程在进程的地址空间内运行）</p><h5 id="线程优点"><a href="#线程优点" class="headerlink" title="线程优点"></a>线程优点</h5><ul><li><p>创建一个新线程的代价比创建一个新进程代价要小的多。</p><p>进程是承担系统分配资源的基本实体，只有当资源创建好了，这个进程才算是被创建好；而线程只需要创建一个pcb，然后将已分配的部分资源指派给线程就好了。</p></li><li><p>与进程之间的切换相比，线程之间切换需要操作系统做的工作要少很多。（地址空间、页表不需要更换，只需要更换tss）</p><p>线程切换理论上只需要切换tss。线程只对应了进程部分资源。</p></li><li><p>线程占用的资源少</p></li><li><p>能充分利用多处理器的可并行数量</p></li><li><p>在等待慢I/O操作结束时，程序可执行其它计算任务。</p></li><li><p>计算密集型应用，为了能在多处理器系统上运行，将计算分割到多个线程中实现</p></li><li><p>I/O密集应用，为了提高性能，将I/O操作重叠，线程可以同时等待不同的I/O操作。</p></li></ul><h5 id="线程有点"><a href="#线程有点" class="headerlink" title="线程有点"></a>线程有点</h5><ul><li><p>性能损失</p><p>一个很少被外部事件阻塞的计算密集型线程往往无法与其它线程共享一个处理器。如果计算密集型线程的数量比可用处理器多，那么可能会有较大的性能损失，这里性能的损失指的是增加了额外的同步和调度开销，而可用的资源不变。</p></li><li><p>健壮性降低</p><p>编写多线程需要更全面更深入的考虑，在一个多线程程序里，因时间分配上的偏差或者共享了不该共享的变量而造成的不良影响的可能性是很大的，换句话说线程之间缺乏保护。</p></li><li><p>缺乏访问控制</p><p>进程是访问控制的基本粒度，在一个线程中调用某些OS函数会对整个进程造成影响。</p></li><li><p>编程难度提高</p></li></ul><h5 id="线程异常"><a href="#线程异常" class="headerlink" title="线程异常"></a>线程异常</h5><p>线程时进程的执行分支，线程出现异常，就类似进程出现异常，进而触发信号机制，终止进程，进程终止，该进程内的所有线程也就随即退出。</p><h5 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h5><ul><li>进程是资源分配的基本单位</li><li>线程时调度的基本单位</li><li>线程共享进程数据，但也拥有自己的一部分数据：<ul><li>线程ID</li><li>*一组寄存器(独立的硬件上下文)</li><li>*栈</li><li>errno</li><li>信号屏蔽字</li><li>调度优先级</li></ul></li></ul><h5 id="进程的多个线程共享"><a href="#进程的多个线程共享" class="headerlink" title="进程的多个线程共享"></a>进程的多个线程共享</h5><p>同一地址空间，因此Text Segment(代码段)、Data Segment(数据区)都是共享的，如果定义一个函数，在各线程中都可以调用，如果定义一个全局变量，在各个线程中都可以访问，除此之外，线程还共享以下进程资源和环境：</p><ul><li>文件描述符</li><li>每种信号的处理方式(SIG_IGN、SIG_DFL)</li><li>当前工作目录</li><li>用户id和组id</li></ul><h5 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h5><h6 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread_run</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I am %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pthread_t tid<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_run<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"thread 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建线程，成功返回0，失败返回相对应的错误码。</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I am thread!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-shell"><code class="language-shell">☁  ~  ps aux |grep testroot     27491  0.0  0.0  14568   380 pts/0    Sl+  21:41   0:00 ./test☁  ~  ps -alF S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD0 S     0 27491 26311  0  80   0 -  3642 hrtime pts/0    00:00:00 test0 R     0 27537 27501  0  80   0 - 38265 -      pts/1    00:00:00 ps☁  ~  ps -aL  PID   LWP TTY          TIME CMD27491 27491 pts/0    00:00:00 test27491 27492 pts/0    00:00:00 test27543 27543 pts/1    00:00:00 ps# LWP ———— 轻量级进程</code></pre><h6 id="线程退出"><a href="#线程退出" class="headerlink" title="线程退出"></a>线程退出</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread_run</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 1: %lu, pid: %d\n"</span><span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    pthread_exit((void*)99); // 终止线程</span><span class="token comment" spellcheck="true">//    return (void*)10;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pthread_t tid<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_run<span class="token punctuation">,</span> <span class="token string">"thread 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread: %lu, pid: %d\n"</span><span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">pthread_cancel</span><span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使线程退出</span>    <span class="token keyword">void</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取线程的退出码</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread return number: %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="线程分离"><a href="#线程分离" class="headerlink" title="线程分离"></a>线程分离</h6><blockquote><ul><li>默认情况下，新创建的进程是joinable的，线程退出后，需要对其进行pthread_join操作，否则无法释放资源，从而导致系统资源泄露。</li><li>如果不关心线程的返回值，join是一种负担，这个时候可以告诉操作系统，当线程退出时，自动释放线程资源。</li></ul></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread_run</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">pthread_detach</span><span class="token punctuation">(</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread 1: %lu, pid: %d\n"</span><span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pthread_t tid<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_run<span class="token punctuation">,</span> <span class="token string">"thread 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread: %lu, pid: %d\n"</span><span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">pthread_cancel</span><span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread return number: %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  main thread: 140614304589568, pid: 9352  thread 1: 140614296327936, pid: 9352  thread return number: 0*/</span></code></pre><h6 id="多线程抢票"><a href="#多线程抢票" class="headerlink" title="多线程抢票"></a>多线程抢票</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> N 10</span><span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>pthread_mutex_t lock<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %d get ticket: %d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> tickets<span class="token punctuation">)</span><span class="token punctuation">;</span>            tickets<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    pthread_t arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> get<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="锁的本质"><a href="#锁的本质" class="headerlink" title="锁的本质"></a>锁的本质</h6><ol><li><p>对临界区进行保护，所有执行的线程都必须遵守这个规则。</p></li><li><p>lock -&gt; 访问临界区 -&gt; unlock。</p></li><li><p>所有线程必须看到同一把锁，所以说：锁本身就是临界资源！锁必须保证自身安全！申请锁的过程，不能有中间状态，lock -&gt; 原子性，unlock -&gt; 原子性。</p></li><li><p>lock -&gt; 访问临界区(花时间) -&gt; unlock，在特定线程/进程拥有锁的时候，期间有新线程/进程过来申请锁，一定申请不到！新线程该如何？阻塞，本质：将进程/线程对应的pcb投入到操作系统的进程等待队列，unlock之后进行进程/线程的唤醒操作！</p></li><li><p>如何理解锁</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> mutex<span class="token punctuation">{</span>    <span class="token keyword">int</span> lock<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0/1</span>    wait_queue <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li><li><p>对锁的相关操作</p><pre class=" language-c"><code class="language-c">pthread_mutex_init：初始化锁pthread_mutex_destroy：释放锁，锁也是资源pthread_mutex_unlock：上锁pthread_mutex_unlock：解锁</code></pre></li><li><p>一次保证只有一个线程进入临界区，访问临界资源，就叫做互斥。</p></li><li><p>加锁为什么一般效率比较低，或者影响效率？所有任务都串行了；线程切换会带来cpu的消耗，上下文切换。</p></li></ol><h6 id="互斥量本质研究"><a href="#互斥量本质研究" class="headerlink" title="互斥量本质研究"></a>互斥量本质研究</h6><blockquote><p>为了实现互斥锁，大多数体系结构都提供了swap或者exchange指令，该指令的作用是把寄存器和内存单元数据交换，由于只有一条指令，保证了原子性。</p></blockquote><pre><code>lock:    move $0, $al    xchgb $al, mutex    if(al &gt; 0)    {        return 0;    }    else    {        挂起等待;    }    goto lock;    unlock:        move $1, mutex        唤醒等待mutex线程        return 0;</code></pre><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><h6 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h6><blockquote><ul><li>当一个线程互斥的访问某个变量时，它可能发现在其它线程改变状态之前，什么也做不了。</li><li>例如一个线程访问队列时，当它发现队列为空，它只能等待，直到其它线程将数据添加到队列中。这种情况需要用到条件变量，当它发现队列为空时应当去通知生产者往队列里投放数据。</li></ul></blockquote><h6 id="同步概念与竞态条件"><a href="#同步概念与竞态条件" class="headerlink" title="同步概念与竞态条件"></a>同步概念与竞态条件</h6><blockquote><p>同步：在保证数据安全的前提下，让线程能够按照某种特定的顺序访问临界资源，从而有效避免饥饿问题，叫做同步。</p><p>竞态条件：因为时序问题而导致程序异常，称之为竞态条件。</p></blockquote><h6 id="为什么要同步？"><a href="#为什么要同步？" class="headerlink" title="为什么要同步？"></a>为什么要同步？</h6><p>互斥能够保证线程之间访问资源不出错，但是不能保证高效。同步的目的是让多线程同步高效的完成某些任务。</p><ol><li>如果条件不满足，等待，释放锁</li><li>通知机制</li></ol><h6 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h6><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 初始化条件变量</span><span class="token keyword">int</span> <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>restrict cond<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_condattr_t <span class="token operator">*</span>restrict attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 销毁条件变量</span><span class="token keyword">int</span> <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等待条件满足</span><span class="token keyword">int</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>restrict cond<span class="token punctuation">,</span> pthread_mutex_t <span class="token operator">*</span>restrict mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通知cond条件下wait的线程</span><span class="token keyword">int</span> <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="牛刀小试-1"><a href="#牛刀小试-1" class="headerlink" title="牛刀小试"></a>牛刀小试</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>pthread_cond_t cond<span class="token punctuation">;</span>pthread_mutex_t lock<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread_run1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 程序执行到这里，使当前线程加入cond结构下的某个成员里，猜测是个数组或者链表</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, activing....\n"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread_run2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 唤醒cond条件下等待的线程。（个人理解：从cond结构的某个成员里取出一个线程进行唤醒）</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, signal to thread1 done....\n"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pthread_t t1<span class="token punctuation">,</span>t2<span class="token punctuation">;</span>    <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_run1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"thread 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_run2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"thread 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="基于阻塞队列的生产消费模型"><a href="#基于阻塞队列的生产消费模型" class="headerlink" title="基于阻塞队列的生产消费模型"></a>基于阻塞队列的生产消费模型</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __BLOCK_QUEUE_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __BLOCK_QUEUE_H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span>template<span class="token operator">&lt;</span>class T<span class="token operator">></span>class BlockQueue<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">BlockQueue</span><span class="token punctuation">(</span>size_t cap <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token function">_cap</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_cond<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p_cond<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">BlockQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Put</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LockQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">Full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">WakeUpCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ProWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unLockQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Get</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LockQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">WakeUpPro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先唤醒生产者</span>            <span class="token function">ConWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 再休眠消费者</span>        <span class="token punctuation">}</span>        data <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unLockQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    <span class="token keyword">void</span> <span class="token function">ProWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 1、为什么要等？条件不满足         * 2、怎么知道条件是否满足？要判断是否满足条件就必须进入临界区，需要持有锁进入         * 3、如果条件不满足就需要阻塞等待，但是不能持有锁去等待！！！(锁被你拿着，其它线程无法获取锁就无法进入临界区，条件就无法发生改变，因此进入死锁状态)，因此wait时必须释放锁。         * 4、因此这个函数需要传入一个lock         *         * 1、在调用该函数时会自动释放锁。         * 2、当该函数返回时，返回到了临界区内，所以该函数会让该线程重新持有该锁。         */</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">ConWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">WakeUpPro</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"signal productor"</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">WakeUpCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"signal consumer"</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool <span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool <span class="token function">Full</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> _cap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">LockQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">unLockQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    pthread_mutex_t lock<span class="token punctuation">;</span>    pthread_cond_t c_cond<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 消费者在该条件下等</span>    pthread_cond_t p_cond<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生产者在该条件下等</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>queue<span class="token operator">&lt;</span>T<span class="token operator">></span> q<span class="token punctuation">;</span>    size_t _cap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"BlockQueue.hpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Pro_run</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    BlockQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>BlockQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">110</span><span class="token punctuation">;</span>        q<span class="token operator">-></span><span class="token function">Put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Pro put: "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Con_run</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    BlockQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>BlockQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        q<span class="token operator">-></span><span class="token function">Get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Con get: "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pthread_t con<span class="token punctuation">,</span>pro<span class="token punctuation">;</span>    BlockQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span>bq <span class="token operator">=</span> new BlockQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pro<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> Pro_run<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>bq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>con<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> Con_run<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>bq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pro<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    delete bq<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h5><h6 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h6><p>信号量本质是一个计数器，描述临界资源有效个数的计数器。（保证每次访问的临界资源不是同一个）</p><p>允许多个线程操作临界区内的多个资源。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>count<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// p() 原子性</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// v() 原子性</span><span class="token comment" spellcheck="true">// 临界资源可以看成是多份的，不冲突的，提高效率</span></code></pre><h6 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h6><p>临界资源可以看成多份且不冲突的，信号量本质就是多份资源的计数器。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sem<span class="token punctuation">{</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    mutex lock<span class="token punctuation">;</span>    wait_queue <span class="token operator">*</span>head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="相关函数-1"><a href="#相关函数-1" class="headerlink" title="相关函数"></a>相关函数</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span><span class="token comment" spellcheck="true">// 初始化信号量</span><span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> pshared<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pshared：0表示线程间共享，1表示进程间共享。value：信号量初始值</span><span class="token comment" spellcheck="true">// 销毁信号量</span><span class="token keyword">int</span> <span class="token function">sem_destroy</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等待信号量，会将信号量的值减1，P()</span><span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发布信号量，表示资源使用完毕，可以归还了。将信号量值加1，V()</span><span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span></code></pre><h6 id="基于环形队列的生产消费者模型"><a href="#基于环形队列的生产消费者模型" class="headerlink" title="基于环形队列的生产消费者模型"></a>基于环形队列的生产消费者模型</h6><p><img src="https://img.3amupupup.online/circle_queue_by_semaphore.png" alt="环形队列"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span>template<span class="token operator">&lt;</span>class T<span class="token operator">></span>class RingQueue<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">RingQueue</span><span class="token punctuation">(</span>size_t cap <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">_v</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p_index <span class="token operator">=</span> c_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        _max_cap <span class="token operator">=</span> cap<span class="token punctuation">;</span>        <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_blank<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _max_cap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">RingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_blank<span class="token punctuation">)</span><span class="token punctuation">;</span>        p_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        c_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Get</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>out<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">P</span><span class="token punctuation">(</span>sem_data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取数据时，要将数据对应的信号量减1</span>        out <span class="token operator">=</span> _v<span class="token punctuation">[</span>c_index<span class="token punctuation">]</span><span class="token punctuation">;</span>        c_index<span class="token operator">++</span><span class="token punctuation">;</span>        c_index <span class="token operator">%</span><span class="token operator">=</span> _max_cap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据减1时对应的装数据的格子增1</span>        <span class="token function">V</span><span class="token punctuation">(</span>sem_blank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Put</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>in<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">P</span><span class="token punctuation">(</span>sem_blank<span class="token punctuation">)</span><span class="token punctuation">;</span>        _v<span class="token punctuation">[</span>p_index<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">;</span>        p_index<span class="token operator">++</span><span class="token punctuation">;</span>        p_index <span class="token operator">%</span><span class="token operator">=</span> _max_cap<span class="token punctuation">;</span>        <span class="token function">V</span><span class="token punctuation">(</span>sem_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    <span class="token keyword">void</span> <span class="token function">P</span><span class="token punctuation">(</span>sem_t <span class="token operator">&amp;</span>s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">V</span><span class="token punctuation">(</span>sem_t <span class="token operator">&amp;</span>s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> _v<span class="token punctuation">;</span>    size_t _max_cap<span class="token punctuation">;</span>    sem_t sem_data<span class="token punctuation">;</span>    sem_t sem_blank<span class="token punctuation">;</span>    size_t p_index<span class="token punctuation">;</span>    size_t c_index<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"RingQueue.hpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Productor</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    RingQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>RingQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        q<span class="token operator">-></span><span class="token function">Put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Productor Put data: "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    RingQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>RingQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> data<span class="token punctuation">;</span>        q<span class="token operator">-></span><span class="token function">Get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Consumer Get data: "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    RingQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">*</span>rq <span class="token operator">=</span> new RingQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span>    pthread_t pro<span class="token punctuation">,</span> con<span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pro<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> Productor<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>rq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>con<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> Consumer<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>rq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pro<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <queue>#include <pthread.h>#include <cmath>#include <unistd.h>class Task{public:    int base;public:    Task() = default;    Task(int num): base(num){}    void Run()    {        std::cout << "thread id[" << pthread_self() <<"]" << "thread run done...... : base# " << base << " pow is # " << pow(base, 2)  << std::endl;        usleep(100);    }};class ThreadPool{private:    pthread_mutex_t lock;    pthread_cond_t cond; // 只能让消费者等，如果作为服务器时，生产者等待那么就无法接收外部请求了    std::queue<Task> q;    size_t max_num;public:    void LockQueue()    {        pthread_mutex_lock(&lock);    }    void UnLockQueue()    {        pthread_mutex_unlock(&lock);    }    void ThreadWait()    {        pthread_cond_wait(&cond, &lock);    }    void WakeUpThread()    {        pthread_cond_signal(&cond);    }    bool IsEmpty()    {        return q.size() == 0;    }    // threadpool    void Get(Task &out)    {        out = q.front();        q.pop();    }    // server    void Put(Task &in)    {        LockQueue();        q.push(in);        UnLockQueue();        WakeUpThread(); // 生产者塞任务进入队列之后，需要通知消费者。    }public:    ThreadPool(int num = 5): max_num(num)    {}    static void* Routine(void *arg)    {        ThreadPool *this_p = (ThreadPool*)arg;        while(true) // 这里是死循环，保证线程不会退出，一直从队列中取任务，队列空时又进入cond的休眠队列，等待被唤醒        {            this_p->LockQueue();            while(this_p->IsEmpty())            {                this_p->ThreadWait();            }            Task t;            this_p->Get(t);            this_p->UnLockQueue();            t.Run();        }    }    void ThreadPoolInit()    {        pthread_cond_init(&cond, nullptr);        pthread_mutex_init(&lock, nullptr);        pthread_t t;        for(size_t i = 0; i < max_num; i++)        {            pthread_create(&t, nullptr, Routine, this);      /*          在初始化阶段，初始化线程，线程开始运行之后发现task队列为空，则会在cond条件变量下进行休眠。          关于条件变量cond：这个结构中可能维护着一个队列，一旦线程调用pthread_cond_wait，那么这个线程就会          加入cond结构下的休眠队列，当生产者执行pthread_cond_signal时，休眠线程从休眠队列中取出重新加入cpu的运行队列。      */        }    }    ~ThreadPool()    {        pthread_cond_destroy(&cond);        pthread_mutex_destroy(&lock);    }};</code></pre><p>线程池存在的价值：</p><ul><li>有任务，立马有线程进行服务，省掉了线程创建的时间。</li><li>有效防止，server中线程过多，导致系统过载问题。</li></ul><p>线程池 VS 进程池：</p><ul><li>线程池占用资源更少，但是健壮性不强。</li><li>进程池占用资源更多，但是健壮性强。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;什么是线程？&quot;&gt;&lt;a href=&quot;#什么是线程？&quot; class=&quot;headerlink&quot; title=&quot;什么是线程？&quot;&gt;&lt;/a&gt;什么是线程？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;在一个程序里的一个执行路线就叫做线程。更准确的定义是：线程是“一个进程的内部序列”。&lt;/li&gt;
</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="线程" scheme="https://duwei19961021.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CppPrimer</title>
    <link href="https://duwei19961021.github.io/2021/04/13/CppPrimer/"/>
    <id>https://duwei19961021.github.io/2021/04/13/CppPrimer/</id>
    <published>2021-04-13T03:26:55.000Z</published>
    <updated>2021-04-17T15:47:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="1-5-类简介"><a href="#1-5-类简介" class="headerlink" title="1.5 类简介"></a>1.5 类简介</h4><h5 id="1-5-1-Sales-item类"><a href="#1-5-1-Sales-item类" class="headerlink" title="1.5.1 Sales_item类"></a>1.5.1 Sales_item类</h5><p>c++中通过定义类来定义数据结构。一个类定义了一个类型，以及与其相关联的操作。</p><h5 id="1-5-2-成员函数"><a href="#1-5-2-成员函数" class="headerlink" title="1.5.2 成员函数"></a>1.5.2 成员函数</h5><p>成员函数时定义为类一部分的函数，有时也被称为方法。</p><h3 id="第三章-字符串、向量和数组"><a href="#第三章-字符串、向量和数组" class="headerlink" title="第三章 字符串、向量和数组"></a>第三章 字符串、向量和数组</h3><h4 id="3-2-标准库类型-string"><a href="#3-2-标准库类型-string" class="headerlink" title="3.2 标准库类型 string"></a>3.2 标准库类型 string</h4><h5 id="3-2-1-定义和初始化-string-对象"><a href="#3-2-1-定义和初始化-string-对象" class="headerlink" title="3.2.1 定义和初始化 string 对象"></a>3.2.1 定义和初始化 string 对象</h5><pre class=" language-c"><code class="language-c">string s1<span class="token punctuation">;</span>string s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>string s3 <span class="token operator">=</span> <span class="token string">"heya"</span><span class="token punctuation">;</span>string <span class="token function">s4</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="直接初始化和拷贝初始化"><a href="#直接初始化和拷贝初始化" class="headerlink" title="直接初始化和拷贝初始化"></a>直接初始化和拷贝初始化</h6><p>如果使用等号初始化一个变量，实际上执行的是拷贝初始化，编译器把等号右侧的初始值拷贝到新创建的对象中去。</p><p>与之相反，如果不使用等号，则执行的是直接初始化。</p><h3 id="第四章-表达式"><a href="#第四章-表达式" class="headerlink" title="第四章 表达式"></a>第四章 表达式</h3><h4 id="4-11-类型转换"><a href="#4-11-类型转换" class="headerlink" title="4.11 类型转换"></a>4.11 类型转换</h4><h6 id="何时发生类型转换"><a href="#何时发生类型转换" class="headerlink" title="何时发生类型转换"></a>何时发生类型转换</h6><ol><li>在大多表达式中，比int类型小的整形值会提升为较大的整数类型。</li><li>在条件中，非布尔值转换成布尔类型。</li><li>初始化过程中，初始值转换成变量类型；在赋值语句中，右侧运算对象转换成左侧运算对象的类型。</li><li>如果算数运算或关系运算的运算对象有多种类型，需要转换成同一种类型。</li><li>函数调用时会发生类型转换。</li></ol><h5 id="4-11-1-算术转换"><a href="#4-11-1-算术转换" class="headerlink" title="4.11.1 算术转换"></a>4.11.1 算术转换</h5><h6 id="算术转换"><a href="#算术转换" class="headerlink" title="算术转换"></a>算术转换</h6><p>算术转换的含义是把一种算术类型转换成另一种算术类型。</p><p>算术转换的规则定义了一套类型转换的层次，其中运算符的运算对象将转换成最宽的类型。例如：</p><p>如果一个运算对象是long double，那么不论另外一个运算对象的类型是什么都会转换成long double</p><h6 id="整形提升"><a href="#整形提升" class="headerlink" title="整形提升"></a>整形提升</h6><p>负责把小整数类型转换成较大的整数类型。(前提是转换后的类型要能容纳原类型所有可能的值)</p><h5 id="4-11-3-显示类型转换"><a href="#4-11-3-显示类型转换" class="headerlink" title="4.11.3 显示类型转换"></a>4.11.3 显示类型转换</h5><h6 id="命名的强制类型转换"><a href="#命名的强制类型转换" class="headerlink" title="命名的强制类型转换"></a>命名的强制类型转换</h6><p>cast-name&lt;type&gt; (expression)，type是转换的目标类型，expression是要转换的值。如果type是引用类型，则结果是左值。cast-name是static_cast、</p><p>dynamic_cast、const_cast和reinterpret_cast中的一种。dynamic_cast支持运行时类型识别。</p><h6 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h6><p>任何具有明确定义的类型转换，只要不包含底层const，都可以使用static_cast。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ret <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// output: 3.33333</span></code></pre><p>当需要把一个较大的算数类型赋值给较小的类型时，static_cast非常有用。此时强制类型转换的意思是告诉编译器和读者：我们知道且不在乎潜在的精度损失。</p><p>static_cast对于编译器无法自动执行的类型转换也非常有用。例如，可以使用static_cast找回存在于void*指针中的值。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 任何非常量对象的地址都能存入void*</span>    <span class="token keyword">double</span> <span class="token operator">*</span>dp <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将void*转换回初始的指针类型</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h6><blockquote><p>顶层const表示指针本身是个常量，底层const表示指针指向的对象是一个常量。</p></blockquote><p>const_cast 只能改变运算对象的底层const：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>cp  <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果不使用const_cast去掉const性质，那么*cp是无法修改的。</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*cp = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>cp <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"*p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pc<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将常量对象转换成非常量对象的行为一般称为–去掉const性质。一旦抹去对象的const性质，编译器不再阻止对该对象进行写操作。如果一个对象本身不是一个常量，使用强制类型转换获得写权限是合法行为。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能转换掉const性质，const_cast只能改变运算对象的底层const</span>static_cast<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>const_cast<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误，const_cast只能改变常量属性</span></code></pre><h6 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h6><p>reinterpret_cast 通常为运算对象的位模式提供较低层次上的重新解释。</p><h3 id="第六章-函数"><a href="#第六章-函数" class="headerlink" title="第六章 函数"></a>第六章 函数</h3><h4 id="6-1-函数基础"><a href="#6-1-函数基础" class="headerlink" title="6.1 函数基础"></a>6.1 函数基础</h4><p>实参是形参的初始值。实参的类型必须与对应的形参存在对应关系。</p><h5 id="6-1-1-局部对象"><a href="#6-1-1-局部对象" class="headerlink" title="6.1.1 局部对象"></a>6.1.1 局部对象</h5><p>名字有作用域，对象有生命周期。</p><ul><li>名字的作用域是程序文本的一部分，名字在其中可见。</li><li>对象的声明周期是程序执行过程中该对象存在的一段时间。</li></ul><p>函数体是一个语句块。块构成一个新的作用域，可以在其中定义变量。形参和函数体内部定义的变量统称为局部变量。它们对函数而言是“局部”的，仅在函数的作用域内可见，同时局部变量会隐藏在外层作用域中同名的其它所有声明。</p><h6 id="自动对象"><a href="#自动对象" class="headerlink" title="自动对象"></a>自动对象</h6><p>只存在于块执行期间的对象称为自动对象。(函数的控制路径经过变量定义语句时创建该对象，当到达定义所在的块末尾时销毁它)。形参是自动对象。</p><h6 id="局部静态对象"><a href="#局部静态对象" class="headerlink" title="局部静态对象"></a>局部静态对象</h6><p>在程序执行路径第一次经过对象定义语句时初始化，直到程序终止才被销毁。</p><h4 id="6-2-参数传递"><a href="#6-2-参数传递" class="headerlink" title="6.2 参数传递"></a>6.2 参数传递</h4><h5 id="6-2-6-含有可变形参的函数"><a href="#6-2-6-含有可变形参的函数" class="headerlink" title="6.2.6 含有可变形参的函数"></a>6.2.6 含有可变形参的函数</h5><p>为了编写能处理不同数量实参的函数，c++11新标准提供了两种主要方法：</p><ol><li><p>如果所有实参类型相同，可以传递一个名为initializer_list的标准库类型。initializer_list对象中的元素永远是常量值，无法改变其中的元素的值。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> il<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>iterator it <span class="token operator">=</span> il<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> il<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> il <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span>il<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li>如果实参的类型不同，可以编写一种特殊的函数，也就是可变参数模板。</li></ol><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="6-4-函数重载"><a href="#6-4-函数重载" class="headerlink" title="6.4 函数重载"></a>6.4 函数重载</h4><h6 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h6><p>如果同一作用域内的几个函数名字相同但形参列表不同，称之为函数重载。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>beg<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于重载函数来说，它们应该在形参数量或形参类型上有所不同。</p><p>不允许两个函数除了返回类型外其它所有的要素都相同，也就是说返回值类型不能作为函数重载的要素。</p><h6 id="重载和const形参"><a href="#重载和const形参" class="headerlink" title="重载和const形参"></a>重载和const形参</h6><p>一个拥有顶层const的形参无法和另一个没有顶层const的形参区分开来。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span>using namespace std<span class="token punctuation">;</span>class C1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*// 重复定义,顶层const无法区分void Print(C1* c1){    cout &lt;&lt; "c1" &lt;&lt; endl;}void Print(C1* const c2) // 表示形参指针变量c2是个常量，顶层const{    cout &lt;&lt; "c2" &lt;&lt; endl;}*/</span><span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span>C1<span class="token operator">&amp;</span> c1<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ref c1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token keyword">const</span> C1<span class="token operator">&amp;</span> c2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// const修饰c2这个引用指向的对象是个常量，因此是底层const</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c2"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span>C1<span class="token operator">*</span> c3<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c3"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token keyword">const</span> C1<span class="token operator">*</span> c4<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// const修饰的是C1对象</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c4"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*void echo(C1* const c5) // 此时const修饰的是c5这个指针变量本身而非其指向的对象，是顶层const{    ;}*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="const-cast和重载"><a href="#const-cast和重载" class="headerlink" title="const_cast和重载"></a>const_cast和重载</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> string <span class="token operator">&amp;</span><span class="token function">shorterString</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s1 <span class="token punctuation">:</span> s2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这种情况下，返回值也必须是const 引用类型</span><span class="token comment" spellcheck="true">/*     当需要得到一个普通的引用时，借助const_cast。(这里的两个shorterString函数是有发生重载的)    先将它的实参强制类型转换成对应的const的引用，然后调用shorterString函数的const版本。    const版本返回对const string的引用，再将这个引用转换成一个普通的string&amp;，然后返回。*/</span>string <span class="token operator">&amp;</span><span class="token function">shorterString</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> string <span class="token operator">&amp;</span>r <span class="token operator">=</span> <span class="token function">shorterString</span><span class="token punctuation">(</span>const_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  const_cast<span class="token operator">&lt;</span>string<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-5-特殊用途语言特性"><a href="#6-5-特殊用途语言特性" class="headerlink" title="6.5 特殊用途语言特性"></a>6.5 特殊用途语言特性</h4><h5 id="6-5-1-默认实参"><a href="#6-5-1-默认实参" class="headerlink" title="6.5.1 默认实参"></a>6.5.1 默认实参</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="6-5-2-内联函数和constexpr函数"><a href="#6-5-2-内联函数和constexpr函数" class="headerlink" title="6.5.2 内联函数和constexpr函数"></a>6.5.2 内联函数和constexpr函数</h5><p>把一些规模较小的操作定义成函数有很多好处，包括：</p><ul><li>容易阅读和理解</li><li>函数可以确保行为的统一</li><li>容易修改</li><li>复用</li></ul><p>但是也存在一个潜在的缺点，一次函数调用包含这一系列工作：</p><ol><li>调用前要先保存寄存器，并在返回时恢复；</li><li>可能需要拷贝实参；</li><li>程序转向一个新的位置继续执行。</li></ol><h6 id="内联函数可避免函数调用的开销"><a href="#内联函数可避免函数调用的开销" class="headerlink" title="内联函数可避免函数调用的开销"></a>内联函数可避免函数调用的开销</h6><p>将函数指定为内联函数，通常就是将它在每个调用点上“内联地”展开。例如 6.4 中的shorterString函数：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 调用</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">shorterString</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将在编译过程中展开成类似于下面的形式</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s1 <span class="token punctuation">:</span> s2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在函数前加上inline关键字将其声明成内联函数，实际上不一定需要加inline，编译器会帮我们去优化的。</span></code></pre><h6 id="constexpr函数"><a href="#constexpr函数" class="headerlink" title="constexpr函数"></a>constexpr函数</h6><p>constexpr函数(constexpr function)是指 能用于常量表达式的函数。定义constexpr函数的方法与其它函数类似，需要遵循以下约定：</p><ol><li><p>函数的返回类型及所有形参的类型都得是字面值类型</p></li><li><p>函数体中必须有且只有一条return语句</p><pre class=" language-c"><code class="language-c">constexpr <span class="token keyword">int</span> <span class="token function">new_sz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>constexpr <span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token function">new_sz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    执行该初始化任务时，编译器把对constexpr函数的调用替换成其结果值。    为了能在编译过程中随时展开，constexpr函数被隐式地指定为内联函数。*/</span><span class="token comment" spellcheck="true">/*    constexpr函数体内也可以包含其它语句，只要这些语句不执行任何操作就行。例如，constexpr函数中可以有空语句、    类型别名以及using声明。*/</span>constexpr size_t <span class="token function">scale</span><span class="token punctuation">(</span>size_t cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">new_sz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> cnt<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确，scale的实参是常量表达式，所以它的返回值也是常量表达式。</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span>；<span class="token keyword">int</span> a2<span class="token punctuation">[</span><span class="token function">scale</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误，数组的大小不能是变量，必须是常量。因为scale的实参是变量，所以它的返回值也是一个变量</span></code></pre></li></ol><h4 id="6-6-函数匹配"><a href="#6-6-函数匹配" class="headerlink" title="6.6 函数匹配"></a>6.6 函数匹配</h4><h6 id="确定候选函数和可行函数"><a href="#确定候选函数和可行函数" class="headerlink" title="确定候选函数和可行函数"></a>确定候选函数和可行函数</h6><p>第一步是确定本次调用对应的重载函数集，集合中的函数称为候选函数。候选函数具备两个特征：① 与被调用的函数同名，② 其生命在调用点可见</p><p>第二步考察本次调用提供的实参，然后从候选函数中选出能被这组实参调用的函数，这些新选出的函数称为可行函数。可行函数具备两个特征：① 其形参数量与本次调用提供的实参数量相等，② 每个实参的类型与对应的形参类型相同或者能转换成形参的类型。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">5.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*     调用 void f(double, double);     可行函数：        f(int) // double能转换成int        f(double, double) // 第二个形参提供了默认值    如果没有找到可行函数，编译器将报告无匹配函数的错误。*/</span></code></pre><h6 id="寻找最佳匹配-如果有的话"><a href="#寻找最佳匹配-如果有的话" class="headerlink" title="寻找最佳匹配(如果有的话)"></a>寻找最佳匹配(如果有的话)</h6><p>第三步是从可行函数中选择与本次调用最匹配的函数。在这一过程中，逐一检查函数调用提供的实参，寻找形参类型与实参类型最匹配的那个可行函数。实参类型与形参类型越接近，匹配的越好。精确匹配比需要类型转换的匹配更好。所以最终调用的是 f(double, double = 3.14)。</p><h6 id="含有多个形参的函数匹配"><a href="#含有多个形参的函数匹配" class="headerlink" title="含有多个形参的函数匹配"></a>含有多个形参的函数匹配</h6><p>例如调用：f(42, 2.56);</p><p>先确定可行函数：f(int, int)，f(double, double)。</p><p>接下来一次检查每个实参以确定哪个函数是最佳匹配。如果有且只有一个函数满足下列条件，则匹配成功：</p><ul><li>该函数每个实参的匹配都不劣于其它可行函数需要的匹配。</li><li>至少有一个实参的匹配优于其它可行函数提供的匹配。</li></ul><p>在上面的调用中，如果只考虑第一个实参，那么f(int, int) 能精确匹配；要想匹配第二个函数，int类型的实参必须转换成double类型，但是需要内置类型转换的匹配劣于精确匹配，因此就第一个实参来说，f(int, int) 比 f(double, double)更好。</p><p>接着考虑第二个实参2.56，同理，f(double, double)更好。</p><p>编译器最终会因为这个调用具有二义性而拒绝其请求：因为每一个可行函数各自在一个实参上实现了更好的匹配，从整体上无法判断孰优孰劣。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(int)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(int, int)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(double, double = 3.14)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(int, int, int)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(double, double, double)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">5.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="6-6-1"><a href="#6-6-1" class="headerlink" title="6.6.1"></a>6.6.1</h5><p>为了确定最佳匹配，编译器将实参类型到形参类型的转换划分成几个等级：</p><ol><li>精确匹配<ul><li>实参类型和形参类型相同</li><li>实参从数组类型或函数类型转换成对应的指针类型</li><li>向实参添加顶层const或者从实参中删除顶层const</li></ul></li><li>通过const转换实现的函数匹配</li><li>通过类型提升实现的匹配</li><li>通过算术类型转换或指针转换实现的匹配</li><li>通过类类型转换实现的匹配</li></ol><h6 id="需要类型提升和算术类型转换的匹配"><a href="#需要类型提升和算术类型转换的匹配" class="headerlink" title="需要类型提升和算术类型转换的匹配"></a>需要类型提升和算术类型转换的匹配</h6><p>小整形一般都会提升到int类型或者更大的整形类型。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ff</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// char提升成int，调用f(int)</span></code></pre><p>所有算术类型转换的级别都一样。例如，从int想unsigned int的转换并不比int向double的转换级别高。例如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">manip</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">manip</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">manip</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误：二义性调用</span></code></pre><h6 id="函数匹配和const实参"><a href="#函数匹配和const实参" class="headerlink" title="函数匹配和const实参"></a>函数匹配和const实参</h6><h4 id="6-7-函数指针"><a href="#6-7-函数指针" class="headerlink" title="6.7 函数指针"></a>6.7 函数指针</h4><p>函数指针指向的是函数而非对象。函数的类型由它的返回类型和形参类型共同决定，与函数名无关。</p><pre class=" language-c"><code class="language-c">bool <span class="token function">lengthCompare</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bool</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第七章-类"><a href="#第七章-类" class="headerlink" title="第七章 类"></a>第七章 类</h3><p>类的基本思想是数据抽象和封装(实现了类的接口和实现的分离，隐藏实现细节)。数据抽象是一种依赖于接口和实现的分离编程技术。</p><h4 id="7-1-定义抽象数据类型"><a href="#7-1-定义抽象数据类型" class="headerlink" title="7.1 定义抽象数据类型"></a>7.1 定义抽象数据类型</h4><h5 id="7-1-4-构造函数"><a href="#7-1-4-构造函数" class="headerlink" title="7.1.4 构造函数"></a>7.1.4 构造函数</h5><p>每个类都定义了它的对象被初始化的方式，类通过一个或几个特殊的成员函数控制其对象的初始化过程，这些函数叫构造函数。构造函数的任务是初始化类对象的数据成员，无论何时只要类被初始化，就会调用构造函数。</p><p>构造函数的名字与类名相同，无返回值。</p><p>构造函数不能声明成const，当创建一个类的const对象时，直到构造函数完成初始化完成，对象才能真正取得其“常量”属性。因此，构造函数在const对象的构造过程中可以向其写值。</p><p>如果类没有显示的定义构造函数，那么编译器就会为我们隐式的定义一个默认构造函数。</p><h6 id="某些类不能依赖于合成的默认构造函数"><a href="#某些类不能依赖于合成的默认构造函数" class="headerlink" title="某些类不能依赖于合成的默认构造函数"></a>某些类不能依赖于合成的默认构造函数</h6><ol><li><p>只有当类没有声明任何构造函数时，编译器才会自动地生成默认构造函数。</p><p>编译器只有在发现类不包含任何构造函数的情况下才会自动生成一个构造函数。一旦我们自己定义了其它的构造函数，那么除非我们再定义一个默认的构造函数，否则类将没有默认的构造函数。（依据：如果一个类在某种情况下需要控制对象初始化，那么该类很可能在所有情况下都需要控制。）</p></li><li><p>含有内置内省或者复合类型成员的类应该在类的内部初始化这些成员，或者定义一个自己的默认构造函数。否则，在用户创建类的对象时就可能得到未定义的值。</p></li><li><p>有些时候编译器不能为类合成默认的构造函数。</p><p>例如，如果一个类中包含一个其它类类型成员且这个成员没有默认的构造函数，那么编译器将无法初始化该成员。对于这样的类必须自定义默认构造函数，否则该类将没有默认的构造函数。</p></li></ol><h6 id="default"><a href="#default" class="headerlink" title="=default"></a>=default</h6><p>当定义其它形式的构造函数时，也需要默认的构造函数，c++11中可以使用=default来要求编译器生成默认构造函数</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span>class Person<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    <span class="token keyword">int</span> _age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Person p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="7-2-访问控制与封装"><a href="#7-2-访问控制与封装" class="headerlink" title="7.2 访问控制与封装"></a>7.2 访问控制与封装</h4><p>定义在public说明符之后的成员在整个程序内可以被访问，public成员定义类的接口。</p><p>定义在private说明符之后的成员可以被类的成员函数访问。</p><h6 id="使用struct-或-class关键字"><a href="#使用struct-或-class关键字" class="headerlink" title="使用struct 或 class关键字"></a>使用struct 或 class关键字</h6><p>class中，默认的权限是私有的。struct中，默认的权限是public。</p><h5 id="7-2-1-友元"><a href="#7-2-1-友元" class="headerlink" title="7.2.1 友元"></a>7.2.1 友元</h5><p>类可以允许其它类或者函数访问它的非公有成员，方法是令其它类或者函数成为它的友元。</p><h3 id="第十章-泛型算法"><a href="#第十章-泛型算法" class="headerlink" title="第十章 泛型算法"></a>第十章 泛型算法</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h3&gt;&lt;h4 id=&quot;1-5-类简介&quot;&gt;&lt;a href=&quot;#1-5-类简介&quot; class=&quot;headerlink&quot; title=&quot;1.5 类简介</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="book" scheme="https://duwei19961021.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>信号</title>
    <link href="https://duwei19961021.github.io/2021/04/12/signal/"/>
    <id>https://duwei19961021.github.io/2021/04/12/signal/</id>
    <published>2021-04-12T11:57:55.000Z</published>
    <updated>2021-05-04T09:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.3amupupup.online/pending-block-handler.png" alt="signal"></p><blockquote><ul><li>每个信号都有两个标志位表示阻塞(block)和未决(pending)，还有一个函数指针表示处理动作。信号产生时，内核在该进程控制块中设置该信号的未决标志，在上图例子中SIGHUP信号未阻塞也未产生过，当它递达时执行默认处理动作。</li><li>SIGINT信号产生过，但正在被阻塞，所以暂时不能递达。虽然它的处理动作是忽略，但在没有解除阻塞之前不能忽略这个信号，因为进程有机会改变处理动作之后在接触阻塞。</li><li>SIGQUIT信号未产生过，一旦产生SIGQUIT信号将被阻塞，它的处理动作是用户自定义函数 sighandler。如果在进程接触某信号的阻塞之前这种信号产生过多次，将如何处理？linux处理方式：常规信号在递达之前多次只计一次。而实时信号在递达之前产生多次可以依次放在一个队列里。</li></ul></blockquote><h5 id="信号保存：pending位图"><a href="#信号保存：pending位图" class="headerlink" title="信号保存：pending位图"></a>信号保存：pending位图</h5><p>01000000 00000000 00000000 00000000：信号2</p><p>比特位的位置：代表是哪个信号</p><p>比特为的内容：代表是否收到这个信号。(0无，1有)</p><h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> task_struct<span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sigbitmap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>操作系统如何发送信号？ 找到进程的pcb，将sigbitmap第八个位置的比特位修改为1。(操作系统给进程“发送”信号，操作系统给进程写信号)</p><h6 id="信号相关概念"><a href="#信号相关概念" class="headerlink" title="信号相关概念"></a>信号相关概念</h6><ol><li>实际执行信号的处理动作称为信号递达(Delivery)。</li><li>信号从产生到递达之间的状态，称为信号未决(Pending)。</li><li>进程可以选择阻塞(Block)某个信号。</li><li>被阻塞的信号将保持在未决状态，直到进程解除对此信号的阻塞，才执行递达动作。</li><li>忽略和阻塞是不同的，只要信号被阻塞就不会递达，而忽略是在递达之后可选的一种处理动作。</li></ol><h5 id="block位图"><a href="#block位图" class="headerlink" title="block位图"></a>block位图</h5><p>记录信号被屏蔽/阻塞信息：</p><p>01000000 00000000 00000000 00000000</p><p>比特位的位置，代表是哪个信号？(是谁)</p><p>比特为的内容，代表是否被屏蔽。</p><h5 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h5><p>是一个函数指针数组，信号编号是数组的下标。</p><pre class=" language-c"><code class="language-c">sighandler_t <span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> sighandler_t handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因此可以得知signal函数的作用：修改收到一个信号时的处理动作。(修改递达行为)</p><h5 id="信号集操作函数"><a href="#信号集操作函数" class="headerlink" title="信号集操作函数"></a>信号集操作函数</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sigemptyset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化set所指向的信号集，使信号对应的所有比特位为0。</span><span class="token keyword">int</span> <span class="token function">sigfillset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化set所指向的信号集，使信号对应的所有比特位都为1。</span><span class="token keyword">int</span> <span class="token function">sigaddset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置set对应的信号集，将signum信号对应比特位置为1。</span><span class="token keyword">int</span> <span class="token function">sigdelset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置set对应的信号集，将signum信号对应的比特位置为0。</span><span class="token keyword">int</span> <span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token keyword">const</span> sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断信号signum是否存在于信号集set中，也就是判断对应的比特位是否为1。</span><span class="token keyword">int</span> <span class="token function">sigprocmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> how<span class="token punctuation">,</span> <span class="token keyword">const</span> sigset_t <span class="token operator">*</span>restrict set<span class="token punctuation">,</span> igset_t <span class="token operator">*</span>restrict oset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    读取或修改进程的信号屏蔽字(阻塞信号集)，成功返回0，出错返回-1。    如果oset时非空指针，则读取进程的当前信号屏蔽字通过oset参数传出。    如果set时非空指针，则根据how参数修改进程的信号屏蔽字。    如果set和oset都不为空，则先将未修改前的信号屏蔽字保存到oset中，再根据how参数修改信号屏蔽字。    how:         ① SIG_BLOCK，set包含了希望添加到当前信号屏蔽字的信号。mask|set        ② SIG_UNBLOCK，set包含了希望从当前信号屏蔽字中解除阻塞的信号。mask&amp;~set，例：set: 10001 => ~set: 01110 => mask&amp;~set: 比特位同时为1才会保存下来        ③ SIG_SETMASK，设置当前信号屏蔽字为set指向的的值。mast=set*/</span></code></pre><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">show_pending</span><span class="token punctuation">(</span>sigset_t pending<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pending<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1~31信号，挨个判断是否在pending信号集中并打印显示</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"get a signal: %d\n"</span><span class="token punctuation">,</span>signum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sigset_t pending<span class="token punctuation">;</span>    sigset_t block<span class="token punctuation">,</span> oblock<span class="token punctuation">;</span>    <span class="token function">sigisemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先对block进行初始化，设置全0，这里修改的只是参数block，而不是修改的当前进程的信号屏蔽字</span>    <span class="token function">sigisemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pending<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同上，初始化pending，设置全0</span>    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>block<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将2号信号添加进block</span>    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>block<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oblock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改当前进程的信号屏蔽字，等于block。也就是使当前进程屏蔽2号信号</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pending<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sigpending</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pending<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取当前进程的pending信号集</span>        <span class="token function">show_pending</span><span class="token punctuation">(</span>pending<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recover sig mask.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oblock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// output</span><span class="token comment" spellcheck="true">/*  0000000000000000000000000000000  0000000000000000000000000000000  ^C0100000000000000000000000000000 // 键盘键入 ctrl+c，收到2号信号指挥pending上的第二个比特位被设置为1，代表收到了2号信号，但是由于我们屏蔽了2号信号，所以进程不会结束而是继续打印  0100000000000000000000000000000  0100000000000000000000000000000  0100000000000000000000000000000  0100000000000000000000000000000  0100000000000000000000000000000  0100000000000000000000000000000  0100000000000000000000000000000  0100000000000000000000000000000  recover sig mask.  get a signal: 2  0000000000000000000000000000000  0000000000000000000000000000000  0000000000000000000000000000000  0000000000000000000000000000000  0000000000000000000000000000000  0000000000000000000000000000000  ^Cget a signal: 2  0000000000000000000000000000000  ^\[1]    8302 quit       ./test // 键盘键入 ctrl + \ 退出*/</span></code></pre><h5 id="信号捕捉"><a href="#信号捕捉" class="headerlink" title="信号捕捉"></a>信号捕捉</h5><p>信号检测、处理、递达发生在进程从内核态切换到用户态的时候。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"get a signal: %d\n"</span><span class="token punctuation">,</span>signum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> sigaction act<span class="token punctuation">,</span> oact<span class="token punctuation">;</span>    act<span class="token punctuation">.</span>sa_hander <span class="token operator">=</span> handler<span class="token punctuation">;</span>    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oact<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h5><p>volatile作用：保持内存的可见性，告知编译器，被该关键字修饰的变量，不允许被优化，对该变量的任何操作，都必须在真实的内存中操作。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// int quit = 0;</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> quit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 被volatile修饰的变量是不可被覆盖的，在任何执行流中读取该数据必须从该数据的真实存储位置读取，不能从任何缓存中读取。</span><span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">{</span>    quit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>quit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果声明为int类型，quit会被优化为寄存器变量，while循环一直检测的是寄存器中的值，所以进程收到2号信号之后，修改的是内存上的值，寄存器上的值未被修改，所以进程没有退出</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"process exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="SIGCHILD"><a href="#SIGCHILD" class="headerlink" title="SIGCHILD"></a>SIGCHILD</h5><p>wait、waitpid函数清理僵尸进程，父进程可以阻塞或者非阻塞地等待子进程结束。阻塞方式会导致父进程不能处理其它任务。非阻塞方式：父进程在处理其它任务时还得时不时轮询一下，程序实现复杂。</p><p>子进程在结束时会给父进程发送SIGCHILD信号，该信号的默认处理动作是忽略，父进程可以自定义SIGCHILD信号的处理函数，这样父进程只需要关注自己的工作，不必关心子进程，子进程终止时会通知父进程，父进程在处理函数中调用wait回收即可。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent recived signal: %d\n"</span><span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am child process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child process exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am parent process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*output:      ☁  signal [master] ⚡  ./run      i am parent process      i am child process      i am parent process      i am child process      i am parent process      i am child process      i am parent process      i am child process      i am parent process      i am child process      i am parent process      child process exit      parent recived signal: 17      i am parent process      i am parent process      i am parent process      i am parent process      ^C */</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.3amupupup.online/pending-block-handler.png&quot; alt=&quot;signal&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;每个信号都有两个标志位表示阻塞(block)和未决(pendi</summary>
      
    
    
    
    <category term="操作系统" scheme="https://duwei19961021.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="信号" scheme="https://duwei19961021.github.io/tags/%E4%BF%A1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>nginx散列表</title>
    <link href="https://duwei19961021.github.io/2021/03/23/ngx_hash/"/>
    <id>https://duwei19961021.github.io/2021/03/23/ngx_hash/</id>
    <published>2021-03-23T10:21:27.000Z</published>
    <updated>2021-04-01T02:08:45.460Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx数据类型：散列表"><a href="#nginx数据类型：散列表" class="headerlink" title="nginx数据类型：散列表"></a>nginx数据类型：散列表</h4><p><img src="https://img.3amupupup.online/ngx_hash_2.png" alt="散列表"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 存储key和value的元素</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span>             <span class="token operator">*</span>value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指向value的指针</span>    u_short           len<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// key的长度</span>    u_char            name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// key长度是可变的，这里使用了c语言的柔性数组</span><span class="token punctuation">}</span> ngx_hash_elt_t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hash表结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ngx_hash_elt_t  <span class="token operator">*</span><span class="token operator">*</span>buckets<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// hash表的桶指针地址值</span>    ngx_uint_t        size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hash表的t桶个数</span><span class="token punctuation">}</span> ngx_hash_t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hash表初始化时所需的key的结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ngx_str_t         key<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// key</span>    ngx_uint_t        key_hash<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key经过hash函数计算得到的值</span>    <span class="token keyword">void</span>             <span class="token operator">*</span>value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value</span><span class="token punctuation">}</span> ngx_hash_key_t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化结构，通过这个结构里的参数进行初始化</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ngx_hash_t       <span class="token operator">*</span>hash<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向hash表的指针</span>    ngx_hash_key_pt   key<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// hash函数</span>    ngx_uint_t        max_size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最多能有多少个桶</span>    ngx_uint_t        bucket_size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 桶的大小(桶的内存空间size，单位是字节)</span>    <span class="token keyword">char</span>             <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hash表名称</span>    ngx_pool_t       <span class="token operator">*</span>pool<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内存池</span>    ngx_pool_t       <span class="token operator">*</span>temp_pool<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 临时内存池</span><span class="token punctuation">}</span> ngx_hash_init_t<span class="token punctuation">;</span></code></pre><h5 id="散列表提供的接口"><a href="#散列表提供的接口" class="headerlink" title="散列表提供的接口"></a>散列表提供的接口</h5><pre class=" language-c"><code class="language-c">ngx_int_t <span class="token function">ngx_hash_init</span><span class="token punctuation">(</span>ngx_hash_init_t <span class="token operator">*</span>hinit<span class="token punctuation">,</span> ngx_hash_key_t <span class="token operator">*</span>names<span class="token punctuation">,</span> ngx_uint_t nelts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构建散列表</span><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">ngx_hash_find</span><span class="token punctuation">(</span>ngx_hash_t <span class="token operator">*</span>hash<span class="token punctuation">,</span> ngx_uint_t key<span class="token punctuation">,</span> u_char <span class="token operator">*</span>name<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找key</span>ngx_int_t <span class="token function">ngx_hash_wildcard_init</span><span class="token punctuation">(</span>ngx_hash_init_t <span class="token operator">*</span>hinit<span class="token punctuation">,</span> ngx_hash_key_t <span class="token operator">*</span>names<span class="token punctuation">,</span> ngx_uint_t nelts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建通配符散列表</span></code></pre><h5 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h5><ol><li><p>ngx_int_t ngx_hash_init(ngx_hash_init_t *hinit, ngx_hash_key_t *names, ngx_uint_t nelts): 构建散列表</p><p><img src="https://img.3amupupup.online/ngx_hash_test_1.png" alt="test"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*typedef struct {    ngx_str_t         key;  // ngx_string类型的key    ngx_uint_t        key_hash; //  key经过hash函数处理之后的值    void             *value;    // value} ngx_hash_key_t;*/</span><span class="token comment" spellcheck="true">/*    第一个参数：hash表初始化结构：通过这个结构提供的参数进行初始化    第二个参数：ngx_hash_key_t组成的数组(先将key的hash值算好存储在结构里，    用的时候直接取就行了，而不是边用边计算hash值)    第三个元素：数组的元素个数*/</span><span class="token comment" spellcheck="true">/*    出现的参数说明：                        max_size: 桶的最大数量(这个hash表桶的最大个数)                        bucket_size: 桶的内存空间大小(不能超过65535)                        elt: ngx_hash_elt_t类型，桶中存储的元素    */</span>ngx_int_t<span class="token function">ngx_hash_init</span><span class="token punctuation">(</span>ngx_hash_init_t <span class="token operator">*</span>hinit<span class="token punctuation">,</span> ngx_hash_key_t <span class="token operator">*</span>names<span class="token punctuation">,</span> ngx_uint_t nelts<span class="token punctuation">)</span><span class="token punctuation">{</span>    u_char          <span class="token operator">*</span>elts<span class="token punctuation">;</span>    size_t           len<span class="token punctuation">;</span>    u_short         <span class="token operator">*</span>test<span class="token punctuation">;</span>    ngx_uint_t       i<span class="token punctuation">,</span> n<span class="token punctuation">,</span> key<span class="token punctuation">,</span> size<span class="token punctuation">,</span> start<span class="token punctuation">,</span> bucket_size<span class="token punctuation">;</span>    ngx_hash_elt_t  <span class="token operator">*</span>elt<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>buckets<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hinit<span class="token operator">-></span>max_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            如果max_size为0，那么这个hash表毫无意义         */</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                      <span class="token string">"could not build %s, you should "</span>u                      <span class="token string">"increase %s_max_size: %i"</span><span class="token punctuation">,</span>                      hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>max_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hinit<span class="token operator">-></span>bucket_size <span class="token operator">></span> <span class="token number">65536</span> <span class="token operator">-</span> ngx_cacheline_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*                从这里可以看出：bucket_size的长度不会超过65535字节，                elt的len成员的类型是u_short(无符号短整型，范围0~65535)，                也就是说一个桶在最坏情况下只能存储一个elt(如果elt足够长)。        */</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                      <span class="token string">"could not build %s, too large "</span>                      <span class="token string">"%s_bucket_size: %i"</span><span class="token punctuation">,</span>                      hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>bucket_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> nelts<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hinit<span class="token operator">-></span>bucket_size <span class="token operator">&lt;</span> <span class="token function">NGX_HASH_ELT_SIZE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">/*              这里直接说结论：所有的bucket都是存储在一块连续的内存上的，所有的bucket通过              自己末尾上的NULL指针进行间隔(看上面的图)，由于names数组中每个元素对应的key              的长度可能都是不一样的，在用names中的元素生成对应的elt(elt包含一个柔性数组)时，              names中元素的key的长度不同，生成的elt的大小也就不同，为了提高对内存的访问效率，              ngx对每个elt进行了内存对齐，所以在连续内存上给elt分配内存时，并不是elt多大就分配              多少内存，而是分配对齐后的内存(类似结构体的内存对齐)。              这里遍历names中的每个元素，计算对应elt的内存大小进行计算，如果发现出现了              bucket_size小于其中任何一个元素的对应的elt的内存的大小(必须保证bucket_size              能存储至少一个elt)，就会返回失败提醒调用者增加bucket_size。          */</span>        <span class="token punctuation">{</span>            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                          <span class="token string">"could not build %s, you should "</span>                          <span class="token string">"increase %s_bucket_size: %i"</span><span class="token punctuation">,</span>                          hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>bucket_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    test <span class="token operator">=</span> <span class="token function">ngx_alloc</span><span class="token punctuation">(</span>hinit<span class="token operator">-></span>max_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u_short<span class="token punctuation">)</span><span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          申请一个数组test，max_size个元素，元素类型u_short，稍后会进行模拟hash表的生成过程，          test数组是用来存储每一个bucket在生成hash表的过程中存储的元素所占用的内存大小，检测桶          中所有元素的内存大小是否超过了bucket_size。      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bucket_size <span class="token operator">=</span> hinit<span class="token operator">-></span>bucket_size <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          上面说过一个结论：每个bucket的末尾都存在一个NULL指针。所以一个桶能真正被用来          存储elt的空间应该减去一个空指针的大小。      */</span>    start <span class="token operator">=</span> nelts <span class="token operator">/</span> <span class="token punctuation">(</span>bucket_size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        一个ngx_hash_elt_t结构实例化之后的对象在内存上最少需要占用(2 * sizeof(void *))        字节内存，在此记为elt_min_size。        bucket_size / elt_min_size 的含义即：桶中能存储的最大元素个数，在此记为max_num。        start = nelts / max_num 的含义即为：桶的个数(至少)。      */</span>    start <span class="token operator">=</span> start <span class="token operator">?</span> start <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最起码要给一个桶</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hinit<span class="token operator">-></span>max_size <span class="token operator">></span> <span class="token number">10000</span> <span class="token operator">&amp;&amp;</span> nelts <span class="token operator">&amp;&amp;</span> hinit<span class="token operator">-></span>max_size <span class="token operator">/</span> nelts <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*             这一段暂时说不出原因，应该是对桶个数上的优化        */</span>        start <span class="token operator">=</span> hinit<span class="token operator">-></span>max_size <span class="token operator">-</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> start<span class="token punctuation">;</span> size <span class="token operator">&lt;=</span> hinit<span class="token operator">-></span>max_size<span class="token punctuation">;</span> size<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            这里开始进行探测的逻辑，内存循环根据桶子的个数去探测是否能装下所有elt，            外层循环不断增加桶子个数。        */</span>        <span class="token function">ngx_memzero</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u_short<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            初始化为0，按需初始化，有多少个桶就初始化多少个test的元素(置0)        */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> nelts<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">/*                  key是ngx_string类型，ngx_string的成员data指向字符的地址                这里是排除空串的情况              */</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            key <span class="token operator">=</span> names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key_hash <span class="token operator">%</span> size<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*                key的hash值 模 上size(桶个数)就能得出位于哪个bucket            */</span>            len <span class="token operator">=</span> test<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">NGX_HASH_ELT_SIZE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*                  test[key]上存储的是对应的桶buckets[key]已经使用了的空间，                  len是当前桶再次存储一个elt之后的内存空间大小的值              */</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                          <span class="token string">"%ui: %ui %uz \"%V\""</span><span class="token punctuation">,</span>                          size<span class="token punctuation">,</span> key<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> bucket_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">/*                  如果有发现len大于桶子的存储空间，说明发生了hash碰撞次数较多                  (碰撞多存储的元素就多)，导致桶子里的空间溢出了，因此跳出当前                  循环进入外层的循环去增加桶子的葛素。              */</span>                 <span class="token keyword">goto</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            test<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u_short<span class="token punctuation">)</span> len<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*                  如果没发生桶空间溢出，则将len更新至test              */</span>        <span class="token punctuation">}</span>        <span class="token keyword">goto</span> found<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              走完一圈都没发生桶子空间溢出，则说明此时的size比较合适，能够存储所有元素          */</span>    next<span class="token punctuation">:</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    size <span class="token operator">=</span> hinit<span class="token operator">-></span>max_size<span class="token punctuation">;</span>    <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_WARN<span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                  <span class="token string">"could not build optimal %s, you should increase "</span>                  <span class="token string">"either %s_max_size: %i or %s_bucket_size: %i; "</span>                  <span class="token string">"ignoring %s_bucket_size"</span><span class="token punctuation">,</span>                  hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>max_size<span class="token punctuation">,</span>                  hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>bucket_size<span class="token punctuation">,</span> hinit<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>found<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">/*         此时已经找到了最合适的桶子数：size。(决定桶子个数的原则：不浪费内存)    */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        test<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              上一步计算除去了bucket中NULL指针的空间,但是在实际中，              NULL指针也要算进去，这样才能给bucket分配最准确的内存大小，          */</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> nelts<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 忽略空key</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        key <span class="token operator">=</span> names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key_hash <span class="token operator">%</span> size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到当前key应该位于哪个桶</span>        len <span class="token operator">=</span> test<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">NGX_HASH_ELT_SIZE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前桶子已经使用了的内存空间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">65536</span> <span class="token operator">-</span> ngx_cacheline_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">/*                  如果有桶的长度大于bucket_size，说明桶溢出了              */</span>            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                          <span class="token string">"could not build %s, you should "</span>                          <span class="token string">"increase %s_max_size: %i"</span><span class="token punctuation">,</span>                          hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>name<span class="token punctuation">,</span> hinit<span class="token operator">-></span>max_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ngx_free</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里下一步是直接返回错误了，test必须free掉，否则会发生内存泄露</span>            <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        test<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u_short<span class="token punctuation">)</span> len<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              test对应的元素保存了对应桶子的所需空间大小(桶里进一个elt，len累加)，              test[i] == bucket[i]的size          */</span>    <span class="token punctuation">}</span>    len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        test<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u_short<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ngx_align</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ngx_cacheline_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        len <span class="token operator">+</span><span class="token operator">=</span> test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            计算出所有bucket总共需要多少内存        */</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hinit<span class="token operator">-></span>hash <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hinit<span class="token operator">-></span>hash <span class="token operator">=</span> <span class="token function">ngx_pcalloc</span><span class="token punctuation">(</span>hinit<span class="token operator">-></span>pool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_hash_wildcard_t<span class="token punctuation">)</span>                                             <span class="token operator">+</span> size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_hash_elt_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            sizeof(ngx_hash_wildcard_t)应该是有其它作用，暂时不理会。这里            分配了一个指针数组(ngx_hash_elt_t *)，每个指针指向对应的bucket的头部。            (看文章开始的图)        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hinit<span class="token operator">-></span>hash <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_free</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buckets <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_hash_elt_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>                      <span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> hinit<span class="token operator">-></span>hash <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_hash_wildcard_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        buckets <span class="token operator">=</span> <span class="token function">ngx_pcalloc</span><span class="token punctuation">(</span>hinit<span class="token operator">-></span>pool<span class="token punctuation">,</span> size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_hash_elt_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buckets <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_free</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    elts <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>hinit<span class="token operator">-></span>pool<span class="token punctuation">,</span> len <span class="token operator">+</span> ngx_cacheline_size<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          根据之前计算得到的len给所有elts分配一大块连续的内存(从内存池上申请的)      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elts <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_free</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    elts <span class="token operator">=</span> <span class="token function">ngx_align_ptr</span><span class="token punctuation">(</span>elts<span class="token punctuation">,</span> ngx_cacheline_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内存对齐，暂时不理解</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 说明在构建hash表时没有elt落进这个桶</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_hash_elt_t <span class="token operator">*</span><span class="token punctuation">)</span> elts<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              类型转换          */</span>        elts <span class="token operator">+</span><span class="token operator">=</span> test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              test[i]中存储的是模拟hash表构建过程中，每个桶中元素大小的总和。              现在按照这个值给桶子按需分配内存，最大程度的节省内存          */</span>     <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// test数组置0</span>        test<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> nelts<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 跳过空key</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这里开始真正的遍历names数组，构建hash表</span>        key <span class="token operator">=</span> names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key_hash <span class="token operator">%</span> size<span class="token punctuation">;</span>        elt <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_hash_elt_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> buckets<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> test<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到elt的首地址</span>        elt<span class="token operator">-></span>value <span class="token operator">=</span> names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写入value</span>        elt<span class="token operator">-></span>len <span class="token operator">=</span> <span class="token punctuation">(</span>u_short<span class="token punctuation">)</span> names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span>len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写入len字段</span>        <span class="token function">ngx_strlow</span><span class="token punctuation">(</span>elt<span class="token operator">-></span>name<span class="token punctuation">,</span> names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span>data<span class="token punctuation">,</span> names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改key为小写</span>        test<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u_short<span class="token punctuation">)</span> <span class="token punctuation">(</span>test<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">NGX_HASH_ELT_SIZE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>names<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 记录每个bucket的大小</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历buckets</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        elt <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_hash_elt_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              buckets[i]是每个bucket的首地址，加上起存储空间就是末尾的位置，              将次位置当做elt处理，其value置空，当做间隔标志。          */</span>        elt<span class="token operator">-></span>value <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 置为NULL</span>    <span class="token punctuation">}</span>    <span class="token function">ngx_free</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    hinit<span class="token operator">-></span>hash<span class="token operator">-></span>buckets <span class="token operator">=</span> buckets<span class="token punctuation">;</span>    hinit<span class="token operator">-></span>hash<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ngx_str_t   val<span class="token punctuation">;</span>        ngx_uint_t  key<span class="token punctuation">;</span>        elt <span class="token operator">=</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                          <span class="token string">"%ui: NULL"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>elt<span class="token operator">-></span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val<span class="token punctuation">.</span>len <span class="token operator">=</span> elt<span class="token operator">-></span>len<span class="token punctuation">;</span>            val<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token operator">&amp;</span>elt<span class="token operator">-></span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> hinit<span class="token operator">-></span><span class="token function">key</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>data<span class="token punctuation">,</span> val<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> hinit<span class="token operator">-></span>pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                          <span class="token string">"%ui: %p \"%V\" %ui"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> elt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            elt <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_hash_elt_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">ngx_align_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>elt<span class="token operator">-></span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> elt<span class="token operator">-></span>len<span class="token punctuation">,</span>                                                   <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>void * ngx_hash_find(ngx_hash_t *hash, ngx_uint_t key, u_char *name, size_t len): 查找key</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * 第一个参数：hash表 * 第二个参数：key经过hash函数计算出的值 * 第三个参数：key * 第四个长度：key的长度 */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_hash_find</span><span class="token punctuation">(</span>ngx_hash_t <span class="token operator">*</span>hash<span class="token punctuation">,</span> ngx_uint_t key<span class="token punctuation">,</span> u_char <span class="token operator">*</span>name<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_uint_t       i<span class="token punctuation">;</span>    ngx_hash_elt_t  <span class="token operator">*</span>elt<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> ngx_cycle<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hf:\"%*s\""</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    elt <span class="token operator">=</span> hash<span class="token operator">-></span>buckets<span class="token punctuation">[</span>key <span class="token operator">%</span> hash<span class="token operator">-></span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        key进行取模得到它是位于哪个桶里，得到的是bucket的首地址    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            说明桶里没有元素        */</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>elt<span class="token operator">-></span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            桶的结尾元素：elt->value==NULL，间隔标志，            走到NULL说明key不存在        */</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> elt<span class="token operator">-></span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/*              如果传入的key的长度不等于桶中elt的长度(elt->len是指key的长度)              那么必不是这个key，就不用检查key了。先判断长度，在判断key，长              度不同key就不用比较了          */</span>            <span class="token keyword">goto</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">/*                  比较key              */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> elt<span class="token operator">-></span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">goto</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> elt<span class="token operator">-></span>value<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              走到这里说明找到了          */</span>    next<span class="token punctuation">:</span>        elt <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_hash_elt_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">ngx_align_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>elt<span class="token operator">-></span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> elt<span class="token operator">-></span>len<span class="token punctuation">,</span>                                               <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            计算下一个元素的起始地址并进行类型转换        */</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 否则返回空</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_int_t ngx_hash_wildcard_init<strong>(</strong>ngx_hash_init_t <strong>***hinit</strong>,** ngx_hash_key_t <strong>***names</strong>,**    ngx_uint_t nelts**);</p></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>ngx_hash_init初始化的hash表是静态的，根据给定的一组key结构和key的个数进行初始化，生成的hash表仅仅是为了查找，不能动态添加元素。初始化过程中会模拟hash表的构建，但又不是真正意义上的构建，仅仅是在模拟构建时计算每个桶需要的空间，然后在真正构建hash表时按需给桶分配内存，最大程度的节省内存。</p><p>所有bucket下的所有elt位于一块连续的内存上，通过elt-&gt;value == NULL作为bucket之间的间隔。</p><p>最重要的一点：</p><p>buckets是一块连续的内存，由多个bucket组成，每个bucket的末尾存在一个NULL指针作为标志位。</p><p>bucket由多个elt组成，因为key的长度不一样，最终生成的elt长度也不一样(key是保存在elt的柔性数组上)，也就是说不能像操作数组一样去操作buckets(数组的每个元素大小相同，可以通过步长去访问，但是这里的bucket中的每个elt长度不一致)。</p><p>解决办法：</p><p><img src="https://img.3amupupup.online/ngx_align_1.png" alt="ngx_align"></p><p>这两个宏函数的作用： 在b的基础上对a求最小的倍数。 ngx_hash_elt_t的前两个结构体成员自动对齐了，不对齐的是后面的这个柔性数组，经过这两个宏函数处理后，在柔性数组后面补了一块内存(红色部分)，这就对齐了。这是连续的内存但是因为elt这个结构的内存大小和key有关系，key越大name越大越大elt越大，key是不定长的，因此每个elt的大小都不一样，那就不能像数组那样操作bucket。在计算模拟hash构建阶段，会计算elt对齐后的内存空间大小，因此elt的末尾地址必然是4或8的倍数，访问第二个元素时，通过拿到第一个elt的(&amp;elt-&gt;name[0] + elt-&gt;len)再使用ngx_align_ptr对其进行取整，拿到的就是下一个elt的首地址。(要拿到第二个元素就必须知道第一个元素的name数组后的第一个内存地址，拿第三个就需要知道第二个的，有链表那味儿，但是无伤大雅，因为在构建hash时多个元素可能会落进同一个桶里，查找时如果得到的桶里恰好有多个元素，也是需要去遍历对比name的)。</p><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><ol><li><p>内存对齐</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_align(d, a)     (((d) + (a - 1)) &amp; ~(a - 1))</span><span class="token macro property">#<span class="token directive keyword">define</span> ngx_align_ptr(p, a)                                                   \    (u_char *) (((uintptr_t) (p) + ((uintptr_t) a - 1)) &amp; ~((uintptr_t) a - 1))</span><span class="token macro property">#<span class="token directive keyword">define</span> NGX_HASH_ELT_SIZE(name)                                               \    (sizeof(void *) + ngx_align((name)->key.len + 2, sizeof(void *)))</span><span class="token comment" spellcheck="true">/*    a = 4:  二进制： 0000 0100       从右往左，第三位为1，剩下全为0;    a = 8:  二进制： 0000 1000       从右往左，第四位为1, 剩下全为0；    a = 16: 二进制:  0001 0000       从右往左，第五位为1，剩下全为0；    a - 1 = 3:  二进制： 0000 0011   从右往左，第三位之前，全是1；    a - 1 = 7:  二进制： 0000 0111   从右往左，第四位之前，全是1；    a - 1 = 15: 二进制： 0000 1111   从右往左，第五位之前，全是1；    ~(a - 1) = ~3:  二进制： 1111 1100   从右往左，第二位之后，全是1；    ~(a - 1) = ~7:  二进制： 1111 1000   从右往左，第三位之后，全是1；    ~(a - 1) = ~15: 二进制： 1111 0000   从右往左，第四位之后，全是1；    一个数，一定是这个数的二进制从右起第一个不为零的位所表示的数的整数倍    a = 12:  二进制： 0000 1100     从右起，第一个不为零的位所表示的整数为 0000 0100 即 4    那么，a = 12 一定是 4 的整数倍    如果，我们需要任意的一个数a对4取整怎么办呢？很简单，只需要把a从右起的若干位置0就可以了。    比如：            a = 13: 二进制：0000 1101            向0000 0100 即 4 取整，只需要将 0000 1101从右起，前两位置0，即可得到，0000 1100 即12            这个置0的过程可以表达为0000 1101 &amp;  1111 1100            而 1111 1100 = ~(4 - 1)，因此，13 对 4 取整的二进制运算即为：13 &amp; ~(4 - 1)    对于一个任意的数d和一个2的任意次幂a：    d对a向下取整的二进制运算为：d &amp; ~(a -1)    d对a向上取整的二进制运算为：(d + (a - 1)) &amp; ~(a - 1)*/</span><span class="token comment" spellcheck="true">/*    ngx_align(9,4) = 12    ngx_align(17,4) = 20    ngx_align_ptr(p, a)和ngx_align一样，只是会先将内存地址转成数字再计算*/</span></code></pre></li><li><p>柔性数组</p><p><img src="https://img.3amupupup.online/soft_array.png" alt="柔性数组"></p><p>结论：柔性数组与结构体在内存上是连续的</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx数据类型：散列表&quot;&gt;&lt;a href=&quot;#nginx数据类型：散列表&quot; class=&quot;headerlink&quot; title=&quot;nginx数据类型：散列表&quot;&gt;&lt;/a&gt;nginx数据类型：散列表&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://img.3amu</summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="hashtable" scheme="https://duwei19961021.github.io/tags/hashtable/"/>
    
  </entry>
  
  <entry>
    <title>ngx_align</title>
    <link href="https://duwei19961021.github.io/2021/03/22/ngx_align/"/>
    <id>https://duwei19961021.github.io/2021/03/22/ngx_align/</id>
    <published>2021-03-22T07:44:36.108Z</published>
    <updated>2021-03-24T08:03:45.472Z</updated>
    
    <content type="html"><![CDATA[<p>1、cache line</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/130770773" target="_blank" rel="noopener">CPU Cache</a></p><p>CPU 每次访问数据时先在缓存中查找一次，找不到则去主存找，访问完数据后会将数据存入缓存，以备后用。这就产生了一个问题，CPU 在访问某个地址的时候如何知道目标数据是在缓存中存在？如何知道缓存的数据是否还有效没被修改？不能为每个存入缓存的字节都打标记，所以 CPU 缓存会划分为固定大小的 Block 称为 Cache Line，作为存取数据的最小单位。大小都为 2 的整数幂，比如 16 字节，256 字节等。这样一个 cache line 这一整块内存能通过一个标记来记录是否在内存中，是否还有效，是否被修改等。一次存取一块数据也能充分利用总线带宽以及 CPU 访问的空间局部性。</p></blockquote><pre class=" language-c"><code class="language-c"></code></pre><hr><p>实际上，对齐参数(MALLOC_ALIGNMENT)大小的设定需要满足以下两点：</p><ol><li><p>必须是2的幂</p></li><li><p>必须是void *的整数倍</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、cache line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/130770773&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CPU Cache&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPU</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx单向链表</title>
    <link href="https://duwei19961021.github.io/2021/03/22/ngx_list/"/>
    <id>https://duwei19961021.github.io/2021/03/22/ngx_list/</id>
    <published>2021-03-22T03:15:43.000Z</published>
    <updated>2021-03-22T05:17:19.917Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx数据类型：单向链表"><a href="#nginx数据类型：单向链表" class="headerlink" title="nginx数据类型：单向链表"></a>nginx数据类型：单向链表</h4><p><img src="https://img.3amupupup.online/ngx_list_1.png" alt="单向链表"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 单向链表的子结点</span><span class="token keyword">struct</span> ngx_list_part_s <span class="token punctuation">{</span>    <span class="token keyword">void</span>             <span class="token operator">*</span>elts<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据区的首地址</span>    ngx_uint_t        nelts<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  指向第一个未使用过的元素</span>    ngx_list_part_t  <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  指向下一个结点的指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 单向链表的父结点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ngx_list_part_t  <span class="token operator">*</span>last<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向链表中的最后一个结点</span>    ngx_list_part_t   part<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    size_t            size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素大小</span>    ngx_uint_t        nalloc<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  指向最后一个使用过的元素</span>    ngx_pool_t       <span class="token operator">*</span>pool<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  指向内存池的指针，因为都是从内存池上分配的，所以需要保存指向内存池的指针</span><span class="token punctuation">}</span> ngx_list_t<span class="token punctuation">;</span></code></pre><h5 id="单向链表提供的接口"><a href="#单向链表提供的接口" class="headerlink" title="单向链表提供的接口"></a>单向链表提供的接口</h5><pre class=" language-c"><code class="language-c">ngx_list_t <span class="token operator">*</span><span class="token function">ngx_list_create</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建链表结构(父结点)</span><span class="token keyword">static</span> ngx_inline ngx_int_t <span class="token function">ngx_list_init</span><span class="token punctuation">(</span>ngx_list_t <span class="token operator">*</span>list<span class="token punctuation">,</span> ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化操作</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_list_push</span><span class="token punctuation">(</span>ngx_list_t <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加元素</span></code></pre><h5 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h5><ol><li><p>ngx_list_t *ngx_list_create(ngx_pool_t *pool, ngx_uint_t n, size_t size): 创建链表结构</p><pre class=" language-c"><code class="language-c">ngx_list_t <span class="token operator">*</span><span class="token function">ngx_list_create</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_list_t  <span class="token operator">*</span>list<span class="token punctuation">;</span>    list <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_list_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          在small链表上给链表的管理结构(父结点: ngx_list_t)分配内存      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_list_init</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> pool<span class="token punctuation">,</span> n<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 初始化数据区域</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>static ngx_inline ngx_int_t ngx_list_init(ngx_list_t *list, ngx_pool_t *pool, ngx_uint_t n, size_t size): 初始化链表</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> ngx_inline ngx_int_t<span class="token function">ngx_list_init</span><span class="token punctuation">(</span>ngx_list_t <span class="token operator">*</span>list<span class="token punctuation">,</span> ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    list<span class="token operator">-></span>part<span class="token punctuation">.</span>elts <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> n <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          分配在small还是large链表上取决于n*size      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>part<span class="token punctuation">.</span>elts <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    list<span class="token operator">-></span>part<span class="token punctuation">.</span>nelts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          指向最后一个使用过的元素      */</span>    list<span class="token operator">-></span>part<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          指向链表的下一个结点      */</span>    list<span class="token operator">-></span>last <span class="token operator">=</span> <span class="token operator">&amp;</span>list<span class="token operator">-></span>part<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          指向当前链表的最后一个结点(初始化时指向自己)，便于尾插      */</span>    list<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          元素的大小(占用内存的字节)      */</span>    list<span class="token operator">-></span>nalloc <span class="token operator">=</span> n<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          元素个数      */</span>    list<span class="token operator">-></span>pool <span class="token operator">=</span> pool<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          指向内存池      */</span>    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>void *ngx_list_push(ngx_list_t *list): 添加元素</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_list_push</span><span class="token punctuation">(</span>ngx_list_t <span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span>             <span class="token operator">*</span>elt<span class="token punctuation">;</span>    ngx_list_part_t  <span class="token operator">*</span>last<span class="token punctuation">;</span>    last <span class="token operator">=</span> l<span class="token operator">-></span>last<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          拿到最后一个元素的指针，尾插时避免遍历链表从而导致效率低下      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last<span class="token operator">-></span>nelts <span class="token operator">==</span> l<span class="token operator">-></span>nalloc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                    说明空间用完了，需要扩容                */</span>        <span class="token comment" spellcheck="true">/* the last part is full, allocate a new list part */</span>        last <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>l<span class="token operator">-></span>pool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_list_part_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              从内存池上给子结点结构分配内存          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">/*                  分配失败              */</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        last<span class="token operator">-></span>elts <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>l<span class="token operator">-></span>pool<span class="token punctuation">,</span> l<span class="token operator">-></span>nalloc <span class="token operator">*</span> l<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              从内存池上给新结点分配数据区的内存，每个结点的数据区域都是一样大          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last<span class="token operator">-></span>elts <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">/*                  分配失败              */</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        last<span class="token operator">-></span>nelts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              新扩容的链表没有使用过，nelts指向第一个元素          */</span>        last<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>last<span class="token operator">-></span>next <span class="token operator">=</span> last<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              将新添加的结点添加到链表末尾          */</span>        l<span class="token operator">-></span>last <span class="token operator">=</span> last<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              链表的last指向也要修改          */</span>    <span class="token punctuation">}</span>    elt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> last<span class="token operator">-></span>elts <span class="token operator">+</span> l<span class="token operator">-></span>size <span class="token operator">*</span> last<span class="token operator">-></span>nelts<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          首地址加上已经使用的内存等于未使用内存的起始位置      */</span>    last<span class="token operator">-></span>nelts<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> elt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx数据类型：单向链表&quot;&gt;&lt;a href=&quot;#nginx数据类型：单向链表&quot; class=&quot;headerlink&quot; title=&quot;nginx数据类型：单向链表&quot;&gt;&lt;/a&gt;nginx数据类型：单向链表&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://img.</summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="list" scheme="https://duwei19961021.github.io/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>nginx双向链表</title>
    <link href="https://duwei19961021.github.io/2021/03/21/ngx_queue/"/>
    <id>https://duwei19961021.github.io/2021/03/21/ngx_queue/</id>
    <published>2021-03-21T11:02:44.000Z</published>
    <updated>2021-03-22T02:50:53.399Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx数据类型：双向链表"><a href="#nginx数据类型：双向链表" class="headerlink" title="nginx数据类型：双向链表"></a>nginx数据类型：双向链表</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> ngx_queue_s <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*          链表这个结构本身不带有任何数据，而是把这个链表结构挂载到业务数据结构上，实现了业务数据结构与链表结构的解耦      */</span>    ngx_queue_t  <span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前驱指针</span>    ngx_queue_t  <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后驱指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><img src="https://img.3amupupup.online/ngx_queue_2.png" alt="链表示例"></p><h5 id="双向链表提供的接口"><a href="#双向链表提供的接口" class="headerlink" title="双向链表提供的接口"></a>双向链表提供的接口</h5><pre class=" language-c"><code class="language-c"><span class="token function">ngx_queue_init</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化链表指向</span><span class="token function">ngx_queue_empty</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断链表是否为空</span><span class="token function">ngx_queue_insert_head</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 链表头插</span><span class="token function">ngx_queue_insert_tail</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 链表尾插</span><span class="token function">ngx_queue_head</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取链表第一个元素，h是哨兵位</span><span class="token function">ngx_queue_last</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取链表最后一个元素</span><span class="token function">ngx_queue_sentinel</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取哨兵结点</span><span class="token function">ngx_queue_next</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取结点q的下一个结q</span><span class="token function">ngx_queue_prev</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取结点q的前一个结点</span><span class="token function">ngx_queue_remove</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从链表中移除x结点</span><span class="token function">ngx_queue_split</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> q<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 切割链表</span><span class="token function">ngx_queue_add</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ngx_queue_data</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> type<span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以上都是宏函数</span>ngx_queue_t <span class="token operator">*</span><span class="token function">ngx_queue_middle</span><span class="token punctuation">(</span>ngx_queue_t <span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h5><ol><li><p>ngx_queue_init(q): 初始化链表</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_init(q)                                                     \    (q)->prev = q;                                                            \    (q)->next = q</span><span class="token comment" spellcheck="true">/*    前驱、后驱指针都指向自己，当前结点是哨兵位*/</span></code></pre></li><li><p>ngx_queue_empty(h): 判断链表是否为空</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_empty(h)                                                    \    (h == (h)->prev)</span><span class="token comment" spellcheck="true">/*    双向链表的前驱或者后驱指向的是自己时则为空(仅存在哨兵结点)*/</span></code></pre></li><li><p>ngx_queue_insert_head(h, x): 在头结点之后插入x结点(头插)</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_insert_head(h, x)                                           \    (x)->next = (h)->next;                                                    \    (x)->next->prev = x;                                                      \    (x)->prev = h;                                                            \    (h)->next = x</span></code></pre></li><li><p>ngx_queue_insert_tail(h, x): 在链表的末尾添加新结点x(尾插)</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_insert_tail(h, x)                                           \    (x)->prev = (h)->prev;                                                    \    (x)->prev->next = x;                                                      \    (x)->next = h;                                                            \    (h)->prev = x</span></code></pre></li><li><p>ngx_queue_head(h): 获取链表的第一个有效结点(除去哨兵位)</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_head(h)                                                     \    (h)->next</span></code></pre></li><li><p>ngx_queue_last(h): 获取链表最后一个结点</p><pre><code>#define ngx_queue_last(h)                                                     \    (h)-&gt;prev</code></pre></li><li><p>ngx_queue_sentinel(h): 获取哨兵位</p><pre><code>#define ngx_queue_sentinel(h)                                                 \    (h)</code></pre></li><li><p>ngx_queue_next(q): 获取q的下一个结点</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_next(q)                                                     \    (q)->next</span></code></pre></li><li><p>ngx_queue_prev(q): 获取q的前一个结点</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_prev(q)                                                     \    (q)->prev</span></code></pre></li><li><p>ngx_queue_remove(x): 从链表中移除结点x</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_remove(x)                                                   \    (x)->next->prev = (x)->prev;                                              \    (x)->prev->next = (x)->next;                                              \    (x)->prev = NULL;                                                         \    (x)->next = NULL</span></code></pre></li><li><p>ngx_queue_add</p><pre><code>#define ngx_queue_add(h, n)                                                   \    (h)-&gt;prev-&gt;next = (n)-&gt;next;                                              \    (n)-&gt;next-&gt;prev = (h)-&gt;prev;                                              \    (h)-&gt;prev = (n)-&gt;prev;                                                    \    (h)-&gt;prev-&gt;next = h;</code></pre></li><li><p>ngx_queue_data(q, type, link)</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_data(q, type, link)                                         \    (type *) ((u_char *) q - offsetof(type, link))</span><span class="token comment" spellcheck="true">/*    可以通过业务结构体中ngx_queue_t数据结构的偏移量来得到业务主体的数据结构的指针地址，    实现了业务数据结构和链表结构的解耦*/</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span><span class="token comment" spellcheck="true">/* #define ngx_queue_data(q, type, link)                                         \    (type *) ((u_char *) q - offsetof(type, link))*/</span><span class="token keyword">struct</span> data<span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> _a<span class="token punctuation">;</span>    <span class="token keyword">long</span> _b<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> _c<span class="token punctuation">;</span>    <span class="token keyword">float</span> _d<span class="token punctuation">;</span>    <span class="token keyword">struct</span> data<span class="token operator">*</span> _e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data结构中_a 偏移量 = %ld字节\n"</span><span class="token punctuation">,</span><span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> data<span class="token punctuation">,</span> _a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data结构中_d 偏移量 = %ld字节\n"</span><span class="token punctuation">,</span><span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> data<span class="token punctuation">,</span> _d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> data d<span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span>_a <span class="token operator">=</span> array<span class="token punctuation">;</span>    d<span class="token punctuation">.</span>_b <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span>_c <span class="token operator">=</span> <span class="token string">"duwei"</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span>_d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d._c = %s\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>_c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d._d = %f\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>_d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> data <span class="token operator">*</span>newP <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> data<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>_d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> data<span class="token punctuation">,</span> _d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        将_d成员的地址转换成char*, 再减去_d相对data的偏移量(字节)，        再将得到的结果转换成struct data*就是d的首地址。    */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"newP->_c = %s\n"</span><span class="token punctuation">,</span>newP<span class="token operator">-></span>_c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"newP->_d = %f\n"</span><span class="token punctuation">,</span>newP<span class="token operator">-></span>_d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d = %p, newP = %p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">,</span>newP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_queue_t *ngx_queue_middle(ngx_queue_t *queue): 获取链表的中间结点</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*    快慢指针获取中间结点*/</span>ngx_queue_t <span class="token operator">*</span><span class="token function">ngx_queue_middle</span><span class="token punctuation">(</span>ngx_queue_t <span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_queue_t  <span class="token operator">*</span>middle<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>    middle <span class="token operator">=</span> <span class="token function">ngx_queue_head</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          头结点的下一个结点      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>middle <span class="token operator">==</span> <span class="token function">ngx_queue_last</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/*              如果middle等于头结点的上一个结点，则链表只有两个元素 head 和 mid          */</span>        <span class="token keyword">return</span> middle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    next <span class="token operator">=</span> <span class="token function">ngx_queue_head</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          next保存链表的头结点之后的结点      */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        middle <span class="token operator">=</span> <span class="token function">ngx_queue_next</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token function">ngx_queue_next</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              走到这里 middle、next都指向第二个有效结点          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token function">ngx_queue_last</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">/*                  当next走到末尾元素时，mid才走一半，所以mid是中间元素              */</span>            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        next <span class="token operator">=</span> <span class="token function">ngx_queue_next</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              next走的速度是middle的两倍          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token function">ngx_queue_last</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">/*                  走到末尾时，middle才走一半路程，此时指向中间位置              */</span>            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>void ngx_queue_sort(ngx_queue_t <em>queue, ngx_int_t (</em>cmp)(const ngx_queue_t *, const ngx_queue_t *)): 链表排序</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ngx_queue_sort</span><span class="token punctuation">(</span>ngx_queue_t <span class="token operator">*</span>queue<span class="token punctuation">,</span>    <span class="token function">ngx_int_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>cmp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> ngx_queue_t <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> ngx_queue_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_queue_t  <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>prev<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>    q <span class="token operator">=</span> <span class="token function">ngx_queue_head</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token function">ngx_queue_last</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> <span class="token function">ngx_queue_next</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> q <span class="token operator">!=</span> <span class="token function">ngx_queue_sentinel</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span> q <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> <span class="token function">ngx_queue_prev</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token function">ngx_queue_next</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ngx_queue_remove</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            prev <span class="token operator">=</span> <span class="token function">ngx_queue_prev</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token function">ngx_queue_sentinel</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ngx_queue_insert_after</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_queue_split(h, q, n): </p><p><img src="https://img.3amupupup.online/ngx_queue_2.png" alt="链表示例"></p><p><img src="https://img.3amupupup.online/ngx_queue_split_1.png" alt="切割链表"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> ngx_queue_split(h, q, n)                                              \    (n)->prev = (h)->prev;                                                    \    (n)->prev->next = n;                                                      \    (n)->next = q;                                                            \    (h)->prev = (q)->prev;                                                    \    (h)->prev->next = h;                                                      \    (q)->prev = n;</span></code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>双向链表的数据结构中并未定义数据，而是通过将链表结构挂载到业务结构中通过offsetof计算出链表结构在业务结构中的偏移量，再减去偏移量就得到了业务结构的指针地址。实现了链表与数据的解耦。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx数据类型：双向链表&quot;&gt;&lt;a href=&quot;#nginx数据类型：双向链表&quot; class=&quot;headerlink&quot; title=&quot;nginx数据类型：双向链表&quot;&gt;&lt;/a&gt;nginx数据类型：双向链表&lt;/h4&gt;&lt;pre class=&quot; language-c&quot;&gt;</summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="queue" scheme="https://duwei19961021.github.io/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>信息的表示和处理</title>
    <link href="https://duwei19961021.github.io/2021/03/20/information_representation_and_processing/"/>
    <id>https://duwei19961021.github.io/2021/03/20/information_representation_and_processing/</id>
    <published>2021-03-20T03:55:12.704Z</published>
    <updated>2021-03-20T03:55:12.704Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2-1-信息存储"><a href="#2-1-信息存储" class="headerlink" title="2.1 信息存储"></a>2.1 信息存储</h4><ul><li>大多数计算机使用8位的块，或者字节(byte)，作为最小的可寻址的内存单位，而不是访问内存中单独的位。</li><li>C编译器把指针和类型联系起来，这样就可以根据指针值的类型，生成不同的机器级别代码来访问存储在指针所指向位置处的值。尽管C编译器维护着这个类型的信息，但是它生成的实际机器级程序不包含关于数据类型的信息。</li><li>机器级程序将内存视为一个非常大的字节数组，称为虚拟内存(virtual memory)。内存的每一个字节都是由唯一的数字标识的，称为地址(address)。所有地址的集合就称为虚拟地址空间(virtual address space)。</li></ul><h5 id="2-1-1-十六进制表示法"><a href="#2-1-1-十六进制表示法" class="headerlink" title="2.1.1 十六进制表示法"></a>2.1.1 十六进制表示法</h5><table><thead><tr><th align="center"></th><th align="left"></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td align="center">十六进制</td><td align="left">1</td><td>7</td><td>3</td><td>A</td><td>4</td></tr><tr><td align="center">二 进 制</td><td align="left">0001</td><td>0111</td><td>0011</td><td>1010</td><td>0100</td></tr></tbody></table><h5 id="2-1-2-字数据大小"><a href="#2-1-2-字数据大小" class="headerlink" title="2.1.2 字数据大小"></a>2.1.2 字数据大小</h5><ul><li><p>对于一个字长为w位的机器而言，虚拟地址的范围是0 ~ 2^w-1，程序最多访问2^w个字节。</p><p><img src="/image/image-20201023114928097.png" alt="image-20201023114928097"></p><p>举个例子：</p><p>32位操作系统，传输总线是32位，8bit为一个字节，那么在读或者写数据时一次就能传输32/8=4个字节。一个字长就是4字节。</p></li></ul><h5 id="2-1-3-寻址和字节顺序"><a href="#2-1-3-寻址和字节顺序" class="headerlink" title="2.1.3 寻址和字节顺序"></a>2.1.3 寻址和字节顺序</h5><ul><li>对于跨越多字节的程序对象，必须建立两个规则：① 这个对象的地址是什么，② 在内存上如何排列</li><li>多字节对象会被存储为连续的字节序列，对象的地址为所使用字节中最小的地址。 </li></ul><p>排列表示一个对象的字节有两个通用规则：小端法 &amp; 大端法</p><p>低有效字节存储在低地址上，称为小端存储，反之则为大端存储。</p><p><img src="/image/image-20201023131136500.png" alt="image-20201023131136500"></p><p>C语言中字符串被编码为一个以null(其值为0)字符结尾的字符数组。</p><h5 id="2-1-6-布尔"><a href="#2-1-6-布尔" class="headerlink" title="2.1.6  布尔"></a>2.1.6  布尔</h5><ul><li><p>NOT: ~</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1010</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 1111 1111 1111 1111 1111 1111 0101 补</span>                        <span class="token comment" spellcheck="true">// 1111 1111 1111 1111 1111 1111 1111 0100 反</span>                        <span class="token comment" spellcheck="true">// 1000 0000 0000 0000 0000 0000 0000 1011 原</span><span class="token punctuation">}</span></code></pre></li><li><p>AND: &amp;</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1010</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1111</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1010</span><span class="token punctuation">}</span></code></pre></li><li><p>OR: |</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 0010</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1011</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1011</span><span class="token punctuation">}</span></code></pre></li><li><p>EXCLUSIVE-OR: ^</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1010</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 0010</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1000</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="2-1-9-移位运算"><a href="#2-1-9-移位运算" class="headerlink" title="2.1.9 移位运算"></a>2.1.9 移位运算</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 1010</span>    a <span class="token operator">=</span>  a <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 0001</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 1,无符号右移补0</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 原码: 1000 0000 0000 0000 0000 0000 0000 0101</span>    <span class="token comment" spellcheck="true">// 反码: 1111 1111 1111 1111 1111 1111 1111 1010</span>    <span class="token comment" spellcheck="true">// 补码: 1111 1111 1111 1111 1111 1111 1111 1011</span>    b <span class="token operator">=</span> b <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 补码: 1111 1111 1111 1111 1111 1111 1101 1000</span>    <span class="token comment" spellcheck="true">// 反码: 1111 1111 1111 1111 1111 1111 1101 0111</span>    <span class="token comment" spellcheck="true">// 原码: 1000 0000 0000 0000 0000 0000 0010 1000</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// -40</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 原码: 1000 0000 0000 0000 0000 0000 0000 0101</span>    <span class="token comment" spellcheck="true">// 反码: 1111 1111 1111 1111 1111 1111 1111 1010</span>    <span class="token comment" spellcheck="true">// 补码: 1111 1111 1111 1111 1111 1111 1111 1011</span>    c <span class="token operator">=</span> c <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 补码: 1111 1111 1111 1111 1111 1111 1111 1111</span>    <span class="token comment" spellcheck="true">// 反码: 1111 1111 1111 1111 1111 1111 1111 1110</span>    <span class="token comment" spellcheck="true">// 补码: 1000 0000 0000 0000 0000 0000 0000 0001</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// -1,有符号数右移时补符号位</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-整数表示"><a href="#2-2-整数表示" class="headerlink" title="2.2 整数表示"></a>2.2 整数表示</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;2-1-信息存储&quot;&gt;&lt;a href=&quot;#2-1-信息存储&quot; class=&quot;headerlink&quot; title=&quot;2.1 信息存储&quot;&gt;&lt;/a&gt;2.1 信息存储&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;大多数计算机使用8位的块，或者字节(byte)，作为最小的可寻址的内存单位，而不</summary>
      
    
    
    
    <category term="操作系统" scheme="https://duwei19961021.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>虚拟内存</title>
    <link href="https://duwei19961021.github.io/2021/03/20/virtual_memory/"/>
    <id>https://duwei19961021.github.io/2021/03/20/virtual_memory/</id>
    <published>2021-03-20T03:51:57.552Z</published>
    <updated>2021-04-05T16:48:04.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第九章：虚拟内存"><a href="#第九章：虚拟内存" class="headerlink" title="第九章：虚拟内存"></a>第九章：虚拟内存</h3><h5 id="9-1-物理和虚拟寻址"><a href="#9-1-物理和虚拟寻址" class="headerlink" title="9.1 物理和虚拟寻址"></a>9.1 物理和虚拟寻址</h5><p>物理寻址：</p><p><img src="/Users/duwei/Desktop/source/image/image-20201023182237165.png" alt="image-20201023182237165"></p><p>该示例的上下文是一条加载指令。当cpu加载这条指令时，会生成一个有效物理地址，通过内存总线，把它传递给主存。主存取出从物理地址4开始的四个字节，并将它返回给cpu，cpu会将它存放在一个寄存器里。</p><p>虚拟寻址：</p><p><img src="/Users/duwei/Desktop/source/image/image-20201023182622615.png" alt="image-20201023182622615"></p><p>使用虚拟地址，cpu通过生成一个虚拟地址(Virtual Address,VA)来访问主存，这个虚拟地址在被送到主存之前先转换成适当的虚拟地址(Memory Manager Unit简称MMU：内存管理单元，利用存放在主存中的查询表来动态翻译虚拟地址)，主存收到翻译过的地址(物理地址)之后从物理内存上取出数据并返回给cpu。</p><h5 id="9-2-地址空间"><a href="#9-2-地址空间" class="headerlink" title="9.2 地址空间"></a>9.2 地址空间</h5><p>地址空间：一个非负整数地址的有序集合。为了简化讨论，总是假设使用的是线性地址空间。</p><p>在一个带虚拟内存的系统，CPU从一个有N=2^n个地址的空间中生成虚拟地址，称为虚拟地址空间。</p><p>{0, 1, 2, 3,…,N-1}</p><p>一个包含N=2^n个地址的虚拟地址空间叫做一个n位地址空间。例如32位操作系统(2^32)、64位操作系统(2^64)。</p><p>主存中的每个字节都有一个选自虚拟空间的地址和一个选自物理空间的地址。</p><table><thead><tr><th align="center">虚拟地址位数(n)</th><th align="center">虚拟地址数(N)</th><th align="center">最大的可能虚拟地址</th></tr></thead><tbody><tr><td align="center">8</td><td align="center">2^8=256 byte</td><td align="center">2^8-1=255</td></tr><tr><td align="center">16</td><td align="center">2^16=64 K</td><td align="center">2^16-1</td></tr><tr><td align="center">32</td><td align="center">2^32 = 4096M = 4G</td><td align="center">2^32-1</td></tr><tr><td align="center">48</td><td align="center">2^48 = 256T</td><td align="center">2^48-1</td></tr><tr><td align="center">64</td><td align="center">2^64 = 16E</td><td align="center">2^64-1</td></tr></tbody></table><h5 id="9-3-虚拟内存作为缓存工具"><a href="#9-3-虚拟内存作为缓存工具" class="headerlink" title="9.3 虚拟内存作为缓存工具"></a>9.3 虚拟内存作为缓存工具</h5><h6 id="1、什么是虚拟内存？"><a href="#1、什么是虚拟内存？" class="headerlink" title="1、什么是虚拟内存？"></a>1、什么是虚拟内存？</h6><p>虚拟内存是磁盘上(较低层)连续N个字节组成的数组，每个字节都有唯一的虚拟地址作为数组的索引，磁盘上数组的内容(指的是数据)被缓存在主存中。(虚拟页存在于磁盘上)</p><p>物理内存被分隔成物理页(Physical Page,PP)。</p><p>VM系统将虚拟内存分隔成虚拟页(Virtual Page,VP)。</p><p>虚拟页面的集合分为三个不相交的子集：</p><ol><li><p>未分配的(VM系统还未分配或者未创建的页，未分配的块没有任何数据和他们相关联，所以不占用任何磁盘空间，linux命令free在计算内存使用量时，未分配的 不会被记入)。</p></li><li><p>缓存的(已缓存在物理内存中的已分配页)。</p></li><li><p>未缓存的(未缓存在物理内存中的已分配页)。</p><p><img src="/image/image-20201026121811373.png" alt="image-20201026121811373"></p></li></ol><h6 id="2、DRAM缓存组织结构"><a href="#2、DRAM缓存组织结构" class="headerlink" title="2、DRAM缓存组织结构"></a>2、DRAM缓存组织结构</h6><ul><li>SRAM：表示位于cpu和主存之间的L1、L2、L3高速缓存。</li><li>DRAM：表示虚拟内存系统的缓存，它在主存中缓存虚拟页。</li><li>直   写：当 CPU 要将数据写入内存时 除了更新缓冲内存(高速缓存L1、L2、L3)上的数据外也将数据写在 DRAM 中 以维持主存与缓冲内存的一致性 当要写入内存的数据一多 速度自然就慢了下来 </li><li>回   写：每当 CPU 要将数据写入内存时 只会先更新缓冲内存(高速缓存L1、L2、L3)上的数据 随后再让缓冲内存在总线不塞车的时候 才把数据写回 DRAM 所以速度自然快得多</li></ul><h6 id="3、页表-将虚拟页映射到物理页"><a href="#3、页表-将虚拟页映射到物理页" class="headerlink" title="3、页表(将虚拟页映射到物理页)"></a>3、页表(将虚拟页映射到物理页)</h6><p>虚拟内存必须有某种方法来判定一个虚拟页是否缓存在DRAM中的某个地方。如果是，系统还必须确定这个虚拟页存放在哪个物理页(主存)。如果不命中还必须判断这个虚拟页存放在磁盘的哪个位置上，在物理页中选择一个牺牲页，并将虚拟页从磁盘复制到DRAM中，替换这个牺牲页。(操作系统为每个进程都维护一个独立的页表)</p><p>页表：将虚拟页映射到物理页。每次地址翻译硬件将一个虚拟地址转换为物理地址时，都会读取页表，操作系统负责维护页表的内容，以及在磁盘与DRAM之间来回传送页。</p><p><img src="/image/image-20201020134441586.png" alt="image-20201020134441586"></p><p>我们将假设每个PTE是由一个有效位(valid bit)和一个n位地址字段组成，有效位表明了该虚拟页当前是否被缓存在DRAM中。如果设置了有效位，那么地址字段就表示DRAM中相应的物理页的起始位置，这个物理页中缓存了该虚拟页。 如果没有设置有效位，那么一个空地址表示这个虚拟页还未被分配。否则，这个地址就指向该虚拟页在磁盘上的起始位置。</p><ul><li><p>确定虚拟地址大小(n)和页大小(P)的组合需要的PTE数量。</p><table><thead><tr><th align="center">n(位)</th><th align="center">P=2^p</th><th align="center">PTE数量</th></tr></thead><tbody><tr><td align="center">16</td><td align="center">4K</td><td align="center">2^16 / 2^12  = 16</td></tr><tr><td align="center">16</td><td align="center">8K</td><td align="center">2^16 / 2^13 = 8</td></tr><tr><td align="center">32</td><td align="center">4K</td><td align="center">2^32 / 2^12 = 2^20</td></tr><tr><td align="center">32</td><td align="center">8K</td><td align="center">2^32 / 2^13 = 2^19</td></tr></tbody></table></li></ul><h6 id="4、缺页"><a href="#4、缺页" class="headerlink" title="4、缺页"></a>4、缺页</h6><p>DRAM缓存不命中称为缺页。</p><p>自己的理解：在cpu获取虚拟页中的数据时，地址翻译硬件去读页表的页表记录的有效位，如果有效位为0则推断出该虚拟页未被缓存，并且触发一个缺页异常。缺页异常调用内核中的缺页异常处理程序，该程序会在主存的PP(物理页)中选择一个被缓存的VP作为牺牲页(如果牺牲页中的数据被修改过那么就会将数据写会磁盘)，接下来将要被缓存的vp从磁盘中加载出来缓存到主存上去(替换牺牲页)。</p><ul><li><p>CPU引用VP3中的一个字，地址翻译硬件将虚拟地址作为一个索引(虚拟地址分为两部分：虚拟页号[VPN:virtual page number]和虚拟页偏移量[VPO:virtual page offset]，使用虚拟页号作为索引)来定位PTE3，通过读取PTE3：有效为为0且地址不为null，所以得出VP3没有被缓存在物理内存中且得到了VP3的磁盘地址，此时触发缺页异常，缺页异常调用内核中的缺页异常处理程序，该程序会选择一个牺牲页(PP3中的VP4，如果VP4的内容被修改了，那么内核就会将VP4的数据复制回磁盘)，无论哪种情况，内核都会修改VP4的页表条目，反映VP4不在缓存在主存中的事实。</p><p><img src="/image/image-20201020140133328.png" alt="image-20201020140133328"></p></li><li><p>随后，内核从磁盘复制VP3到内存PP3，并更新PTE3(将有效为设置为1，地址位设置为物理页号)，随后返回，当异常处理程序返回的时候，它会重启导致缺页的指令，该指令会把缺页的虚拟地址重新发送给地址翻译硬件，但是此时VP3已经缓存在物理内存中了，那么页命中就能由地址翻译硬件正常处理了。</p><p><img src="/image/image-20201026140413910.png" alt="image-20201026140413910"></p></li></ul><p>5、分配页面</p><ul><li><p>操作系统分配一个新的虚拟内存页时对页表的影响，例如：调用mallooc，在这个实例中，VP5的分配过程是在磁盘创建空间并更新PTE5，并使它指向磁盘上这个新创建的页面。此过程中并没有分配物理内存哦。</p><p><img src="/image/image-20201026141028175.png" alt="image-20201026141028175"></p></li></ul><hr><h5 id="9-6-地址翻译"><a href="#9-6-地址翻译" class="headerlink" title="9.6 地址翻译"></a>9.6 地址翻译</h5><ul><li><p>地址翻译符号</p><p><img src="/image/image-20201026153155106.png" alt="image-20201026153155106"></p></li><li><p>MMU利用虚拟地址包含的VPN寻找PTE，将页表条目中的PPN和VPO串联起来就得到响应的物理地址(因为vp和pp都是P字节，所以物理页和虚拟页的偏移量相同)</p><p><img src="/image/image-20201026153233283.png" alt="image-20201026153233283"></p></li></ul><p>当页面命中时，CPU硬件执行的步骤：</p><ol><li>处理器生成一个虚拟地址，并把它传送给MMU。</li><li>MMU生成PTE地址，并从高速缓存/主存请求得到它。</li><li>高速缓存/主存向MMU返回PTE。</li><li>MMU构造物理地址，并把它传给告诉缓存/主存。</li><li>高速缓存/主存返回所请求的数据字给处理器。</li></ol><p><img src="/image/image-20201020145055727.png" alt="image-20201020145055727"></p><p>缺页，CPU硬件执行步骤：</p><ol><li>处理器生成一个虚拟地址，并把它传送给MMU。</li><li>MMU生成PTE地址，并从高速缓存/主存请求得到它。</li><li>高速缓存/主存向MMU返回PTE。</li><li>PTE中的有效为是0，所以MMU触发了一次异常，传递CPU中的控制到操作系统内核中的缺页异常处理程序。</li><li>缺页处理程序确定出物理内存中的牺牲页，如果这个页面修改了则把它换出到磁盘。</li><li>缺页处理程序页面调入新的页面，并更新内存中的PTE。</li><li>缺页处理程序返回到原来的进程，再次执行导致缺页的指令，CPU将引起缺页的虚拟地址重新发送给MMU。</li></ol><p><img src="/image/image-20201020145822292.png" alt="image-20201020145822292"></p><ul><li><p>给定一个32位的虚拟地址空间和一个24位的物理地址，对于下列页面大小P。</p><table><thead><tr><th align="center">P</th><th align="center">VPN位数</th><th align="center">VPO位数</th><th align="center">PPN位数</th><th align="center">PPO位数</th></tr></thead><tbody><tr><td align="center">1KB (2^p=1024,p=10)</td><td align="center">22</td><td align="center">10</td><td align="center">14</td><td align="center">10</td></tr><tr><td align="center">2KB(2^p=2048,p=11)</td><td align="center">21</td><td align="center">11</td><td align="center">13</td><td align="center">11</td></tr><tr><td align="center">4KB(2^p=4096,p=12)</td><td align="center">20</td><td align="center">12</td><td align="center">12</td><td align="center">12</td></tr><tr><td align="center">8KB(2^p=8192,p=13)</td><td align="center">19</td><td align="center">13</td><td align="center">11</td><td align="center">13</td></tr></tbody></table><p>(常说的32位和64位操作系统，指的就是页表条目PTE的长度。)</p></li></ul><h6 id="1、多级页表"><a href="#1、多级页表" class="headerlink" title="1、多级页表"></a>1、多级页表</h6><p>到目前为止，一直假设系统只用一个单独的页表进行地址翻译。但是如果我们有一个32位地址空间、4kb的页和一个4字节的PTE，那么即使应用所引用的只是虚拟空间中很小的一部分，也总是需要4MB的页表驻留内存。(32位地址空间，总共有2^32个内存地址，一个虚拟页的大小是4KB，那么总共有 2^32/2^12=2^20 个内存页，一个内存页需要一个PTE，一个PTE是4字节，那么页表总共大小是：2^20 * 2^12 = 2^32字节 = 2^32 / 2^10 KB = 2^12 / 2^10 MB = 4MB。在没有优化的情况下，一张独立页表在内存中要占用4M物理内存)</p><hr><h6 id="计算机中的字，双字以及存储"><a href="#计算机中的字，双字以及存储" class="headerlink" title="计算机中的字，双字以及存储"></a>计算机中的字，双字以及存储</h6><ul><li>字节(byte)：一个字节由8位二进制数组成</li><li>字(word)：</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第九章：虚拟内存&quot;&gt;&lt;a href=&quot;#第九章：虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;第九章：虚拟内存&quot;&gt;&lt;/a&gt;第九章：虚拟内存&lt;/h3&gt;&lt;h5 id=&quot;9-1-物理和虚拟寻址&quot;&gt;&lt;a href=&quot;#9-1-物理和虚拟寻址&quot; class</summary>
      
    
    
    
    <category term="操作系统" scheme="https://duwei19961021.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="内存" scheme="https://duwei19961021.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>nginx缓冲区</title>
    <link href="https://duwei19961021.github.io/2021/03/18/ngx_buf/"/>
    <id>https://duwei19961021.github.io/2021/03/18/ngx_buf/</id>
    <published>2021-03-18T07:14:01.000Z</published>
    <updated>2021-03-31T03:42:05.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx缓冲区"><a href="#nginx缓冲区" class="headerlink" title="nginx缓冲区"></a>nginx缓冲区</h4><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> ngx_buf_s <span class="token punctuation">{</span>    u_char          <span class="token operator">*</span>pos<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/* 待处理数据的开始标记  */</span>    u_char          <span class="token operator">*</span>last<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* 待处理数据的结尾标记 */</span>    off_t            file_pos<span class="token punctuation">;</span>    off_t            file_last<span class="token punctuation">;</span>    u_char          <span class="token operator">*</span>start<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* start of buffer */</span>    u_char          <span class="token operator">*</span>end<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/* end of buffer */</span>    ngx_buf_tag_t    tag<span class="token punctuation">;</span>    ngx_file_t      <span class="token operator">*</span>file<span class="token punctuation">;</span>    ngx_buf_t       <span class="token operator">*</span>shadow<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the buf's content could be changed */</span>    <span class="token keyword">unsigned</span>         temporary<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 标志位，为1时，内存可修改 */</span>    <span class="token comment" spellcheck="true">/*     * the buf's content is in a memory cache or in a read only memory     * and must not be changed     */</span>    <span class="token keyword">unsigned</span>         memory<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the buf's content is mmap()ed and must not be changed */</span>    <span class="token keyword">unsigned</span>         mmap<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>         recycled<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>         in_file<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>         flush<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>         sync<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>         last_buf<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>         last_in_chain<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>         last_shadow<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>         temp_file<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* STUB */</span> <span class="token keyword">int</span>   num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx缓冲区&quot;&gt;&lt;a href=&quot;#nginx缓冲区&quot; class=&quot;headerlink&quot; title=&quot;nginx缓冲区&quot;&gt;&lt;/a&gt;nginx缓冲区&lt;/h4&gt;&lt;h5 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="缓冲区" scheme="https://duwei19961021.github.io/tags/%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>nginx内存池</title>
    <link href="https://duwei19961021.github.io/2021/03/18/ngx_mem_pool/"/>
    <id>https://duwei19961021.github.io/2021/03/18/ngx_mem_pool/</id>
    <published>2021-03-18T07:14:01.000Z</published>
    <updated>2021-03-27T14:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx内存池"><a href="#nginx内存池" class="headerlink" title="nginx内存池"></a>nginx内存池</h4><h5 id=""><a href="#" class="headerlink" title=""></a><img src="http://img.3amupupup.online/ngx_mem_pool_struct_3.png" alt="内存池结构"></h5><p><img src="https://img.3amupupup.online/ngx_mem_pool_5.png" alt="内存池结构"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    u_char               <span class="token operator">*</span>last<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 内存池中未使用内存的开始节点地址 */</span>    u_char               <span class="token operator">*</span>end<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 内存池的结束地址 */</span>    ngx_pool_t           <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 指向下一个内存池,组成链表 */</span>    ngx_uint_t            failed<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 失败次数 */</span><span class="token punctuation">}</span> ngx_pool_data_t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// typedef struct ngx_pool_s ngx_pool_t;</span><span class="token keyword">struct</span> ngx_pool_s <span class="token punctuation">{</span>    ngx_pool_data_t       d<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 内存池的数据区域(小块数据) */</span>    size_t                max<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 最大每次可分配内存,大于这个值将被添加到大块数据链表上,小于这个值将被添加到小块数据链表上 */</span>    ngx_pool_t           <span class="token operator">*</span>current<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 指向当前的内存池指针地址。ngx_pool_t链表上最后一个缓存池结构 */</span>    ngx_chain_t          <span class="token operator">*</span>chain<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 缓冲区链表 */</span>    ngx_pool_large_t     <span class="token operator">*</span>large<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 存储大块数据的链表 */</span>    ngx_pool_cleanup_t   <span class="token operator">*</span>cleanup<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 可自定义回调函数，清除内存块分配的内存 */</span>    ngx_log_t            <span class="token operator">*</span>log<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 日志 */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// typedef struct ngx_pool_cleanup_s  ngx_pool_cleanup_t;</span><span class="token keyword">struct</span> ngx_pool_cleanup_s <span class="token punctuation">{</span>    ngx_pool_cleanup_pt   handler<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 清理的回调函数 */</span>    <span class="token keyword">void</span>                 <span class="token operator">*</span>data<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 指向存储的数据地址 */</span>    ngx_pool_cleanup_t   <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 下一个ngx_pool_cleanup_t */</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><ol><li><p>ngx_calloc: 分配内存并初始化，底层调用的是malloc和memset。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_calloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> ngx_log_t <span class="token operator">*</span>log<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span>  <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">ngx_alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_memzero</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              ngx_memzero是个宏函数，底层实际调用memset，src/core/ngx_string.h              #define ngx_memzero(buf, n)       (void) memset(buf, 0, n)          */</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li><p>ngx_alloc: 分配内存，底层调用的是malloc。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>   <span class="token function">ngx_alloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> ngx_log_t <span class="token operator">*</span>log<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">void</span>  <span class="token operator">*</span>p<span class="token punctuation">;</span>       p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*              底层去调用malloc分配内存         */</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_EMERG<span class="token punctuation">,</span> log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span>                         <span class="token string">"malloc(%uz) failed"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_ALLOC<span class="token punctuation">,</span> log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"malloc: %p:%uz"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> p<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre></li><li><p>ngx_create_pool: 创建内存池结点</p><pre class=" language-c"><code class="language-c">ngx_pool_t <span class="token operator">*</span><span class="token function">ngx_create_pool</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> ngx_log_t <span class="token operator">*</span>log<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_pool_t  <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">ngx_memalign</span><span class="token punctuation">(</span>NGX_POOL_ALIGNMENT<span class="token punctuation">,</span> size<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          #define ngx_memalign(alignment, size, log)  ngx_alloc(size, log)，          而ngx_alloc实际上是去调用malloc      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> p <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_pool_t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          p是通过malloc申请得到的内存的首地址，前sizeof(ngx_pool_t)字节的内存要留给内存池的管理结构(我也叫他控制中心)，          控制中心之后的内存是给申请者使用的。last是申请者能够使用内存的起始位置，end是结束位置(由数据结构得知)      */</span>    p<span class="token operator">-></span>d<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> p <span class="token operator">+</span> size<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          end指向申请得到的内存的末尾位置，          p是首地址，加上size就是结束地址即end的指向位置，          内存的申请者总共申请了size个字节的内存，能够使用的内存为：size - sizeof(ngx_pool_t)      */</span>    p<span class="token operator">-></span>d<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          内存池通过指针相连，组成一个链表，下一个结点在创建时应当指向NULL      */</span>    p<span class="token operator">-></span>d<span class="token punctuation">.</span>failed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_pool_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>max <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> NGX_MAX_ALLOC_FROM_POOL<span class="token punctuation">)</span> <span class="token operator">?</span> size <span class="token punctuation">:</span> NGX_MAX_ALLOC_FROM_POOL<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*     NGX_MAX_ALLOC_FROM_POOL should be (ngx_pagesize - 1), i.e. 4095 on x86.     On Windows NT it decreases a number of locked pages in a kernel.     max取size和操作系统弄内存页二者中较小的值     */</span>    p<span class="token operator">-></span>current <span class="token operator">=</span> p<span class="token punctuation">;</span>    p<span class="token operator">-></span>chain <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>large <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>cleanup <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>log <span class="token operator">=</span> log<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          只有缓存池的父节点，才会用到这几个成员  ，子节点只挂载在p->d.next,并且只负责p->d的数据内容      */</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_destroy_pool: 销毁内存池结点</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ngx_destroy_pool</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_pool_t          <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>    ngx_pool_large_t    <span class="token operator">*</span>l<span class="token punctuation">;</span>    ngx_pool_cleanup_t  <span class="token operator">*</span>c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> pool<span class="token operator">-></span>cleanup<span class="token punctuation">;</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> c<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_ALLOC<span class="token punctuation">,</span> pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                           <span class="token string">"run cleanup: %p"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token operator">-></span><span class="token function">handler</span><span class="token punctuation">(</span>c<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*          只有父结点才有cleanup链表，          cleanup链表的结点结构有三个成员：清理函数handler、指向存储数据的data、指向下一个结点的next          这里遍历cleanup链表，调用handler清理data      */</span><span class="token macro property">#<span class="token directive keyword">if</span> (NGX_DEBUG)    </span><span class="token comment" spellcheck="true">// 编译debug级别，如果为true，会打印日志</span>    <span class="token comment" spellcheck="true">/*     * we could allocate the pool->log from this pool     * so we cannot use this log while free()ing the pool     */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> pool<span class="token operator">-></span>large<span class="token punctuation">;</span> l<span class="token punctuation">;</span> l <span class="token operator">=</span> l<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_ALLOC<span class="token punctuation">,</span> pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"free: %p"</span><span class="token punctuation">,</span> l<span class="token operator">-></span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> pool<span class="token punctuation">,</span> n <span class="token operator">=</span> pool<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* void */</span><span class="token punctuation">;</span> p <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> n<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_ALLOC<span class="token punctuation">,</span> pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                       <span class="token string">"free: %p, unused: %uz"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>end <span class="token operator">-</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> pool<span class="token operator">-></span>large<span class="token punctuation">;</span> l<span class="token punctuation">;</span> l <span class="token operator">=</span> l<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>alloc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_free</span><span class="token punctuation">(</span>l<span class="token operator">-></span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*          只有父结点才有large链表，          遍历large(大块数据链表)链表，释放alloc指针指向的存储数据的内存          #define ngx_free          free          由此可知ngx_free是个宏，底层调用的还是free，这里直接将大块数据内存还给了操作系统      */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> pool<span class="token punctuation">,</span> n <span class="token operator">=</span> pool<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* void */</span><span class="token punctuation">;</span> p <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> n<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              至此，父结点上的large链表以及cleanup链表都被清理了，然后循环清理内存池结点，              小块数据内存是分配在内存池结点上的，和其控制中心(ngx_pool_t)是连续的，              释放时直接释放当前结点就行了          */</span>          <span class="token comment" spellcheck="true">/*              至此清理工作结束。              但是有个小疑问：chain(缓冲区)链表为啥没有被清理？          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_reset_pool: 清理内存池结点</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ngx_reset_pool</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_pool_t        <span class="token operator">*</span>p<span class="token punctuation">;</span>    ngx_pool_large_t  <span class="token operator">*</span>l<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> pool<span class="token operator">-></span>large<span class="token punctuation">;</span> l<span class="token punctuation">;</span> l <span class="token operator">=</span> l<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>alloc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_free</span><span class="token punctuation">(</span>l<span class="token operator">-></span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*          清理large链表      */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> pool<span class="token punctuation">;</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> p <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_pool_t<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>d<span class="token punctuation">.</span>failed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*          重置小数据块区域的内存，注意这里是修改last的指向，将last重新指向起始位置，          内存并没有被擦除，因为是小数据块内存，这里没有将其归还给操作系统，          目的是避免频繁的malloc和free产生内存碎片问题，频繁调用这两个函数也会给          操作系统带来额外的消耗。      */</span>    pool<span class="token operator">-></span>current <span class="token operator">=</span> pool<span class="token punctuation">;</span>    pool<span class="token operator">-></span>chain <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pool<span class="token operator">-></span>large <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_palloc: 向内存池申请内存的函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_palloc</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> !(NGX_DEBUG_PALLOC)</span>      <span class="token comment" spellcheck="true">/*          这里是个条件编译，如果没开启ngx palloc debug就会根据size决定调用ngx_palloc_small还是                              ngx_palloc_large，如果开启了debug则一律调用ngx_palloc_large      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> pool<span class="token operator">-></span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ngx_palloc_small</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token function">ngx_palloc_large</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_palloc_small: 分配小块数据内存的函数，调用这个函数所分配的内存都是在内存池结点上</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> ngx_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_palloc_small</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> ngx_uint_t align<span class="token punctuation">)</span><span class="token punctuation">{</span>    u_char      <span class="token operator">*</span>m<span class="token punctuation">;</span>    ngx_pool_t  <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> pool<span class="token operator">-></span>current<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        m <span class="token operator">=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>last<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              m保存了last的指向，last &lt;-> end 之间是未被使用的内存          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>align<span class="token punctuation">)</span> <span class="token punctuation">{</span>            m <span class="token operator">=</span> <span class="token function">ngx_align_ptr</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> NGX_ALIGNMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/*              align，暂时不懂是啥意思          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>d<span class="token punctuation">.</span>end <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">=</span> m <span class="token operator">+</span> size<span class="token punctuation">;</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/*              如果end到m(即last)之间的字节数大于size，那么这个内存池结点上的足够申请者使用，              则将last后移size个字节并返回之前last的指向的内存的地址供调用者使用          */</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ngx_palloc_block</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          走到这里说明内存池的所有结点上都没有足够的空间分配出去，          此时则调用ngx_palloc_block新开一个内存池的节点(扩容)      */</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_palloc_large: 分配大块数据内存的函数，调用这个函数所分配的内存都是在large链表上</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_palloc_large</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span>              <span class="token operator">*</span>p<span class="token punctuation">;</span>    ngx_uint_t         n<span class="token punctuation">;</span>    ngx_pool_large_t  <span class="token operator">*</span>large<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">ngx_alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> pool<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          底层调用malloc分配内存      */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>large <span class="token operator">=</span> pool<span class="token operator">-></span>large<span class="token punctuation">;</span> large<span class="token punctuation">;</span> large <span class="token operator">=</span> large<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>large<span class="token operator">-></span>alloc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            large<span class="token operator">-></span>alloc <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/*              遍历large链表，寻找空闲结点，找到了则将large链表上的空闲结点的alloc指向刚刚申请的内存p          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/*              如果找了三次还没找到那就不找了，避免链表过长时查找效率低          */</span>    <span class="token punctuation">}</span>    large <span class="token operator">=</span> <span class="token function">ngx_palloc_small</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_pool_large_t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          在内存池结点的小块数据内存上给large的控制中心结构ngx_pool_large_t分配一块内存      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>large <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              如果large分配失败p是要释放的，避免内存泄露          */</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    large<span class="token operator">-></span>alloc <span class="token operator">=</span> p<span class="token punctuation">;</span>    large<span class="token operator">-></span>next <span class="token operator">=</span> pool<span class="token operator">-></span>large<span class="token punctuation">;</span>    pool<span class="token operator">-></span>large <span class="token operator">=</span> large<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          新开的large结点变为large链表的头结点。      */</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_palloc_block: 添加新的内存池结点</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_palloc_block</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    u_char      <span class="token operator">*</span>m<span class="token punctuation">;</span>    size_t       psize<span class="token punctuation">;</span>    ngx_pool_t  <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    psize <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token punctuation">(</span>pool<span class="token operator">-></span>d<span class="token punctuation">.</span>end <span class="token operator">-</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> pool<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          要新创建的内存池的结点的size是根据头结点的size创建的      */</span>    m <span class="token operator">=</span> <span class="token function">ngx_memalign</span><span class="token punctuation">(</span>NGX_POOL_ALIGNMENT<span class="token punctuation">,</span> psize<span class="token punctuation">,</span> pool<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          申请psize大小的内存块      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    new <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span><span class="token punctuation">)</span> m<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          类型转换      */</span>    new<span class="token operator">-></span>d<span class="token punctuation">.</span>end <span class="token operator">=</span> m <span class="token operator">+</span> psize<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          end指向末尾      */</span>    new<span class="token operator">-></span>d<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          下一个结点指针 指向NULL避免野指针      */</span>    new<span class="token operator">-></span>d<span class="token punctuation">.</span>failed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_pool_data_t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          前sizeof(ngx_pool_data_t)个字节留给ngx_pool_data_t结构使用，          这里用的比较巧妙，细品细品，此时有点惊叹设计者的做法。          因为创建的是子节点，所以max、current指针、缓冲区链表指针、large链表指针、          cleanup链表指针，这几个成员所占的内存都可以分配出去给调用者使用(子结点用不到这几个成员)，          避免了空间浪费。      */</span>    m <span class="token operator">=</span> <span class="token function">ngx_align_ptr</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> NGX_ALIGNMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    new<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">=</span> m <span class="token operator">+</span> size<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          移动last size个字节，标识这段内存已经被分配出去了      */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> pool<span class="token operator">-></span>current<span class="token punctuation">;</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>d<span class="token punctuation">.</span>failed<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pool<span class="token operator">-></span>current <span class="token operator">=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*          每遍历一个结点failed++，当failed超过了4时，current会指向新子结点，          这么做可以避免遍历整个链表(如果链表足够长，遍历一次效率比较低)      */</span>    p<span class="token operator">-></span>d<span class="token punctuation">.</span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_pnalloc: 开辟内存的函数，根据size去调用不同的函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_pnalloc</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> !(NGX_DEBUG_PALLOC)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> pool<span class="token operator">-></span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ngx_palloc_small</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token function">ngx_palloc_large</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_pcalloc: 申请一块内存并初始化为0值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_pcalloc</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_memzero</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_pmemalign:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_pmemalign</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> size_t alignment<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span>              <span class="token operator">*</span>p<span class="token punctuation">;</span>    ngx_pool_large_t  <span class="token operator">*</span>large<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">ngx_memalign</span><span class="token punctuation">(</span>alignment<span class="token punctuation">,</span> size<span class="token punctuation">,</span> pool<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    large <span class="token operator">=</span> <span class="token function">ngx_palloc_small</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_pool_large_t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>large <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    large<span class="token operator">-></span>alloc <span class="token operator">=</span> p<span class="token punctuation">;</span>    large<span class="token operator">-></span>next <span class="token operator">=</span> pool<span class="token operator">-></span>large<span class="token punctuation">;</span>    pool<span class="token operator">-></span>large <span class="token operator">=</span> large<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_pfree: 释放large链表上的内存p</p><pre class=" language-c"><code class="language-c">ngx_int_t<span class="token function">ngx_pfree</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_pool_large_t  <span class="token operator">*</span>l<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> pool<span class="token operator">-></span>large<span class="token punctuation">;</span> l<span class="token punctuation">;</span> l <span class="token operator">=</span> l<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> l<span class="token operator">-></span>alloc<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">/*                  遍历large链表，查找p所在的节点，如果large链表足够长时，这个函数的效率偏低              */</span>            <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_ALLOC<span class="token punctuation">,</span> pool<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                           <span class="token string">"free: %p"</span><span class="token punctuation">,</span> l<span class="token operator">-></span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ngx_free</span><span class="token punctuation">(</span>l<span class="token operator">-></span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*                  实际调用的还是free              */</span>            l<span class="token operator">-></span>alloc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> NGX_DECLINED<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_pool_cleanup_add: cleanup机制设计的比较灵活，pool-&gt;cleanup是一个链表，每个ngx_pool_cleanup_t的数据结构上保存这指向的内存地址和回调清理函数，通过这个机制可以很方便的管理一些特殊的内存类型，比如文件描述符、自定义类型。</p><pre class=" language-c"><code class="language-c">ngx_pool_cleanup_t <span class="token operator">*</span><span class="token function">ngx_pool_cleanup_add</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>p<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_pool_cleanup_t  <span class="token operator">*</span>c<span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_pool_cleanup_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          给cleanup的控制中心结构分配内存，分配在内存池小块数据内存上的。      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        c<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*          根据size决定是否分配数据区，数据区分配的内存在哪据size的大小而定，          可能在小数据块内存上也可能在large链表上      */</span>    c<span class="token operator">-></span>handler <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    c<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>cleanup<span class="token punctuation">;</span>    p<span class="token operator">-></span>cleanup <span class="token operator">=</span> c<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          头插进cleanup链表      */</span>    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_ALLOC<span class="token punctuation">,</span> p<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"add cleanup: %p"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>ngx_pool_run_cleanup_file: 清理cleanup链表上的文件描述符fd，时间复杂度O(n)，链表过长时效率偏低</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ngx_pool_run_cleanup_file</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>p<span class="token punctuation">,</span> ngx_fd_t fd<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_pool_cleanup_t       <span class="token operator">*</span>c<span class="token punctuation">;</span>    ngx_pool_cleanup_file_t  <span class="token operator">*</span>cf<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> p<span class="token operator">-></span>cleanup<span class="token punctuation">;</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> c<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>handler <span class="token operator">==</span> ngx_pool_cleanup_file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cf <span class="token operator">=</span> c<span class="token operator">-></span>data<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cf<span class="token operator">-></span>fd <span class="token operator">==</span> fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>                c<span class="token operator">-></span><span class="token function">handler</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token operator">-></span>handler <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>ngx_pool_cleanup_file: 关闭文件回调函数</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ngx_pool_cleanup_file</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_pool_cleanup_file_t  <span class="token operator">*</span>c <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token function">ngx_log_debug1</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_ALLOC<span class="token punctuation">,</span> c<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"file cleanup: fd:%d"</span><span class="token punctuation">,</span>                   c<span class="token operator">-></span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_close_file</span><span class="token punctuation">(</span>c<span class="token operator">-></span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_FILE_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> c<span class="token operator">-></span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span>                      ngx_close_file_n <span class="token string">" \"%s\" failed"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_pool_delete_file: 删除文件回调函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ngx_pool_delete_file</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_pool_cleanup_file_t  <span class="token operator">*</span>c <span class="token operator">=</span> data<span class="token punctuation">;</span>    ngx_err_t  err<span class="token punctuation">;</span>    <span class="token function">ngx_log_debug2</span><span class="token punctuation">(</span>NGX_LOG_DEBUG_ALLOC<span class="token punctuation">,</span> c<span class="token operator">-></span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"file cleanup: fd:%d %s"</span><span class="token punctuation">,</span>                   c<span class="token operator">-></span>fd<span class="token punctuation">,</span> c<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_delete_file</span><span class="token punctuation">(</span>c<span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_FILE_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        err <span class="token operator">=</span> ngx_errno<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NGX_ENOENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_CRIT<span class="token punctuation">,</span> c<span class="token operator">-></span>log<span class="token punctuation">,</span> err<span class="token punctuation">,</span>                          ngx_delete_file_n <span class="token string">" \"%s\" failed"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_close_file</span><span class="token punctuation">(</span>c<span class="token operator">-></span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> NGX_FILE_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ngx_log_error</span><span class="token punctuation">(</span>NGX_LOG_ALERT<span class="token punctuation">,</span> c<span class="token operator">-></span>log<span class="token punctuation">,</span> ngx_errno<span class="token punctuation">,</span>                      ngx_close_file_n <span class="token string">" \"%s\" failed"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol><li>内存池的所有结点上，只有父结点才存在cleanup链表、large链表、buf链表，子节点上只有ngx_pool_data_t结构(pool-&gt;d)和用户内存区域。如果子节点上也能存在着三个链表，说实话结构会变得异常复杂。</li><li>申请小数据内存(size &lt; pool-&gt;max)时不一定是向操作系统申请内存，会先遍历内存池的结点，判断其data区是否能满足分配的需求，能满足则在其结点上分配(移动last的指向)。如果没有满足的结点，则新建一个结点并将其假如内存池链表。</li><li>申请大数据内存(size &gt;= poo-&gt;max)，large的控制中心结构ngx_pool_large_t所需要的内存是在ngx_pool_data_t管理的区域上分配的，size大小的内存是直接向操作系统申请的(malloc)，然后用alloc指针保存分配的内存的地址。</li><li>cleanup设计灵活，能自定义清理工作，便于我们在内存池申请自定义或者特殊类型的内存，申请的数据区域存在于large链表或内存池结点的小块数据区域。</li></ol><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><ol><li><p>关于current指针</p><p>current在内存池初始化时时指向父节点本身的，但是随着内存的不断分配出去其指向会不断的从small链表的头结点向尾结点方向移动。在分配小块内存时，会遍历small链表的结点，然后判断结点上是否有足够的空间满足申请者的需求，如果有则在已存在的结点上分配内存，如果没有则添加新的结点并在新结点上分配内存。随着内存不断的分配，结点上的内存空间可能会被分配完或者接近分配完(只剩下小块的内存，无法满足申请者的需求，类似内存碎片)，因此就要去扩容了，随着结点个数不断增加链表越来越长，遍历结点的效率会越来越低，而且链表中很多结点上的空间可能已经被分配完了，重复的遍历时没有任何意义的。nginx巧妙的借助current指针来解决这个问题，</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_palloc_block</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    u_char      <span class="token operator">*</span>m<span class="token punctuation">;</span>    size_t       psize<span class="token punctuation">;</span>    ngx_pool_t  <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    psize <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token punctuation">(</span>pool<span class="token operator">-></span>d<span class="token punctuation">.</span>end <span class="token operator">-</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> pool<span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">ngx_memalign</span><span class="token punctuation">(</span>NGX_POOL_ALIGNMENT<span class="token punctuation">,</span> psize<span class="token punctuation">,</span> pool<span class="token operator">-></span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    new <span class="token operator">=</span> <span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span><span class="token punctuation">)</span> m<span class="token punctuation">;</span>    new<span class="token operator">-></span>d<span class="token punctuation">.</span>end <span class="token operator">=</span> m <span class="token operator">+</span> psize<span class="token punctuation">;</span>    new<span class="token operator">-></span>d<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    new<span class="token operator">-></span>d<span class="token punctuation">.</span>failed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_pool_data_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">ngx_align_ptr</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> NGX_ALIGNMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    new<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">=</span> m <span class="token operator">+</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重点部分</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> pool<span class="token operator">-></span>current<span class="token punctuation">;</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>d<span class="token punctuation">.</span>failed<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pool<span class="token operator">-></span>current <span class="token operator">=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    p<span class="token operator">-></span>d<span class="token punctuation">.</span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这部分代码是nginx扩容small链表的逻辑，关于current指针的部分我已经标出。根据代码得知：在链表上已存在的结点上的空间都无法满足分配内存的需求时就会新建一个结点然后分配内存，新结点采用的是尾插，因此要遍历链表拿到尾结点，但是如果链表过长就会导致效率低下。因此每增加一个结点时，就会从current指向的结点开始遍历(最开始时指向父节点本身的)，对其结点的failed字段进行判断(还要增加1，因为扩容就意味着此前的所有结点不能满足分配需求)，如果某个结点四次以上不满足分配内存的需求，就将current指向这个结点的下一个结点(找你这个结点要了四次内存都要不到，我就认为你没有可分配的内存了，下次再找内存池要内存，直接跳过你，从你后面的结点开始要内存)。这样就可以避免每次都遍历整个链表以及其中空间已经分配完的结点。</p><p><img src="source/image/ngx_current_1-20210327225636357.png" alt="内存池结构"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx内存池&quot;&gt;&lt;a href=&quot;#nginx内存池&quot; class=&quot;headerlink&quot; title=&quot;nginx内存池&quot;&gt;&lt;/a&gt;nginx内存池&lt;/h4&gt;&lt;h5 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;</summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="mem_pool" scheme="https://duwei19961021.github.io/tags/mem-pool/"/>
    
  </entry>
  
  <entry>
    <title>kubectl</title>
    <link href="https://duwei19961021.github.io/2021/03/18/kubectl/"/>
    <id>https://duwei19961021.github.io/2021/03/18/kubectl/</id>
    <published>2021-03-18T03:09:52.057Z</published>
    <updated>2021-05-06T06:18:56.562Z</updated>
    
    <content type="html"><![CDATA[<h4 id="kubectl命令技巧"><a href="#kubectl命令技巧" class="headerlink" title="kubectl命令技巧:"></a>kubectl命令技巧:</h4><h6 id="平滑更新部署（滚动更新）。相当于阿里云的容器服务里的触发器，触发更新。"><a href="#平滑更新部署（滚动更新）。相当于阿里云的容器服务里的触发器，触发更新。" class="headerlink" title="平滑更新部署（滚动更新）。相当于阿里云的容器服务里的触发器，触发更新。"></a>平滑更新部署（滚动更新）。相当于阿里云的容器服务里的触发器，触发更新。</h6><pre class=" language-shell"><code class="language-shell">kubectl -n vk rollout restart deployment workerman</code></pre><h4 id="基于header头的ingress流量转发"><a href="#基于header头的ingress流量转发" class="headerlink" title="基于header头的ingress流量转发"></a>基于header头的ingress流量转发</h4><p>通过设置ingress配置的注解：匹配请求的header（service-match），version: 3.6.* 则转发值service: abroadapitestservice，否则转发到leshuapiservice。在此基础上还可以设置权重（service-weight），在包含匹配header头的请求中，一定比例的请求转发至两个版本的service。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leshuingress  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">kubernetes.io/ingress.class</span><span class="token punctuation">:</span> <span class="token string">"nginx"</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/service-match</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        abroadapitestservice: header("version", /^3.6.*$/)</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/service-weight</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        abroadapitestservice: 50, leshuapiservice: 50</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> hk.ad6755.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span>        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> leshuapiservice          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span>        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> abroadapitestservice          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">tls</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> hk.ad6755.com    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> leshuingress<span class="token punctuation">-</span>secret0</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;kubectl命令技巧&quot;&gt;&lt;a href=&quot;#kubectl命令技巧&quot; class=&quot;headerlink&quot; title=&quot;kubectl命令技巧:&quot;&gt;&lt;/a&gt;kubectl命令技巧:&lt;/h4&gt;&lt;h6 id=&quot;平滑更新部署（滚动更新）。相当于阿里云的容器服务里的触</summary>
      
    
    
    
    <category term="k8s" scheme="https://duwei19961021.github.io/categories/k8s/"/>
    
    
    <category term="kubectl" scheme="https://duwei19961021.github.io/tags/kubectl/"/>
    
  </entry>
  
  <entry>
    <title>进程</title>
    <link href="https://duwei19961021.github.io/2021/03/18/%E8%BF%9B%E7%A8%8B/"/>
    <id>https://duwei19961021.github.io/2021/03/18/%E8%BF%9B%E7%A8%8B/</id>
    <published>2021-03-18T03:09:00.000Z</published>
    <updated>2021-05-05T03:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>定义：进程是程序执行时的一个实例。从内核角度来看：进程是承担操作系统所分配的资源(cpu时间、内存等)的实体。</p><h4 id="进程描述符"><a href="#进程描述符" class="headerlink" title="进程描述符"></a>进程描述符</h4><h5 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h5><ol><li><p>可运行状态（TASK_RUNNING）</p><p>进程要么在cpu上执行，要么准备执行</p></li><li><p>可中断等待状态（TASK_INTERRUPTIBLE）</p><p>进程被挂起（睡眠），直到某个条件变为真。硬件中断、传递一个信号都可以作为唤醒条件。</p></li><li><p>不可中断等待状态（TASK_UNINTERRUPTIBLE）</p><p>与可中断等待状态类似，但是存在一个例外：把信号传递到睡眠进程无法修改它的状态。</p></li><li><p>暂停状态（TASK_STOPPED）</p><p>进程的执行被暂停。当进程收到SIGSTOP、SIGTSTP、SOGTTIN、SIGTTOU等信号后进入暂停状态。</p></li><li><p>跟踪状态（TASK_TRACED）</p></li><li><p>僵死状态（EXIT_ZOMBIE）</p><p>也成僵尸状态。进程执行已终止，但是由于父进程并未调用wait或waitpid系统调用来收集死亡进程的相关信息，内核不能丢弃包含在死进程描述符中的数据，因为父进程可能还会用到。</p></li><li><p>僵死撤销状态（EXIT_DEAD）</p><p>进程的最终状态。父进程调用wait或waitpid等系统调用收集死进程的信息之后，由操作系统删除死进程的数据且释放死进程的相关资源。</p></li></ol><h5 id="进程链表（双向链表）"><a href="#进程链表（双向链表）" class="headerlink" title="进程链表（双向链表）"></a>进程链表（双向链表）</h5><p>进程链表把所有的进程描述符链接起来。每个task_struct结构都包含一个list_head类型的tasks字段，这个类型的prev和next字段分别指向前面和后面的task_struct元素。</p><p>进程链表的头是init_task，即0号进程。</p><p><img src="https://img.3amupupup.online/task_struct-list.png" alt="进程链表"></p><h5 id="TASK-RUNNING状态的进程链表"><a href="#TASK-RUNNING状态的进程链表" class="headerlink" title="TASK_RUNNING状态的进程链表"></a>TASK_RUNNING状态的进程链表</h5><p>当内核寻找一个新进程在CPU上运行时，必须只考虑可运行进程（TASK_RUNNING状态的进程）。</p><p>提高调度程序运行速度的诀窍时建立多个可运行进程链表，每种进程优先级对应一个不同的链表。</p><h5 id="进程资源限制"><a href="#进程资源限制" class="headerlink" title="进程资源限制"></a>进程资源限制</h5><p>每个进程都有一组相关的资源限制，限制指定了进程能够使用的系统资源数量。这些限制避免用户过度使用系统资源。</p><ul><li>RLIMIT_AS：进程地址空间的最大数（字节为单位）。当进程使用malloc或者相关函数扩大它的进程空间时，内核会检查这个值。</li><li>RLIMIT_CPU：进程使用cpu的最长时间（秒为单位），如果进程超过了这个限制，内核就向它发送一个SIGXCPU信号，如果不终止，则发送SIGKILL信号。</li><li>RLIMIT_DATA：堆大小的最大值。</li><li>RLIMIT_RSS：进程能够拥有的虚拟内存页的最大数量。</li><li>RLIMIT_STACK：进程栈的最大值。</li></ul><h4 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h4><p>为了控制进程的执行，内核必须有能力挂起正在cpu上执行的进程，并恢复以前挂起的某个进程的执行。</p><h5 id="硬件上下文"><a href="#硬件上下文" class="headerlink" title="硬件上下文"></a>硬件上下文</h5><p>每个进程拥有自己的地址空间，但是所有进程必须共享CPU寄存器。因此，在恢复一个进程执行之前，内核必须确保每个寄存器装入了挂起进程时的值。</p><p><strong>进程恢复执行前必须装入寄存器的一组数据称为硬件上下文</strong>。</p><p>进程切换只发生在内核态。在执行切换之前，用户态进程使用的所有寄存器内容都已保存在内核态堆栈上。</p><h5 id="任务状态段（Task-Stat-Segment：TSS）"><a href="#任务状态段（Task-Stat-Segment：TSS）" class="headerlink" title="任务状态段（Task Stat Segment：TSS）"></a>任务状态段（Task Stat Segment：TSS）</h5><p>用来存放硬件上下文。</p><blockquote><p>任务切换(硬切换)需要用到TSS来保存全部寄存器(2.4以前使用jmp来实现切换)，中断发生时也需要从TSS中读取ring0的esp0，那么，进程使用相同的TSS，任务切换怎么办？ 其实2.4以后不再使用硬切换，而是使用软切换，寄存器不再保存在TSS中了，而是保存在task-&gt;thread中，只用TSS的esp0和IO许可位图，所以，在进程切换过程中，只需要更新TSS中的esp0(内核态栈顶指针)、io bitmap。</p></blockquote><h5 id="thread字段"><a href="#thread字段" class="headerlink" title="thread字段"></a>thread字段</h5><p>每次硬件上下文切换时，被替换进程的上下文必须保存在别处。因为linux为每个处理器而不是每个进程使用tss。</p><p>因此每个进程描述符(task_struct)包含一个类型为thread_struct的thread字段，只要进程被切换出去，内核就把其硬件上下文保存在这个结构中。</p><h5 id="执行进程切换"><a href="#执行进程切换" class="headerlink" title="执行进程切换"></a>执行进程切换</h5><p>暂时略</p><h4 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h4><p>传统的unix操作系统：子进程复制父进程所拥有的的资源。效率低下，因为子进程要复制父进程的整个地址空间，且子进程几乎不必读和修改父进程所拥有的所有资源。</p><p>现代unix解决办法：</p><ul><li>写时复制。允许父子进程读相同的物理页，只要二者中有一个试图写一个物理页，内核就把这个页拷贝到另一个物理页，并将这个新的物理页分配给试图写的这个进程。</li><li>轻量级进程允许父子进程共享进程在内核的很多数据结构，如页表、打开的文件表等。</li><li>vfork()系统调用创建的进程能其父进程的内存地址空间。</li></ul><h4 id="fork"><a href="#fork" class="headerlink" title="fork:"></a>fork:</h4><p>fork()函数man手册：</p><ul><li>fork函数通过调用它的进程复制出一个新的进程(谁调用它复制谁，准确说是共享（比如代码段），对于私有数据采用写时复制机制)。</li><li>子进程的父进程id与父进程相同</li><li>子进程不继承父进程的内存锁</li><li>子进程的资源利用率和cpu使用时间计数会被置0。</li><li>子进程信号集为空(进程运行过程中收到的信号都会保存在一个集合中)。</li><li>子进程不继承父进程的信号量(引自百度百科：<a href="https://baike.baidu.com/item/信号量/9807501" target="_blank" rel="noopener">信号量</a>的值与相应资源的使用情况有关，当它的值大于 0 时，表示当前可用的资源数的数量；当它的值小于 0 时，其绝对值表示等待使用该资源的进程个数。信号量的值仅能由 PV 操作来改变。)</li><li>子进程不继承父进程的记录锁(The child does not inherit record locks from its parent (fcntl(2)))</li><li>子进程不继承父进程的计时器。</li></ul><p>fork调用的一个奇妙之处就是它仅仅被调用一次但是返回两次：</p><p><img src="http://img.3amupupup.online/do_fork.png" alt="do_fork"></p><p>为什么能返回两次：父进程创建子进程时，子进程共享父进程上下文，其中上下文包含程序计数器，它里面存储的是程序要执行的下一条cpu指令。程序执行到return之前，子进程已完成创建，并且通过wake_up_new_task函数将子进程添加到可调度队列中去了，此时子进程共享父进程的程序计数器，它们的程序计数器里的指令都指向tracehook_report_clone_complete函数，因此当子进程拿到cpu时，会从tracehook_report_clone_complete开始执行直至return。因此调用fork函数会有两次返回，一次是父进程中另一次是在子进程中。</p><p>函数，当子进程拿到cpu时，会执行程序计数器中的指令即return，所以fork函数会返回两次，一次是在父进程中，一次是在子进程中)。</p><p>它可能有三种不同的返回值：</p><ol><li>在父进程中，fork()返回新创建的子进程的pid。</li><li>在子进程中，fork()返回0。</li><li>如果fork()出现错误，返回一个负值。</li></ol><p>在fork函数执行完毕之后，如果创建进程成功，则出现两个进程，一个是子进程一个是父进程。在父进程中返回新创建子进程的pid，在子进程中返回0，可以通过fork返回值判断当前进程是父进程还是子进程。</p><p>另外根据程序的输出信息：父进程中的age结果为-1，子进程中的age为1，但是age的地址在父子进程中相同。父进程和子进程共享内存，但是不共享私有数据，使用了写时复制的机制。但是pid不同(现阶段认知)。内存地址相同但是值却不相同，这里需要学习一下操作系统-虚拟内存。这里解释下：虽然父子进程中的age的内存地址相同，但是他们彼此独立不可见，虚拟内存地址相同但是它们各自对应的物理地址不相同。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork() error.\n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        age<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I am child and my pid = %d, age = %d, addr = %p\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        age<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I am parent and my Pid=%d, age = %d, addr = %p\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 编译执行结果：</span><span class="token comment" spellcheck="true">// I am parent and my Pid=13086, age = -1, addr = 0x7fffc4e4dc98</span><span class="token comment" spellcheck="true">// I am child and my pid = 13087, age = 1, addr = 0x7fffc4e4dc98</span></code></pre><h4 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h4><h4 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid"></a>waitpid</h4><p>pid_t waitpid(pid_t pid, int *statusp, int options);</p><p>当options=0时，waitpid挂起调用进程的执行，直到它的等待集合中的一个进程终止；如果这个集合中的一个进程在刚调用的时刻就已经终止，那么waitpid立即返回。</p><ol><li><p>判定等待集合的成员</p><p>等待集合的成员是由 pid 参数决定的：</p><ol><li>pid &gt; 0 ，等待的集合就是一个单独的子进程，它的进程id等于pid。</li><li>pid = -1，那么等待就是父进程的所有子进程组成的集合中的任意子进程。</li><li>pid &lt; -1，回收进程组id为abs(pid)的一组进程，也就是所有子进程。</li><li>pid = 0，回收 与调用进程组id相同组内的子进程。</li></ol></li><li><p>修改默认行为</p><ul><li><p>0</p><p>与wait基本没有区别。</p></li><li><p>WNOHANG</p><p>如果等待集合中的任何子进程都没有终止，那么立即返回(返回值为0)，如果有子进程退出返回退出子进程的pid，失败返回-1(没有子进程或者子进程死光了)。在等待子进程终止的同时如果想做其它事情，这个选项很有用。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm child.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span>WNOHANG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child exit.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm parent.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用 WNOHANG 父进程不会等待自己成退出，所以执行效果是: 父进程、子进程执行各自的代码，父进程执行完毕之后退出，因为子进程sleep(3)，所以子进程在输出打印之后三秒钟退出。</span></code></pre></li><li><p>WUNTRACED</p><p>挂起调动进程的执行，直到等待集合中的一个进程变成已终止或者停止。返回的pid为导致返回的已终止或被停止子进程的pid。默认的行为是只返回已终止子进程。在想要检查已终止或已停止的子进程时，这个选项比较有用。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child run and pid = %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm child.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span>WUNTRACED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child exit who pid = %d.\n"</span><span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm parent.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// root$ ./a.out</span><span class="token comment" spellcheck="true">// child run and pid = 26334</span><span class="token comment" spellcheck="true">// I'm child.</span><span class="token comment" spellcheck="true">// child exit who pid = 26334.</span><span class="token comment" spellcheck="true">// I'm parent.</span></code></pre></li><li><p>WCONTINUED</p><p>挂起调用进程的执行，直到等待集合中一个正在运行的进程终止或者等待集合中一个被停止的进程收到SIGCONT信号重新开始执行。</p></li><li><p>组合使用：WNOHANG | WUNTRACED</p><p>立即返回，如果等待集合中的子进程都没有停止或者终止则返回0，如果有一个停止或者终止则返回该子进程的pid。</p></li></ul></li><li><p>检查已回收子进程的退出状态</p><p><img src="http://img.3amupupup.online/childProcessStatus.png" alt="waitpid() status参数"></p><p>如果statusp参数是非空的，那么操作系统就会读取进程的PCB，保存在status指向的变量中。</p><p>status中保存的就是进程退出的信息，int是32bit，是否正常运行，退出码是多少，退出信号是多少。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pid_t id <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// child</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am child process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sleep 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        int ret = 1/0;</span><span class="token comment" spellcheck="true">//        exit(99);</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// parent</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father wait before.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t ret <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"status = %d\n"</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存子进程的返回状态</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"子进程终止信号: %d\n"</span><span class="token punctuation">,</span> status <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 利用位运算&amp;来获取status低7位的值，0 表示是正常退出</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"子进程退出码: %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>status <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 也是利用的位运算，将status右移八位，再获取其低8位上的值</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wait success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 非0则说明子进程不是正常退出的</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child run error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>status<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 运行成功但是结果不正确</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child run success, but result is not right, exit code: %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>status<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child run success and result is right,exit code: %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>status<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wait failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father wait after.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="http://img.3amupupup.online/WaitpidStatus.png" alt="image-20210202163458393"></p><p>图中在子进程sleep的时候给其发送了一个SIGSTOP信号导致子进程退出，status中保存的是子进程终止的状态信息。</p><p>标准库中也提供一些宏函数来检测进程的退出状态：</p><ol><li><p>WIFEXITED(status): 如果为正常子进程终止子进程的返回状态，则为真。(查看子进程是否正常退出：! (status &amp; 0x7f))</p></li><li><p>WEXITSTATUS(status): 如果WIFEXITED(status)为非零，提取子进程退出码。(查看子进程退出码: (status&gt;&gt;8)&amp;0xff))</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pid_t id <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// child</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am child process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sleep 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// parent</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father wait before.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t ret <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"status = %d\n"</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存子进程的返回状态</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 为真说明是正常退出的</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child exit code: %d\n"</span><span class="token punctuation">,</span><span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child exit error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father wait after.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol></li></ol><h4 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h4><h5 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h5><p>如果写端不关闭文件描述符且不写入，读端可能需要长时间阻塞。（读取完管道中的历史数据后阻塞）</p><p>如果读端写端条件不成熟，会阻塞。</p><p>如果写端关闭文件描述符，读端读完管道的数据之后会读到文件结尾(‘\0’)。</p><p>如果读端关闭，写端会被进程kill掉。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open pipe failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    size_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// child,write</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello duwei1996\n"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child say: hello duwei1996\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// parent,read</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ssize_t len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent get %lu bytes.\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent get: %s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>管道大小</p><ul><li><pre class=" language-shell"><code class="language-shell">[root@iZbp11u8qxiwepq15dm1liZ ComputerSystem]# ulimit -acore file size          (blocks, -c) 0data seg size           (kbytes, -d) unlimitedscheduling priority             (-e) 0file size               (blocks, -f) unlimitedpending signals                 (-i) 6946max locked memory       (kbytes, -l) 64max memory size         (kbytes, -m) unlimitedopen files                      (-n) 65535pipe size            (512 bytes, -p) 8POSIX message queues     (bytes, -q) 819200real-time priority              (-r) 0stack size              (kbytes, -s) 8192cpu time               (seconds, -t) unlimitedmax user processes              (-u) 6946virtual memory          (kbytes, -v) unlimitedfile locks                      (-x) unlimited</code></pre><p>可以看到在linux系统上pipe size 为512bytes * 8 = 4096bytes。</p></li></ul><p>特点：</p><ul><li>只能用于有血缘关系的进程之间进行通信</li><li>管道提供流式服务</li><li>数据只能向一个方向流动，只能单向通信(半双工通信)，如果需要双向通信需要创建两个管道</li><li>一般而言，进程退出，管道释放，管道的声明周期随进程</li><li>一般而言，内核会对管道操作进行同步与互斥</li></ul><h5 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h5><p>命名管道，实现无血缘关系进程通信。</p><ul><li><p>创建一个管道的伪文件</p><ul><li>int mkfifo(const char *pathname, mode_t mode);</li><li>mkfifo fifoName 命令创建</li></ul></li><li><p>内核会给fifo文件开辟一个缓冲区，操作fifo文件，可以操作缓冲区，实现进程通信–实际上就是文件读写</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> FIFO "/root/ComputerSystem/myfifo" </span><span class="token comment" spellcheck="true">// shell: mkfifo myfifo</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>FIFO<span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果没有程序 read，open会阻塞</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"hello%d"</span><span class="token punctuation">,</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  若无读端写端open阻塞</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"myfifo"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read:%s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  若无写端读端阻塞，有点类似golang里的无缓冲channel</span></code></pre><p>linux系统上通过命令：man 7 signal 查看信号的手册</p><p><img src="http://img.3amupupup.online/SignalAction.png" alt="signal"></p><p><img src="http://img.3amupupup.online/fifo.png" alt="fifo"></p><p>若读端关闭，写端也会终止。至于为什么会关闭，如下解释：</p><p>执行写端程序时，open函数打开管道文件 myfifo，由于没有读端，所以写端会阻塞住。当执行读端程序之后 open停止阻塞 继续向下执行开始往管道里写数据。当关闭读端时，操作系统发送 sigpipe 信号给写端。由图可知 sigpipe 是一个Term(terminate)信号，所以写端程序终止退出。</p></li></ul><h5 id="shm"><a href="#shm" class="headerlink" title="shm"></a>shm</h5><ol><li><p>server</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"comm.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    key_t key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span>PATHNAME<span class="token punctuation">,</span> PROJ_ID<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将PATHNAME和PROJ_ID作为信息源，生成一个唯一的key值(在系统中保证唯一)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"key = %X\n"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> IPC_EXCL <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生命周期跟随操作系统，申请之后要释放</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"shmget failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmid = %d\n"</span><span class="token punctuation">,</span>shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关联共享内存</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"msg: %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shmdt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I will rm ipc source right now, shmid = %d\n"</span><span class="token punctuation">,</span>shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shmctl</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>client</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"comm.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    key_t key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span>PATHNAME<span class="token punctuation">,</span> PROJ_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"key = %X\n"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"shmget failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmid = %d\n"</span><span class="token punctuation">,</span>shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关联共享内存</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 操作系统不提供同步与互斥</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        str<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shmdt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ipcs -m; ipcrm -m id</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;定义：进程是程序执行时的一个实例。从内核角度来看：进程是承担操作系统所分配的资源(cpu时间、内存等)的实体。&lt;/p&gt;
&lt;h4 id=&quot;进程</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="进程" scheme="https://duwei19961021.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>nginx数组</title>
    <link href="https://duwei19961021.github.io/2021/03/17/ngx_array/"/>
    <id>https://duwei19961021.github.io/2021/03/17/ngx_array/</id>
    <published>2021-03-17T03:26:01.000Z</published>
    <updated>2021-03-21T11:59:00.773Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx数据类型：数组"><a href="#nginx数据类型：数组" class="headerlink" title="nginx数据类型：数组"></a>nginx数据类型：数组</h4><p><img src="https://img.3amupupup.online/ngx_array_2.png" alt="ngx_array"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span>        <span class="token operator">*</span>elts<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 指向第一个元素的指针</span>    ngx_uint_t   nelts<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 未使用的元素的索引</span>    size_t       size<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 每个元素大小</span>    ngx_uint_t   nalloc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  元素个数</span>    ngx_pool_t  <span class="token operator">*</span>pool<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//  指向内存池的指针</span><span class="token punctuation">}</span> ngx_array_t<span class="token punctuation">;</span></code></pre><h5 id="数组提供的接口"><a href="#数组提供的接口" class="headerlink" title="数组提供的接口"></a>数组提供的接口</h5><pre class=" language-c"><code class="language-c">ngx_array_t <span class="token operator">*</span><span class="token function">ngx_array_create</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>p<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建数组的数据结构</span><span class="token keyword">void</span> <span class="token function">ngx_array_destroy</span><span class="token punctuation">(</span>ngx_array_t <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 销毁数组</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_array_push</span><span class="token punctuation">(</span>ngx_array_t <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// push单个元素</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_array_push_n</span><span class="token punctuation">(</span>ngx_array_t <span class="token operator">*</span>a<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// push n个元素</span><span class="token keyword">static</span> ngx_inline ngx_int_t <span class="token function">ngx_array_init</span><span class="token punctuation">(</span>ngx_array_t <span class="token operator">*</span>array<span class="token punctuation">,</span> ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  // ngx_array_create会调用此函数，申请之后调用这个函数进行初始化操作</span></code></pre><h5 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h5><ol><li><p>ngx_array_t *ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size): 创建数组</p><pre class=" language-c"><code class="language-c">ngx_array_t <span class="token operator">*</span><span class="token function">ngx_array_create</span><span class="token punctuation">(</span>ngx_pool_t <span class="token operator">*</span>p<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    ngx_array_t <span class="token operator">*</span>a<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_array_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          调用ngx_palloc在内存池上为ngx_array_t结构体(控制中心)申请内存(分配在内存池结点上的数据区---小数据块区)      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ngx_array_init</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">,</span> n<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">!=</span> NGX_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/*              上一步只是给数组的控制中心ngx_array_t在内存池上分配了内存，              ngx_array_init为数组分配数据区域并初始化ngx_array_t的成员，              分配ngx_array_t的内存和分配数据区内存的操作时分开的，              所以          */</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ngx_inline ngx_int_t: 初始化数组，为数组类型分配数据区的内存</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> ngx_inline ngx_int_t<span class="token function">ngx_array_init</span><span class="token punctuation">(</span>ngx_array_t <span class="token operator">*</span>array<span class="token punctuation">,</span> ngx_pool_t <span class="token operator">*</span>pool<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * set "array->nelts" before "array->elts", otherwise MSVC thinks     * that "array->nelts" may be used without having been initialized     */</span>    array<span class="token operator">-></span>nelts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    array<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    array<span class="token operator">-></span>nalloc <span class="token operator">=</span> n<span class="token punctuation">;</span>    array<span class="token operator">-></span>pool <span class="token operator">=</span> pool<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          初始化      */</span>    array<span class="token operator">-></span>elts <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> n <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          在内存吃上给数组的数据区分配内存，至于分配在large链表还是small链表需要根据数组大小决定      */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token operator">-></span>elts <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NGX_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> NGX_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>void ngx_array_destroy(ngx_array_t *a): 销毁数组</p><p><img src="https://img.3amupupup.online/ngx_array_destroy_2.png" alt="ngx_array"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ngx_array_destroy</span><span class="token punctuation">(</span>ngx_array_t <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*         在 ngx_array_create() 函数中 ngx_array_t结构的内存和数组的内存是分开申请的，不一定连续，         所以在将内存归还给内存池的时候也得分开归还     */</span>    ngx_pool_t  <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> a<span class="token operator">-></span>pool<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 内存池的地址是被保存在ngx数组数据结构中的</span>    <span class="token comment" spellcheck="true">/*         如果 数组首元素地址 + 元素大小*元素个数 == last的指向位置，         则说明这个数组的内存段是在used区域的尾部的，last直接减去 元素大小*元素个数 就代表销毁了这个数组的内存     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> a<span class="token operator">-></span>elts <span class="token operator">+</span> a<span class="token operator">-></span>size <span class="token operator">*</span> a<span class="token operator">-></span>nalloc <span class="token operator">==</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">-</span><span class="token operator">=</span> a<span class="token operator">-></span>size <span class="token operator">*</span> a<span class="token operator">-></span>nalloc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*         销毁控制中心所在的内存，道理和上面类似     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> a <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ngx_array_t<span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        走到这里就说明数组的控制中心的内存的末尾与数据区内存的末尾不等于last的指向，        它们末尾的位置到last位置之间的内存分配了给其它调用者，因此无法释放，请看图。        ①③是可以移动last将其归还给内存池的，②④不可以。    */</span><span class="token punctuation">}</span></code></pre></li><li><p>void *ngx_array_push(ngx_array_t *a): 向数组中添加单个元素</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_array_push</span><span class="token punctuation">(</span>ngx_array_t <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span>        <span class="token operator">*</span>elt<span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    size_t       size<span class="token punctuation">;</span>    ngx_pool_t  <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>nelts <span class="token operator">==</span> a<span class="token operator">-></span>nalloc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* the array is full */</span>        size <span class="token operator">=</span> a<span class="token operator">-></span>size <span class="token operator">*</span> a<span class="token operator">-></span>nalloc<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*              计算当前数组的大小          */</span>        p <span class="token operator">=</span> a<span class="token operator">-></span>pool<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> a<span class="token operator">-></span>elts <span class="token operator">+</span> size <span class="token operator">==</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>last            <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">+</span> a<span class="token operator">-></span>size <span class="token operator">&lt;=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>end<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*            第一个条件：保证数组数据区所在的内存在内存池used区域的末尾，因为添加元素时要保证数组所有的元素            在内存上是连续的。            第二个条件：在数组数据区所在的内存池的小块数据区域有足够的内存容纳一个元素。        */</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*             * the array allocation is the last in the pool             * and there is space for new allocation             */</span>            p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">+</span><span class="token operator">=</span> a<span class="token operator">-></span>size<span class="token punctuation">;</span>            a<span class="token operator">-></span>nalloc<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*                否则就是不能保证内存连续或者空间不足，进行扩容            */</span>            <span class="token comment" spellcheck="true">/* allocate a new array */</span>            new <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*                  扩容的逻辑是二倍增长              */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>new <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// </span>            <span class="token function">ngx_memcpy</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> a<span class="token operator">-></span>elts<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// </span>            a<span class="token operator">-></span>elts <span class="token operator">=</span> new<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 指向新内存的位置</span>            a<span class="token operator">-></span>nalloc <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*                      #define ngx_memcpy(dst, src, n)   (void) memcpy(dst, src, n)                      将原来的内存地址上的数组部分的内容拷贝到新内存池上，                      elts指向新内存的位置，                      元素个数翻倍。              */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 未使用的元素的下标</span>    elt <span class="token operator">=</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> a<span class="token operator">-></span>elts <span class="token operator">+</span> a<span class="token operator">-></span>size <span class="token operator">*</span> a<span class="token operator">-></span>nelts<span class="token punctuation">;</span>    a<span class="token operator">-></span>nelts<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*          走到这里你可能会有疑问：为什么之前数组的内存没有释放呢？          我来给你解答：能直接添加元素需要满足的条件：数组所在内存区域在used区域的末尾且last之后有足够的空间容纳             新元素，反过来说就是数组所在的内存区域不在used区域的末尾(数组的结束位置与last位置之间的内存被分配给了            其它调用者)，如果修改last的指向会导致被分配给其它调用者的内存归还给了内存池，再下一次分配时这一片内存                很可能再被分配出去，如果发生修改的操作会发生意外的结果。          所以之前数组数据区域的内存是不能归还给内存池的。      */</span>    <span class="token keyword">return</span> elt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>void *ngx_array_push_n(ngx_array_t *a, ngx_uint_t n): 逻辑和ngx_array_push相似</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ngx_array_push_n</span><span class="token punctuation">(</span>ngx_array_t <span class="token operator">*</span>a<span class="token punctuation">,</span> ngx_uint_t n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span>        <span class="token operator">*</span>elt<span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    size_t       size<span class="token punctuation">;</span>    ngx_uint_t   nalloc<span class="token punctuation">;</span>    ngx_pool_t  <span class="token operator">*</span>p<span class="token punctuation">;</span>    size <span class="token operator">=</span> n <span class="token operator">*</span> a<span class="token operator">-></span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>nelts <span class="token operator">+</span> n <span class="token operator">></span> a<span class="token operator">-></span>nalloc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* the array is full */</span>        p <span class="token operator">=</span> a<span class="token operator">-></span>pool<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         如果elts指向的位置加上当前数组的大小等于last 且 last到end之间有足够的空间去容纳n个元素，         则直接在这个内存池上添加元素，这个判定是要保证添加的元素所在的内存与之前数组的内存是连续的。         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> a<span class="token operator">-></span>elts <span class="token operator">+</span> a<span class="token operator">-></span>size <span class="token operator">*</span> a<span class="token operator">-></span>nalloc <span class="token operator">==</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>last            <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">+</span> size <span class="token operator">&lt;=</span> p<span class="token operator">-></span>d<span class="token punctuation">.</span>end<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*             * the array allocation is the last in the pool             * and there is space for new allocation             */</span>            p<span class="token operator">-></span>d<span class="token punctuation">.</span>last <span class="token operator">+</span><span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// size = n * a->size; 调整last的指向</span>            a<span class="token operator">-></span>nalloc <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 更新元素个数</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 否则扩容</span>            <span class="token comment" spellcheck="true">/* allocate a new array */</span>            nalloc <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">>=</span> a<span class="token operator">-></span>nalloc<span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token punctuation">:</span> a<span class="token operator">-></span>nalloc<span class="token punctuation">)</span><span class="token punctuation">;</span>            new <span class="token operator">=</span> <span class="token function">ngx_palloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> nalloc <span class="token operator">*</span> a<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>new <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">ngx_memcpy</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> a<span class="token operator">-></span>elts<span class="token punctuation">,</span> a<span class="token operator">-></span>nelts <span class="token operator">*</span> a<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token operator">-></span>elts <span class="token operator">=</span> new<span class="token punctuation">;</span>            a<span class="token operator">-></span>nalloc <span class="token operator">=</span> nalloc<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    elt <span class="token operator">=</span> <span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span> a<span class="token operator">-></span>elts <span class="token operator">+</span> a<span class="token operator">-></span>size <span class="token operator">*</span> a<span class="token operator">-></span>nelts<span class="token punctuation">;</span>    a<span class="token operator">-></span>nelts <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> elt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol><li><p>数组的控制中心ngx_array_t和数据区data是分开申请内存的，它们在内存池上很大概率是不连续的内存，释放数组时要对它们分开进行释放。</p></li><li><p>数组能不能被释放取决于其所在的内存区域，如果是在used区域的末尾则可以通过调整last将其归还给内存池。</p><p>如果不在used的末尾，则意味着数组内存的尾端和last之间存在分配给了其它调用者的内存，如果修改last会导致这块内存在下一次调用申请内存的函数时再次被分配出去并修改上面的数据导致意外的结果。</p></li><li><p>数组数据区域必须连续，以保证能随机访问以及访问的效率。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx数据类型：数组&quot;&gt;&lt;a href=&quot;#nginx数据类型：数组&quot; class=&quot;headerlink&quot; title=&quot;nginx数据类型：数组&quot;&gt;&lt;/a&gt;nginx数据类型：数组&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://img.3amupupu</summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="array" scheme="https://duwei19961021.github.io/tags/array/"/>
    
  </entry>
  
</feed>
