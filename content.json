{"meta":{"title":"BLOG","subtitle":"","description":"","author":"拦云","url":"http://blog.3amupupup.online","root":"/"},"pages":[],"posts":[{"title":"ngx缓冲区结构.md","slug":"ngx缓冲区结构-md","date":"2021-03-18T07:14:01.000Z","updated":"2021-03-18T08:17:15.264Z","comments":true,"path":"2021/03/18/ngx缓冲区结构-md/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/ngx%E7%BC%93%E5%86%B2%E5%8C%BA%E7%BB%93%E6%9E%84-md/","excerpt":"","text":"","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.3amupupup.online/tags/nginx/"}]},{"title":"nginx数组","slug":"ngx_array","date":"2021-03-18T05:25:40.825Z","updated":"2021-03-18T08:18:13.069Z","comments":true,"path":"2021/03/18/ngx_array/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/ngx_array/","excerpt":"","text":"nginx数据类型：数组 typedef struct { void *elts; // 指向第一个元素的指针 ngx_uint_t nelts; // 未使用的元素的索引 size_t size; // 每个元素大小 ngx_uint_t nalloc; // 元素个数 ngx_pool_t *pool; // 内存池 } ngx_array_t; 数组提供的接口ngx_array_t *ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size); // 创建数组的数据结构 void ngx_array_destroy(ngx_array_t *a); // 销毁数组 void *ngx_array_push(ngx_array_t *a); // push单个元素 void *ngx_array_push_n(ngx_array_t *a, ngx_uint_t n); // push n个元素 static ngx_inline ngx_int_t ngx_array_init(ngx_array_t *array, ngx_pool_t *pool, ngx_uint_t n, size_t size) // // ngx_array_create会调用此函数，申请之后调用这个函数进行初始化操作 ngx_array_t *ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size);ngx_array_t * ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size) { ngx_array_t *a; // 在内存池上为ngx_array_t结构体申请内存,具体分配到小数据块链表还是大数据块链表取决于size,不再作解释 a = ngx_palloc(p, sizeof(ngx_array_t)); if (a == NULL) { return NULL; } if (ngx_array_init(a, p, n, size) != NGX_OK) { // 再次申请内存(给数组分配的) return NULL; } return a; } static ngx_inline ngx_int_t ngx_array_init(ngx_array_t *array, ngx_pool_t *pool, ngx_uint_t n, size_t size)// ngx_array_create会调用此函数，申请之后进行初始化操作 static ngx_inline ngx_int_t ngx_array_init(ngx_array_t *array, ngx_pool_t *pool, ngx_uint_t n, size_t size) { /* * set &quot;array-&gt;nelts&quot; before &quot;array-&gt;elts&quot;, otherwise MSVC thinks * that &quot;array-&gt;nelts&quot; may be used without having been initialized */ array-&gt;nelts = 0; array-&gt;size = size; array-&gt;nalloc = n; array-&gt;pool = pool; array-&gt;elts = ngx_palloc(pool, n * size); // 去内存池上分配内存 if (array-&gt;elts == NULL) { return NGX_ERROR; } return NGX_OK; } void ngx_array_destroy(ngx_array_t *a) /* * 在 ngx_array_create() 函数中 ngx_array_t结构的内存和数组的内存是分开申请的，不一定连续， * 所以在将内存归还给内存池的时候也得分开归还 */ void ngx_array_destroy(ngx_array_t *a) { ngx_pool_t *p; p = a-&gt;pool; // 内存池的地址是被保存在ngx数组数据结构中的 /* * 如果 数组首元素地址 + 元素大小*元素个数 == last的指向位置， * 则说明这个数组的内存段是在used区域的尾部的，last直接减去 元素大小*元素个数 就代表销毁了这个数组的内存 */ if ((u_char *) a-&gt;elts + a-&gt;size * a-&gt;nalloc == p-&gt;d.last) { p-&gt;d.last -= a-&gt;size * a-&gt;nalloc; } /* * 道理和上面类似 */ if ((u_char *) a + sizeof(ngx_array_t) == p-&gt;d.last) { p-&gt;d.last = (u_char *) a; } // 否则就不能移动last } 1、3是可以修改last指向的，2、4不行。 这里有疑问：2、4这两种情况内存岂不是无法释放(归还给内存池)，内存池会越来越大。 void *ngx_array_push(ngx_array_t *a)void * ngx_array_push(ngx_array_t *a) // 添加1个元素 { void *elt, *new; size_t size; ngx_pool_t *p; if (a-&gt;nelts == a-&gt;nalloc) { /* the array is full */ size = a-&gt;size * a-&gt;nalloc; // 计算当前数组的大小 p = a-&gt;pool; if ((u_char *) a-&gt;elts + size == p-&gt;d.last &amp;&amp; p-&gt;d.last + a-&gt;size &lt;= p-&gt;d.end) /* * 如果elts指向的位置加上当前数组的大小等于last且last到end之间有足够的空间去容纳一个元素则直接在这个内存池上添加元素 * 这个判定是要保证添加的元素所在的内存与之前数组的内存是连续的 */ { /* * the array allocation is the last in the pool * and there is space for new allocation */ p-&gt;d.last += a-&gt;size; a-&gt;nalloc++; } else { // 否则就是不能保证内存连续或者空间不足 /* allocate a new array */ // 申请一个两倍的空间，new是首地址 new = ngx_palloc(p, 2 * size); if (new == NULL) { return NULL; } // #define ngx_memcpy(dst, src, n) (void) memcpy(dst, src, n) 看到这个👴🏻想笑 ngx_memcpy(new, a-&gt;elts, size); // 将原来的内存地址上的数组部分的内容拷贝到新内存池上 a-&gt;elts = new; // 指向新内存的位置 a-&gt;nalloc *= 2; // 元素个数翻倍 } } // 未使用的索引 elt = (u_char *) a-&gt;elts + a-&gt;size * a-&gt;nelts; a-&gt;nelts++; return elt; } void *ngx_array_push_n(ngx_array_t *a, ngx_uint_t n)void * ngx_array_push_n(ngx_array_t *a, ngx_uint_t n) { void *elt, *new; size_t size; ngx_uint_t nalloc; ngx_pool_t *p; size = n * a-&gt;size; if (a-&gt;nelts + n &gt; a-&gt;nalloc) { /* the array is full */ p = a-&gt;pool; /* * 如果elts指向的位置加上当前数组的大小等于last 且 last到end之间 有足够的空间去容纳n个元素则直接在这个内存池上添加元素 * 这个判定是要保证添加的元素所在的内存与之前数组的内存是连续的 */ if ((u_char *) a-&gt;elts + a-&gt;size * a-&gt;nalloc == p-&gt;d.last &amp;&amp; p-&gt;d.last + size &lt;= p-&gt;d.end) { /* * the array allocation is the last in the pool * and there is space for new allocation */ p-&gt;d.last += size; // size = n * a-&gt;size; 调整last的指向 a-&gt;nalloc += n; // 更新元素个数 } else { // 否则扩容 /* allocate a new array */ nalloc = 2 * ((n &gt;= a-&gt;nalloc) ? n : a-&gt;nalloc); new = ngx_palloc(p, nalloc * a-&gt;size); if (new == NULL) { return NULL; } ngx_memcpy(new, a-&gt;elts, a-&gt;nelts * a-&gt;size); // 宏函数，实际上调用的memcpy函数 a-&gt;elts = new; a-&gt;nalloc = nalloc; } } elt = (u_char *) a-&gt;elts + a-&gt;size * a-&gt;nelts; a-&gt;nelts += n; return elt; }","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.3amupupup.online/tags/nginx/"}]},{"title":"排序","slug":"排序","date":"2021-03-18T03:09:52.078Z","updated":"2021-03-18T03:09:52.078Z","comments":true,"path":"2021/03/18/排序/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E6%8E%92%E5%BA%8F/","excerpt":"","text":"冒泡排序 排序思想 一个无序数列，从第一个数开始，循环比较相邻两个数的大小，如果前一个数大于后一个数则交换它们的位置(升序)。 示意图 一个数列：10 9 8 7 6 5 4 3 2 1 实现 void BubbleSort(int* arr, int arrSize) { for (int i = 0; i &lt; arrSize-1; ++i) { int flag = 0; for (int j = 0; j &lt; arrSize-i-1; ++j) // 每循环一次意味着一个最大的数被移动到了数组末尾，在下一次循环时最后一个数没必要参与比较 { if(arr[j] &gt; arr[j+1]) { flag = 1; // 判断循环时是否发生交换，没有发生交换则说明已经有序，直接退出。 int temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; } } if (!flag) return; } } 理解 冒泡排序每迭代一次数组，最大数会被冒到最后，在下一次迭代时排除掉之前迭代冒的大数。 时间复杂度：N-1 + N-2 + …… + 1 即 O(N^2)。 空间复杂度：在排序过程中无需借助其它空间保存数据，即O(1)。 直接插入排序 排序思想 一个无序数列，假设前n个数是有序的，依次取出n之后的数字与 n=&gt;0 进行比较，如果小于n则插入到n之前(升序)。 示意图 实现 void InsertSort(int* arr, int arrSize) { for (int i = 0; i &lt; arrSize-1; ++i) { int end = i; // 假设 0-end是有序数列，第一次end就是0,拿arr[1]和arr[0]比较 int temp = arr[end+1]; // 选出end之后的第一个数 while (end &gt;= 0) { if(temp &lt; arr[end]) // 升序 { arr[end+1] = arr[end]; // 如果temp小于arr[end]，则说明要将end往后挪一次 end--; // 然后end继续往前走,继续判断temp是否小于arr[end] } else { break; // 不小于arr[end]时直接跳出循环 } } arr[end+1] = temp; } } 希尔排序 排序思想 希尔排序是在插入排序的基础上做的优化。插入排序中，如果值大小分布越不均匀，在选择一个数与有序序列比较时需要移动end的次数会越多，序列越接近有序，需要移动end的次数就会越少。希尔排序在此基础上，将序列分成不连续多个组，然后进行插入排序，这会使得序列能更快的接近有序。直至间隔为1时就是插入排序，此时数组接近有序，效率会更高。 示意图 图中，2、5、13为一组，5、3、3为一组，升序情况下：间隔越大，那么排在靠后位置的数就更加容易的被插入在数组靠前的位置，比如arr[1]=5、arr[5]=3、arr[9]=3，如果是插入排序，arr[9]=3 end需要移动6次才能使arr[9]到达靠前的位置，使用希尔排序，end移动两次就靠前了。会使数组更容易的接近有序。 实现 void ShellSort(int* arr, int arrSize) { int gap = arrSize; while(gap &gt; 1) { gap = gap/3+1; // 2/3=0,会导致排序提前结束(gap还没等于1就结束了),所以每次给gap加上个1。 for(int i = 0;i &lt; arrSize-gap;i++) // arrSize为什么要减去gap: 假如数组长度是10,gap第一次循环为4。 // 循环开始之后，temp的下标(也就是end+gap)不能超出数组范围即:i+gap &lt; arrsize,也就是i&lt;arrSize-gap { int end = i; int temp = arr[end+gap]; while(end &gt;= 0) { if(temp &lt; arr[end]) { arr[end+gap] = arr[end]; end-=gap; } else { break; } } arr[end+gap] = temp; } } } 堆排序 排序思想 有序数列(数组)的在内存上存储形式是线性的(一段连续的内存)，其逻辑结构是二叉树(完全二叉树)。利用这个特性可以将数组看成一个二叉树，然后进行建堆操作。（大堆的父结点大于左右孩子结点，小堆的父结点小于左右孩子结点），然后每次取出堆顶的数再重新建堆。(升序建大堆，降序建小堆)。leftChild = parent*2+1，rightChile = parent*2+2。 示意图 实现 void Swap(int* a, int* b) { int temp = *a; *a = *b; *b= temp; } void AdJustDown(int* arr, int root, int arrSize) // 建堆 { int parent = root; int child = parent*2 + 1; while (child &lt; arrSize) { if (child+1 &lt; arrSize &amp;&amp; arr[child+1] &gt; arr[child]) { child++; } if(arr[parent] &lt; arr[child]) { Swap(&amp;arr[parent],&amp;arr[child]); parent = child; child = parent*2+1; } else { break; } } } void HeapSort(int* arr, int arrSize) { for (int i = (arrSize-1-1)/2; i &gt;=0 ; --i) { AdJustDown(arr,i,arrSize); } int end = arrSize-1; while (end &gt; 0) { Swap(&amp;arr[end],&amp;arr[0]); AdJustDown(arr,0,end); end--; } } 快速排序 排序思想(升序) 左右两个指针left、right，取一个key值。左右开始向右向左遍历，左指针遇见比key大的数停止移动，右指针遇见比key小的数停止移动，此时交换左右指针对应的值，直到左右指针重合。此时key左边的值全比key小，右边的值全比key大。再通过分治思想对key左右两边的区间进行递归操作。 示意图 代码实现 /* * 三数取中 * 在数组有序时(假设是降序),keyIndex每次都是最小的数的下标 * 会导致快排变成一个N^2的算法,三数取中能有效避免这个缺陷。 */ int GetMidIdx(int* arr ,int left, int right) { int mid = (left+right)/2; if (arr[left] &lt; arr[mid]) { if (arr[mid] &lt; arr[right]) return mid; else if (arr[left] &gt; arr[right]) return left; else return right; } else { if (arr[mid] &gt; arr[right]) return mid; else if (arr[left] &lt; arr[right]) return left; else return right; } } int Part(int* arr, int left, int right) { int midIndex = GetMidIdx(arr,left,right); // 找出中位数 Swap(&amp;arr[midIndex],&amp;arr[right]); int keyIndex = right; while(left &lt; right) { while(left &lt; right &amp;&amp; arr[left] &lt;= arr[keyIndex]) // 因为是left先移动,所以left的最终停留位置的数一定比keyIndex大 left++; while(left &lt; right &amp;&amp; arr[right] &gt;= arr[keyIndex]) right--; Swap(&amp;arr[left], &amp;arr[right]); // 循环走到这里时,left位置的数比keyIndex大,right位置的数比keyIndex小,对它们进行交换 } Swap(&amp;arr[keyIndex], &amp;arr[left]); // left最终停止的位置和keyIndex进行交换,此时left的左边全是比选出的keyIndex小的数,右边全是比keyIndex大的数。 return left; // 必须返回left,下一次排序时就可以排除掉left，对left左右的两边的数进行排序 } void QuickSort(int* arr, int left, int right) { if(left &lt; right) { int div = Part(arr,left,right); QuickSort(arr,left,div-1); QuickSort(arr,div+1,right); } } void QuickSortNoR(int* arr, int left, int right) { Stack st; StackInit(&amp;st); StackPush(&amp;st,left); // 注意进栈顺序,先进的后被取出来 StackPush(&amp;st,right); while(!StackEmpty(&amp;st)) // 栈不为空说明还存在没被排序的区间则要继续循环 { int _right = StackTop(&amp;st); StackPop(&amp;st); int _left = StackTop(&amp;st); StackPop(&amp;st); int div = Part(arr,_left,_right); if(div+1 &lt; _right) { StackPush(&amp;st,div+1); // 保证入栈顺序和第一次一致 StackPush(&amp;st,_right); } if(_left &lt; div-1) { StackPush(&amp;st,_left); StackPush(&amp;st,div-1); } } StackDestory(&amp;st); } 归并排序 排序思想 合并有序数组 示意图 实现 // 将数组分割成N个有序小区间(1个数的区间，一个数也算有序)，再合并有序的数组 void _MergeSort(int* arr,int left, int right, int* tmp) { if(left&gt;=right) // 分割退出的条件 return; int mid = (left+right)/2; // 拿到中间位置的索引，下一步递归分割，直到不可分为止(分割到只有一个数) _MergeSort(arr,left,mid,tmp); // 递归分割左半边 _MergeSort(arr,mid+1,right,tmp); // 递归分割右半边 int begin1 = left, end1 = mid; // 走到这里说明已经分割完了，分成了right+1个一个元素的数组 int begin2 = mid+1, end2 = right; int index = begin1; // tmp区间起始位置 while (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2) // 归并有序数组 { if (arr[begin1] &lt; arr[begin2]) { tmp[index++] = arr[begin1++]; } else { tmp[index++] = arr[begin2++]; } } while (begin1&lt;=end1) tmp[index++] = arr[begin1++]; while (begin2&lt;=end2) tmp[index++] = arr[begin2++]; for (int i = left; i &lt;= right; ++i) // 拷贝回原数组，拷贝一定是 &lt;= 闭区间，因为right传入的是闭区间 { arr[i] = tmp[i]; } } // 归并，递归实现 void MergeSort(int* arr, int arrSize) { int* tmp = malloc(sizeof(int)*arrSize); _MergeSort(arr,0,arrSize-1,tmp); free(tmp); } // 归并，非递归实现 void _MergeSortNoR(int* arr, int begin1, int end1, int begin2, int end2, int* tmp) { PrintArr(arr,10); int left = begin1,right = end2; // 这里必须使用新变量记录数组的起始结束位置，因为经过迭代后begin1会自增 int index = begin1; // tmp区间起始位置 while (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2) // 归并有序数组 { if (arr[begin1] &lt; arr[begin2]) { tmp[index++] = arr[begin1++]; } else { tmp[index++] = arr[begin2++]; } } while (begin1&lt;=end1) tmp[index++] = arr[begin1++]; while (begin2&lt;=end2) tmp[index++] = arr[begin2++]; for (int i = left; i &lt;= right; ++i) { arr[i] = tmp[i]; } } void MergeSortNoR(int* arr, int arrSize) { int* tmp = (int*)malloc(sizeof(int)*arrSize); int gap = 1; while (gap&lt;arrSize) { for (int i = 0; i &lt; arrSize; i+=2*gap) { // [i,i+gap-1] [i+gap, i+2*gap-1] int begin1 = i, end1 = i+gap-1, begin2 = i+gap, end2 =i+gap*2-1; if (begin2 &gt;= arrSize) // begin2大于等于数组长度时说明只存在一组数据(无法分割成两组) break; if (end2&gt;=arrSize) // end2大于等于数组长度则说明无法分割成均等的两组，end2超出了数组的范围 end2 = arrSize-1; // 所以需要调整end2的位置，使其不能超出数组范围 _MergeSortNoR(arr,begin1,end1,begin2,end2,tmp); } gap*=2; } free(tmp); } 计数排序 思想 记录一个序列中数字出现的次数。 找出序列中的最大值 max 然后创建一个size为max+1的tmp数组，遍历数据序列，拿序列中的值做tmp数组的下标，tmp对应下标的值进行++ 计数。遍历结束后，依次从tmp中取值拷贝到原序列中，tmp的下标作为序列的值，tmp下标对应的值作为拷贝的次数。 示意图 实现 void CountSort(int* arr, int arrSize) { int min = arr[0]; int max = arr[0]; // 找出最大最小的值 for (int i = 0; i &lt; arrSize; ++i) { if (arr[i] &gt; max) { max = arr[i]; } if (arr[i] &lt; min) { min = arr[i]; } } int range = max-min+1; // 创建一个range+1大小的数组，利用相对位置存储计数，还原时tmp数组下标加上min就是原数组的值 int* countArray = (int*)malloc(sizeof(int)*range); if (!countArray) { printf(&quot;malloc failed.\\n&quot;); exit(-1); } memset(countArray,0,sizeof(int)*range); for (int i = 0; i &lt; arrSize; ++i) { countArray[arr[i]-min]++; } int index = 0; for (int i = 0; i &lt; range; ++i) { while (countArray[i]--) { arr[index++] = i+min; } } free(countArray); }","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://blog.3amupupup.online/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"Jenkins结合sonar代码检测流水线","slug":"Jenkins结合sonar代码检测流水线","date":"2021-03-18T03:09:52.078Z","updated":"2021-03-18T03:09:52.078Z","comments":true,"path":"2021/03/18/Jenkins结合sonar代码检测流水线/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/Jenkins%E7%BB%93%E5%90%88sonar%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B%E6%B5%81%E6%B0%B4%E7%BA%BF/","excerpt":"","text":"1、jenkins所需插件Pipeline、Sonar Quality Gates Plugin、SonarQube Scanner、Generic Webhook Trigger Plugin 2、jenkins配置 Dashboard =&gt; 系统管理 =&gt; 全局工具配置 Dashboard =&gt; 系统管理 =&gt; 系统配置 这个token是在sonar web上生成的，然后在jenkins上创建一个secret text类型凭据。 配置连接gitlab，要生成gitlab api token 生成private token。在sonar检测代码所有条件都通过时，要通过这个private token去操作gitlab的api来自动接受合并请求。 生成凭据，记住这里的id 为12，一会pipeline脚本要用 在gitlab项目下配置触发器，只勾选Merge Request Events (这个token随机生成一个就好了) 3、pipiline脚本pipeline { agent any environment { PrivateToken= credentials(&#39;12&#39;) // 获取private token，之前在凭据里配置过，这样比较安全，不需要在脚本里明文使用token } options { gitLabConnection(&#39;gitlab&#39;) } triggers { GenericTrigger( genericVariables: [ [key: &#39;source_branch&#39;, value: &#39;$.object_attributes.source_branch&#39;], // 获取merge的源分支,只检测源分支，源分支的代码检测成功才能合并到目标分支 [key: &#39;url&#39;, value: &#39;$.object_attributes.url&#39;], // 获取gitlab merge请求的url [key: &#39;action&#39;, value: &#39;$.object_attributes.action&#39;], // 获取merge动作 [reopen,close,open],只在reopen和open时才出发流水线检测 [key: &#39;source_project_id&#39;, value: &#39;$.object_attributes.source_project_id&#39;], [key: &#39;iid&#39;, value: &#39;$.object_attributes.iid&#39;], [key: &#39;name&#39;, value: &#39;$.user.name&#39;], // 获取合并请求的发起人 [key: &#39;project_name&#39;, value: &#39;$.project.name&#39;], // 或者项目名 [key: &#39;target_branch&#39;, value: &#39;$.object_attributes.target_branch&#39;], // 获取目标分支，我这里的需求是：合并到release.test分支的请求才进行质检、自动合并，所以我需要拿到这个变量 [key: &#39;object_kind&#39;, value: &#39;$.object_kind&#39;] ], token: &#39;fc161920aa6f1886e7417416edc85500&#39; , // 这是webhook上填写的token causeString: &#39; Triggered on $ref&#39; , printContributedVariables: true, printPostContent: true ) } stages { stage(&quot;select branch&quot;){ steps{ script{ if((env.source_branch =~ &#39;release.*&#39;).matches() || (env.action!=&quot;open&quot; &amp;&amp; env.action!=&quot;update&quot;) || env.target_branch != &quot;release.test&quot;){ // 触发流水线检测代码的条件 stage(&quot;exit with 0&quot;){ ansiColor(&#39;gnome-terminal&#39;) { echo &quot;\\033[32m Jump Sonar\\n user:$name\\nproject_name:$project_name\\nobject_kind:$object_kind\\naction:$action\\nsource_branch:$source_branch\\n target_branch:$target_branch \\033[0m&quot; } } }else{ stage(&#39;pull branch&#39;) { checkout([$class: &#39;GitSCM&#39;, branches: [[name: &quot;*/$source_branch&quot;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &#39;11&#39;, url: &#39;http://gitlab.xxxxxx.com:8888/xubin/xxxxxxxx.git&#39;]]]) } stage(&#39;SonarQubeanalysis&#39;) { script { scannerHome = tool &#39;sonar-scanner&#39; } withSonarQubeEnv(&#39;sonar&#39;) { sh &quot;echo ${scannerHome}&quot; sh &quot;${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=$JOB_BASE_NAME -Dsonar.sources=./app&quot; } } stage(&quot;SonarQube Quality Gate&quot;) { timeout(time: 1, unit: &#39;HOURS&#39;) { def qg = waitForQualityGate(&#39;sonar&#39;) if (qg.status != &#39;OK&#39;) { echo &quot;Status: ${qg.status}&quot; error &quot;Pipeline aborted due to quality gate failure: ${qg.status}&quot; // 质检没通过直接让流水线失败退出 } } ansiColor(&#39;gnome-terminal&#39;) { echo &quot;\\033[32m Jump Sonar\\n user:$name\\nproject_name:$project_name\\nobject_kind:$object_kind\\naction:$action\\nsource_branch:$source_branch\\n target_branch:$target_branch \\033[0m&quot; } } stage(&quot;Merge&quot;){ // 如果检测通过自动合并请求 script{ httpRequest authentication: &#39;11&#39;, customHeaders: [[maskValue: false, name: &#39;PRIVATE-TOKEN&#39;, value: &quot;$PrivateToken&quot;]], httpMode: &#39;PUT&#39;, responseHandle: &#39;NONE&#39;, url: &quot;http://gitlab.xxxxxx.com:8888/api/v4/projects/$source_project_id/merge_requests/$iid/merge&quot; } } } } } } } }","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"sonar","slug":"sonar","permalink":"http://blog.3amupupup.online/tags/sonar/"}]},{"title":"带环链表","slug":"带环链表","date":"2021-03-18T03:09:52.077Z","updated":"2021-03-18T03:09:52.077Z","comments":true,"path":"2021/03/18/带环链表/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E5%B8%A6%E7%8E%AF%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1、判断链表是否带环解题过程： 给链表设置两个指针，slow移动一步，fast移动两步。 fast和slow指针都进入环之后 fast和slow指针重合 在slow和fast都进环之后，fast开始追slow。slow移动一步，fast移动两步。 每一次移动fast和slow之间的距离缩短一步，最终重合，则证明有环。如果fast指针在经过若干次移动之后为NULL(循环结束)，则说明不带环。 代码： /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ bool hasCycle(struct ListNode *head) { struct ListNode *slow = head; struct ListNode *fast = head; while(fast &amp;&amp; fast-&gt;next) { slow = slow-&gt;next; fast = fast-&gt;next-&gt;next; if (slow == fast) { return true; } } return false; } 2、带环链表的入环结点解题过程 给链表设置两个指针，slow移动一步，fast移动两步。 slow在进入环之后，在一个C之内就会被fast追上(fast的速度是slow的两倍)。 slow走的距离是：L+X fast走的距离是 ：L+N*C+X (如果L足够长环足够小，fast进环且绕环N次之后slow才会进入) 2*(L+X) = L+N*C+X =&gt; L = N*C -X 然后同时从head和fast位置开始遍历，找到相同的节点。 代码： /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode *detectCycle(struct ListNode *head) { struct ListNode *slow = head; struct ListNode *fast = head; while(fast &amp;&amp; fast-&gt;next) // 遍历链表，找到slow与fast重合的点 { slow = slow-&gt;next; fast = fast-&gt;next-&gt;next; if(fast == slow) { break; } } if(!fast || !fast-&gt;next) // 判断上一步循环时因为遍历到NULL结束的还是因为 fast==slow 结束的 { return NULL; // 如果fast或者fast-&gt;next为NULL说明链表不带环，直接返回NULL } while(fast &amp;&amp; head) // 遍历寻找相交结点 { if(fast == head) { return fast; } fast = fast-&gt;next; head = head-&gt;next; } return NULL; }","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://blog.3amupupup.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"ECS磁盘扩容","slug":"ECS磁盘扩容","date":"2021-03-18T03:09:52.075Z","updated":"2021-03-18T03:09:52.076Z","comments":true,"path":"2021/03/18/ECS磁盘扩容/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/ECS%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/","excerpt":"","text":"1、通过 df -h 知根分区大小为40G。 2、在阿里云后台对当前ECS实例的磁盘进行在线扩容。 3、扩容后登陆ECS使用fdisk -l查看磁盘大小，磁盘已经扩容到100G。 4、安装growpart[root@iZbp1e8z3uz7pmqbsis8bkZ ~]# yum -y install cloud-utils-growpart Loaded plugins: fastestmirror base | 3.6 kB 00:00 epel | 4.7 kB 00:00 extras | 2.9 kB 00:00 updates | 2.9 kB 00:00 (1/7): base/7/x86_64/group_gz | 153 kB 00:00 (2/7): extras/7/x86_64/primary_db | 190 kB 00:00 (3/7): epel/x86_64/group_gz | 95 kB 00:00 (4/7): updates/7/x86_64/primary_db | 176 kB 00:00 (5/7): epel/x86_64/updateinfo | 1.0 MB 00:00 (6/7): base/7/x86_64/primary_db | 6.1 MB 00:00 (7/7): epel/x86_64/primary_db | 6.8 MB 00:00 Determining fastest mirrors * base: mirrors.cloud.aliyuncs.com * epel: mirrors.cloud.aliyuncs.com * extras: mirrors.cloud.aliyuncs.com * updates: mirrors.cloud.aliyuncs.com Resolving Dependencies --&gt; Running transaction check ---&gt; Package cloud-utils-growpart.noarch 0:0.29-5.el7 will be installed --&gt; Finished Dependency Resolution Dependencies Resolved ================================================================================ Package Arch Version Repository Size ================================================================================ Installing: cloud-utils-growpart noarch 0.29-5.el7 base 27 k Transaction Summary ================================================================================ Install 1 Package Total download size: 27 k Installed size: 61 k Downloading packages: cloud-utils-growpart-0.29-5.el7.noarch.rpm | 27 kB 00:00 Running transaction check Running transaction test Transaction test succeeded Running transaction Installing : cloud-utils-growpart-0.29-5.el7.noarch 1/1 Verifying : cloud-utils-growpart-0.29-5.el7.noarch 1/1 Installed: cloud-utils-growpart.noarch 0:0.29-5.el7 Complete! 5、扩展/dev/vda1分区（命名含义为扩展/dev/vda磁盘的第一个分区）。[root@iZbp1e8z3uz7pmqbsis8bkZ ~]# growpart /dev/vda 1 CHANGED: partition=1 start=2048 old: size=83881984 end=83884032 new: size=209713119 end=209715167 ​ 若报错unexpected output in sfdisk –version……..则运行LANG=en_US.UTF-8切换ECS实例的字符编码类型。 6、运行resize2fs 命令调用resize2fs扩容文件系统。 [root@iZbp1e8z3uz7pmqbsis8bkZ ~]# resize2fs /dev/vda1 resize2fs 1.42.9 (28-Dec-2013) Filesystem at /dev/vda1 is mounted on /; on-line resizing required old_desc_blocks = 3, new_desc_blocks = 7 The filesystem on /dev/vda1 is now 26214139 blocks long. [root@iZbp1e8z3uz7pmqbsis8bkZ ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 99G 1.5G 93G 2% / devtmpfs 487M 0 487M 0% /dev tmpfs 497M 0 497M 0% /dev/shm tmpfs 497M 308K 496M 1% /run tmpfs 497M 0 497M 0% /sys/fs/cgroup tmpfs 100M 0 100M 0% /run/user/0","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"ecs","slug":"ecs","permalink":"http://blog.3amupupup.online/tags/ecs/"}]},{"title":"linux性能优化实战笔记","slug":"linux性能优化实战笔记","date":"2021-03-18T03:09:52.075Z","updated":"2021-03-18T03:09:52.075Z","comments":true,"path":"2021/03/18/linux性能优化实战笔记/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/","excerpt":"","text":"01、平均负载平均负载：系统出于可运行状态（正在使用cpu或者正在等待cpu的进程，也就是ps命令看到的Running 或 Runnable状态的进程）和不可中断状态（进程正在处于内核态关键流程中的进程，这些流程是不可打断的，例如等待硬件设备的I/O响应，也就是ps命令看到的D状态。比如，当一个进程向磁盘读写数据时，为了保证数据的一致性，在得到磁盘回复前，它是不能被其他进程或者中断打断的，这个时候的进程就处于不可中断状态。如果此时的进程被打断了，就容易出现磁盘数据与进程数据不一致的问题。所以，不可中断状态实际上是系统对进程和硬件设备的一种保护机制。）的平均进程数，也就是平均活跃进程数。 #观察进程的cpu使用情况，间隔一秒输出一次 pidstat -u 1 #观察cpu使用情况，观察各状态占比 mpstat -P ALL 1 02、CPU 上下文切换CPU 寄存器：是 CPU 内置的容量小、但速度极快的内存。 程序计数器：则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。 它们都是 CPU 在运行任何任务前，必须的依赖环境，因此也被叫做 CPU 上下文。 CPU 上下文切换，就是先把前一个任务的 CPU 上下文（也就是 CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。 上下文切换情景： ① 系统调用，cpu寄存器里原来用户态的指令位置，需要先保存起来，接着为了执行内核态的代码，cpu寄存器需要更新为内核态指令的最新位置，最后才是跳转到内核态运行内核任务，系统调用结束后cpu需要恢复到原来保存的用户态，继续运行进程。so，一次系统调用发生了两次cpu上下文切换。（系统调用过程中，并不会涉及到虚拟内存等进程用户态的资源，也不会切换进程。这跟我们通常所说的进程上下文切换是不一样的） 进程上下文切换，是指从一个进程切换到另一个进程运行。而系统调用过程中一直是同一个进程在运行。","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux性能优化实战笔记","slug":"linux性能优化实战笔记","permalink":"http://blog.3amupupup.online/tags/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"}]},{"title":"一次海外k8s集群代码发布实践","slug":"一次海外k8s集群代码发布实践","date":"2021-03-18T03:09:52.074Z","updated":"2021-03-18T03:09:52.074Z","comments":true,"path":"2021/03/18/一次海外k8s集群代码发布实践/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E4%B8%80%E6%AC%A1%E6%B5%B7%E5%A4%96k8s%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E5%AE%9E%E8%B7%B5/","excerpt":"","text":"项目背景：要上一个海外版的小说平台，gitlab在国内，当前是要求在海外搭建一个测试环境(php代码) 第一阶段：话不多说，在香港买了台机器，down了个oneinstack脚本装环境，环境具体为mysql+redis+php-fpm7.1.3+nginx。 jenkins+gitlab都是在国内，也没多想直接在jenkins创建了一个工程，使用ssh-server插件将构建好的代码push到香港机器。问题来了，因为机器是在香港，在jenkins push代码的时候巨慢无比，每一次发布起码花费十分钟以上的时间，严重影响开发效率。 第二阶段：想到了用容器的方式发布，思路是这样：在杭州机器上将镜像构建好，然后push到香港仓库去，因为镜像push的时候会进行压缩，另外push到香港仓库之后那边机器拉取代码的速度会大大提升，缩短了发布时间（这是为以后生产发布做考虑，代码同步慢，有些文件更新有些文件没更新可能会造成线上报错的）。于是开始构建基础镜像，编写Dockerfile。 编写dockerfile：①保证镜像精简 ②尽量减少镜像的层数，将底层环境固定。 nginx和php-fpm基础镜像构建完成后使用jenkins进行打包代码到镜像里，使用的pipeline脚本。 第二阶段使用的是docker compose，因此每一次更新都需要登录香港机器手动拉取并更新镜像，比较麻烦，所以很快就放弃了这种方式 第三阶段：考虑使用k8s，于是在香港买了个k8s集群，两个2c4g的节点，外加一台2c4g的机器作为数据库机器（redis+mysql），后续正式上线之后再考虑扩容。 问题： ​ 1、nginx容器和php-fpm容器需要共享代码才能正常提供服务。 ​ 解决：首先想到的是每次发布构建两个镜像，即将代码分别拷贝进nginx和php容器，然后通过deployment去运行，但是这种方法太麻烦，因为没次都需要重新更新php和nginx容器，这两个镜像的体积加起来差不多有800M了，所以不考虑这种方式。 ​ 于是使用了deployment控制器中的volume —- emptydir共享卷，代码使用一个initcontainer拷贝进去。这样的话我每次只需要更新initcontainer(initcontainer不需要什么环境，使用的busybox，基础镜像才几M，加上代码也就30M左右，这样的话大大提高了镜像构建、推送、拉取的速度)。 使用pipeline构建代码容器： pipeline { agent any stages { stage(&#39;pull code&#39;) { steps { checkout([$class: &#39;GitSCM&#39;, branches: [[name: &#39;*/test&#39;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &#39;11&#39;, url: &#39;http://xxxxx.xxxxxxx.com/xxxxx/xxxxxxx_api.git&#39;]]]) } } stage(&#39;build image&#39;){ steps { sh &#39;wget http://172.16.72.173/leshuapi/.dockerignore -O .dockerignore&#39; sh &#39;wget http://172.16.72.173/leshuapi/Dockerfile -O Dockerfile&#39; sh &#39;sudo docker build -t registry.cn-hongkong.aliyuncs.com/ysg_codebox/$JOB_BASE_NAME:latest .&#39; } } stage(&#39;push image&#39;){ steps { timeout(time: 3, unit: &#39;MINUTES&#39;){ retry(5) { sh &#39;docker push registry.cn-hongkong.aliyuncs.com/ysg_codebox/$JOB_BASE_NAME:latest&#39; } } } } } } deployment.yaml内容如下： --- apiVersion: extensions/v1beta1 kind: Deployment metadata: name: leshuapi spec: replicas: 2 template: metadata: labels: app: leshuapp spec: dnsPolicy: Default shareProcessNamespace: true imagePullSecrets: - name: regsecret initContainers: - name: copycode #代码容器 image: registry.cn-hongkong.aliyuncs.com/ysg_codebox/xxxxxxxxx:latest imagePullPolicy: Always command: [&quot;mv&quot;,&quot;/data/wwwroot/&quot;,&quot;/data/www/&quot;] volumeMounts: - name: www mountPath: /data/www - name: chown image: registry.cn-hongkong.aliyuncs.com/ysg_baseimage/xxxxbox:v2 imagePullPolicy: IfNotPresent command: [&quot;chown&quot;,&quot;-R&quot;,&quot;www.www&quot;,&quot;/data/www/&quot;] volumeMounts: - name: www mountPath: /data/www containers: - name: nginx image: registry.cn-hongkong.aliyuncs.com/ysg_baseimage/nginx:v3 imagePullPolicy: IfNotPresent securityContext: capabilities: add: - SYS_PTRACE stdin: true tty: true resources: requests: memory: 200Mi cpu: 100m limits: memory: 300Mi cpu: 200m ports: - containerPort: 80 livenessProbe: tcpSocket: port: 80 command: [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;] volumeMounts: - name: www mountPath: /data/www - name: logs mountPath: /data/logs/ - name: nginx-conf mountPath: /etc/nginx/conf.d/ - name: env mountPath: /data/www/wwwroot/env/ - name: php-fpm image: registry.cn-hongkong.aliyuncs.com/ysg_baseimage/php-fpm:v2 imagePullPolicy: IfNotPresent securityContext: capabilities: add: - SYS_PTRACE stdin: true tty: true resources: requests: memory: 200Mi cpu: 100m limits: memory: 300Mi cpu: 200m ports: - containerPort: 9000 livenessProbe: tcpSocket: port: 9000 command: [&quot;/usr/local/php/sbin/php-fpm&quot;,&quot;-F&quot;] volumeMounts: - name: www mountPath: /data/www - name: logs mountPath: /data/logs/ - name: phpfpm-conf mountPath: /usr/local/php/etc/php-fpm.d/ - name: env mountPath: /data/www/wwwroot/env/ volumes: - name: www emptyDir: {} - name: logs emptyDir: {} - name: nginx-conf configMap: name: leshuapi-nginx-conf items: - key: server.conf path: server.conf - name: phpfpm-conf configMap: name: leshuapi-phpfpm-conf items: - key: www.conf path: www.conf - name: env configMap: name: leshuapi-env items: - key: .env path: .env --- apiVersion: v1 kind: Service metadata: name: leshuapiservice spec: ports: - protocol: TCP port: 80 targetPort: 80 selector: app: leshuapp 镜像里的项目配置文件、nginx配置文件、php-fpm的配置文件全部通过configmap挂载出来方便修改，具体yaml省略。 配置文件结构：","categories":[{"name":"k8s","slug":"k8s","permalink":"http://blog.3amupupup.online/categories/k8s/"}],"tags":[{"name":"cicd","slug":"cicd","permalink":"http://blog.3amupupup.online/tags/cicd/"}]},{"title":"二叉树","slug":"二叉树","date":"2021-03-18T03:09:52.073Z","updated":"2021-03-18T03:09:52.073Z","comments":true,"path":"2021/03/18/二叉树/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"二叉树 示意图 性质 一个二叉树，如果每一层的结点个数都达到最大值则就是满二叉树。也就是说一个深度为k的二叉树，如果结点总数是(2^k)-1则是满二叉树。 前k-1层结点个数都是满的(达到最大个数)，最后一层可以不满，但是必须从左到右连续，称为完全二叉树。(满二叉树是特殊的完全二叉树) 若规定根结点的层数为1，则一棵非空二叉树的第i层至多有2^(i-1)个结点。 任何一颗二叉树，度为0的结点个数比度为2的结点个数多1。 对于有N个结点的满二叉树，二叉树的高度 h=log2N+1。 对于有N个结点的完全二叉树，二叉树的高度 h=log2N+1。 二叉树的顺序存储。 示意图 父亲结点下标是i，则左孩子结点下标为2*i+1、右孩子结点下标","categories":[],"tags":[]},{"title":"计算机网络","slug":"计算机网络","date":"2021-03-18T03:09:52.072Z","updated":"2021-03-18T03:09:52.072Z","comments":true,"path":"2021/03/18/计算机网络/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","excerpt":"","text":"计算机网络 三种交换方式： 交换方式 优点 缺点 电路交换 通信时延小(比特流直达终点)有序传输没有冲突使用范围广(模拟信号、数字信号)实时性强控制简单 建立连接时间长线路独占，使用效率低灵活性差难以规格化 报文交换 无需建立连接(不需要为通信双方事先建立一条专用的通信线路，不存在建立连接的时延。)动态分配线路提高线路可靠性提高线路利用率提供多目标服务 引起了转发时延需要较大的存储缓存空间需要传输额外的信息量(报头要携带目标地址、源地址等信息) 分组交换 无需建立连接线路利用率高简化了存储管理加速传输减少出错概率和重传数据量 引起了转发时延需要传输额外的信息量对于数据报服务，存在失序、丢失或重复分组的问题；对于虚电路服务，存在呼叫建立、数据传输和虚电路释放三个过程 计算机网络的定义和分类","categories":[],"tags":[]},{"title":"sonar","slug":"sonar","date":"2021-03-18T03:09:52.072Z","updated":"2021-03-18T03:09:52.073Z","comments":true,"path":"2021/03/18/sonar/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/sonar/","excerpt":"","text":"gitlabBranch gitlabSourceBranch gitlabActionType gitlabUserName gitlabUserUsername gitlabUserEmail gitlabSourceRepoHomepage gitlabSourceRepoName gitlabSourceNamespace gitlabSourceRepoURL gitlabSourceRepoSshUrl gitlabSourceRepoHttpUrl gitlabMergeRequestTitle gitlabMergeRequestDescription gitlabMergeRequestId gitlabMergeRequestIid gitlabMergeRequestState gitlabMergedByUser gitlabMergeRequestAssignee gitlabMergeRequestLastCommit gitlabMergeRequestTargetProjectId gitlabTargetBranch gitlabTargetRepoName gitlabTargetNamespace gitlabTargetRepoSshUrl gitlabTargetRepoHttpUrl gitlabBefore gitlabAfter gitlabTriggerPhrasepipeline { agent any stages { stage(&#39;pull code&#39;) { steps { checkout([$class: &#39;GitSCM&#39;, branches: [[name: &#39;*/release.test&#39;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &#39;11&#39;, url: &#39;http://xxxx.xxxxxx.com:8888/xxxx/xxxxxx.git&#39;]]]) } } stage(&#39;SonarQube&#39;) { steps{ sh &quot;sonar-scanner -X -Dsonar.host.url=http://172.16.72.182:8888/ -Dsonar.language=php -Dsonar.projectVersion=$BUILD_NUMBER -Dsonar.sources=./app -Dsonar.sourceEncoding=UTF-8 -Dsonar.projectName=$JOB_BASE_NAME -Dsonar.projectKey=$JOB_BASE_NAME -Dsonar.login=a65d0c254cfxx2ax013bcxe93xb8xg13f25b2407&quot; } } } }","categories":[],"tags":[]},{"title":"深入理解计算机系统","slug":"深入理解计算机系统","date":"2021-03-18T03:09:52.071Z","updated":"2021-03-18T03:09:52.072Z","comments":true,"path":"2021/03/18/深入理解计算机系统/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"第九章：虚拟内存1、什么是虚拟内存？虚拟内存是磁盘上(较低层)连续N个字节组成的数组，每个字节都有唯一的虚拟地址作为数组的索引，磁盘上数组的内容被缓存在主存中。(虚拟页存在于磁盘上) 物理内存被分隔成物理页(Physical Page,PP)。 VM系统将虚拟内存分隔成虚拟页(Virtual Page,VP)，虚拟页面的集合分为三个不相交的子集： 未分配的(VM系统还未分配或者未创建的页，未分配的块没有任何数据和他们相关联，因为不占用任何磁盘空间)。 缓存的(已缓存在物理内存中的已分配页)。 未缓存的(未缓存在物理内存中的已分配页)。 2、DRAM缓存组织结构 SRAM：表示位于cpu和主存之间的L1、L2、L3高速缓存。 DRAM：表示虚拟内存系统的缓存，它在主存中缓存虚拟页。 直 写：当 CPU 要将数据写入内存时 除了更新缓冲内存(高速缓存L1、L2、L3)上的数据外也将数据写在 DRAM 中 以维持主存与缓冲内存的一致性 当要写入内存的数据一多 速度自然就慢了下来 回 写：每当 CPU 要将数据写入内存时 只会先更新缓冲内存(高速缓存L1、L2、L3)上的数据 随后再让缓冲内存在总线不塞车的时候 才把数据写回 DRAM 所以速度自然快得多 3、页表虚拟内存必须有某种方法来判定一个虚拟页是否缓存在DRAM中的某个地方。如果是，系统还必须确定这个虚拟页存放在哪个物理页(主存)。如果不命中还必须判断这个虚拟页存放在磁盘的哪个位置上，在物理页中选择一个牺牲页，并将虚拟页从磁盘复制到DRAM中，替换这个牺牲页。(操作系统为每个进程都维护一个独立的页表) 页表：将虚拟页映射到物理页。每次地址翻译硬件将一个虚拟地址转换为物理地址时，都会读取页表，操作系统负责维护页表的内容，以及在磁盘与DRAM之间来回传送页。 我们将假设每个PTE是由一个有效位(valid bit)和一个n位地址字段组成，有效位表明了该虚拟页当前是否被缓存在DRAM中。如果设置了有效位，那么地址字段就表示DRAM中相应的物理页的起始位置，这个物理页中缓存了该虚拟页。 如果没有设置有效位，那么一个空地址表示这个虚拟页还未被分配。否则，这个地址就指向该虚拟页在磁盘上的起始位置。 4、缺页DRAM缓存不命中称为缺页。 自己的理解：在cpu获取虚拟页中的数据时，地址翻译硬件去读页表的页表记录的有效位，如果有效位为0则推断出该虚拟页未被缓存，并且触发一个缺页异常。缺页异常调用内核中的缺页异常处理程序，该程序会在主存的PP(物理页)中选择一个被缓存的VP作为牺牲页，接下来将要缓存的vp从磁盘中加载出来缓存到主存上去(替换牺牲页)。 5、地址翻译当页面命中时，CPU硬件执行的步骤： 处理器生成一个虚拟地址，并把它传送给MMU。 MMU生成PTE地址，并从高速缓存/主存请求得到它。 高速缓存/主存向MMU返回PTE。 MMU构造物理地址，并把它传给告诉缓存/主存。 高速缓存/主存返回所请求的数据字给处理器。 缺页，CPU硬件执行步骤： 处理器生成一个虚拟地址，并把它传送给MMU。 MMU生成PTE地址，并从高速缓存/主存请求得到它。 高速缓存/主存向MMU返回PTE。 PTE中的有效为是0，所以MMU触发了一次异常，传递CPU中的控制到操作系统内核中的缺页异常处理程序。 缺页处理程序确定出物理内存中的牺牲页，如果这个页面修改了则把它换出到磁盘。 缺页处理程序页面调入新的页面，并更新内存中的PTE。 缺页处理程序返回到原来的进程，再次执行导致缺页的指令，CPU将引起缺页的虚拟地址重新发送给MMU。","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"虚拟内存","slug":"虚拟内存","permalink":"http://blog.3amupupup.online/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"}]},{"title":"进程","slug":"进程","date":"2021-03-18T03:09:52.070Z","updated":"2021-03-18T03:09:52.070Z","comments":true,"path":"2021/03/18/进程/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E8%BF%9B%E7%A8%8B/","excerpt":"","text":"fork:fork()函数man手册： fork函数通过调用它的进程复制出一个新的进程(谁调用它复制谁，准确说是共享（比如代码段），对于私有数据采用写时复制机制)。 子进程的父进程id与父进程相同 子进程不继承父进程的内存锁 子进程的资源利用率和cpu使用时间计数会被置0。 子进程信号集为空(进程运行过程中收到的信号都会保存在一个集合中)。 子进程不继承父进程的信号量(引自百度百科：信号量的值与相应资源的使用情况有关，当它的值大于 0 时，表示当前可用的资源数的数量；当它的值小于 0 时，其绝对值表示等待使用该资源的进程个数。信号量的值仅能由 PV 操作来改变。) 子进程不继承父进程的记录锁(The child does not inherit record locks from its parent (fcntl(2))) 子进程不继承父进程的计时器。 fork调用的一个奇妙之处就是它仅仅被调用一次但是返回两次： 为什么能返回两次：父进程创建子进程时，子进程共享父进程上下文，其中上下文包含程序计数器，它里面存储的是程序要执行的下一条cpu指令。程序执行到return之前，子进程已完成创建，并且通过wake_up_new_task函数将子进程添加到可调度队列中去了，此时子进程共享父进程的程序计数器，它们的程序计数器里的指令都指向tracehook_report_clone_complete函数，因此当子进程拿到cpu时，会从tracehook_report_clone_complete开始执行直至return。因此调用fork函数会有两次返回，一次是父进程中另一次是在子进程中。 函数，当子进程拿到cpu时，会执行程序计数器中的指令即return，所以fork函数会返回两次，一次是在父进程中，一次是在子进程中)。 它可能有三种不同的返回值： 在父进程中，fork()返回新创建的子进程的pid。 在子进程中，fork()返回0。 如果fork()出现错误，返回一个负值。 在fork函数执行完毕之后，如果创建进程成功，则出现两个进程，一个是子进程一个是父进程。在父进程中返回新创建子进程的pid，在子进程中返回0，可以通过fork返回值判断当前进程是父进程还是子进程。 另外根据程序的输出信息：父进程中的age结果为-1，子进程中的age为1，但是age的地址在父子进程中相同。父进程和子进程共享内存，但是不共享私有数据，使用了写时复制的机制。但是pid不同(现阶段认知)。内存地址相同但是值却不相同，这里需要学习一下操作系统-虚拟内存。这里解释下：虽然父子进程中的age的内存地址相同，但是他们彼此独立不可见，虚拟内存地址相同但是它们各自对应的物理地址不相同。 #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main() { int age = 0; int pid; pid = fork(); if(pid &lt; 0) { printf(&quot;fork() error.\\n)&quot;); exit(-1); } else if (pid == 0) { age++; printf(&quot;I am child and my pid = %d, age = %d, addr = %p\\n&quot;,getpid(),age,&amp;age); } else if (pid &gt; 0) { age--; printf(&quot;I am parent and my Pid=%d, age = %d, addr = %p\\n&quot;,getpid(),age,&amp;age); } return 0; } // 编译执行结果： // I am parent and my Pid=13086, age = -1, addr = 0x7fffc4e4dc98 // I am child and my pid = 13087, age = 1, addr = 0x7fffc4e4dc98 waitwaitpidpid_t waitpid(pid_t pid, int *statusp, int options); 当options=0时，waitpid挂起调用进程的执行，直到它的等待集合中的一个进程终止；如果这个集合中的一个进程在刚调用的时刻就已经终止，那么waitpid立即返回。 判定等待集合的成员 等待集合的成员是由 pid 参数决定的： pid &gt; 0 ，等待的集合就是一个单独的子进程，它的进程id等于pid。 pid = -1，那么等待就是父进程的所有子进程组成的集合中的任意子进程。 pid &lt; -1，回收进程组id为abs(pid)的一组进程，也就是所有子进程。 pid = 0，回收 与调用进程组id相同组内的子进程。 修改默认行为 0 与wait基本没有区别。 WNOHANG 如果等待集合中的任何子进程都没有终止，那么立即返回(返回值为0)，如果有子进程退出返回退出子进程的pid，失败返回-1(没有子进程或者子进程死光了)。在等待子进程终止的同时如果想做其它事情，这个选项很有用。 #include &lt;unistd.h&gt; #include &lt;sys/wait.h&gt; #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; int main() { int status; int pid; pid = fork(); if(pid == 0) { printf(&quot;I&#39;m child.\\n&quot;); sleep(3); exit(0); } while((pid = waitpid(-1,&amp;status,WNOHANG)) &gt; 0) { printf(&quot;child exit.\\n&quot;); } printf(&quot;I&#39;m parent.\\n&quot;); return 0; } // 使用 WNOHANG 父进程不会等待自己成退出，所以执行效果是: 父进程、子进程执行各自的代码，父进程执行完毕之后退出，因为子进程sleep(3)，所以子进程在输出打印之后三秒钟退出。 WUNTRACED 挂起调动进程的执行，直到等待集合中的一个进程变成已终止或者停止。返回的pid为导致返回的已终止或被停止子进程的pid。默认的行为是只返回已终止子进程。在想要检查已终止或已停止的子进程时，这个选项比较有用。 #include &lt;unistd.h&gt; #include &lt;sys/wait.h&gt; #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; int main() { int status; int pid; pid = fork(); if(pid == 0) { printf(&quot;child run and pid = %d\\n&quot;,getpid()); printf(&quot;I&#39;m child.\\n&quot;); sleep(3); exit(0); } while((pid = waitpid(-1,&amp;status,WUNTRACED)) &gt; 0) { printf(&quot;child exit who pid = %d.\\n&quot;,pid); } printf(&quot;I&#39;m parent.\\n&quot;); return 0; } // root$ ./a.out // child run and pid = 26334 // I&#39;m child. // child exit who pid = 26334. // I&#39;m parent. WCONTINUED 挂起调用进程的执行，直到等待集合中一个正在运行的进程终止或者等待集合中一个被停止的进程收到SIGCONT信号重新开始执行。 组合使用：WNOHANG | WUNTRACED 立即返回，如果等待集合中的子进程都没有停止或者终止则返回0，如果有一个停止或者终止则返回该子进程的pid。 检查已回收子进程的退出状态 如果statusp参数是非空的，那么操作系统就会读取进程的PCB，保存在status指向的变量中。 status中保存的就是进程退出的信息，int是32bit，是否正常运行，退出码是多少，退出信号是多少。 #include &lt;unistd.h&gt; #include &lt;sys/wait.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main() { int status = 0; pid_t id = fork(); if(id &lt; 0) { perror(&quot;fork error!\\n&quot;); } else if(id == 0) // child { printf(&quot;i am child process\\n&quot;); int count = 0; while (count &lt; 5) { sleep(1); count++; printf(&quot;sleep 1\\n&quot;); } // int ret = 1/0; // exit(99); exit(0); } // parent printf(&quot;father wait before.\\n&quot;); pid_t ret = waitpid(id,&amp;status,0); printf(&quot;status = %d\\n&quot;,status); // 保存子进程的返回状态 if(ret &gt; 0) { printf(&quot;子进程终止信号: %d\\n&quot;, status &amp; 0x7f); // 0 表示是正常退出 printf(&quot;子进程退出码: %d\\n&quot;,(status &gt;&gt; 8) &amp; 0xff); printf(&quot;wait success!\\n&quot;); if(status &amp; 0x7f) // 非0则说明子进程不是正常退出的 { printf(&quot;child run error!\\n&quot;); } else { if((status&gt;&gt;8) &amp; 0xff) // 运行成功但是结果不正确 { printf(&quot;child run success, but result is not right, exit code: %d\\n&quot;,(status&gt;&gt;8)&amp;0xff); } else { printf(&quot;child run success and result is right,exit code: %d\\n&quot;,(status&gt;&gt;8)&amp;0xff); } } } else { printf(&quot;wait failed!\\n&quot;); } printf(&quot;father wait after.\\n&quot;); return 0; } 图中在子进程sleep的时候给其发送了一个SIGSTOP信号导致子进程退出，status中保存的是子进程终止的状态信息。 标准库中也提供一些宏函数来检测进程的退出状态： WIFEXITED(status): 如果为正常子进程终止子进程的返回状态，则为真。(查看子进程是否正常退出：! (status &amp; 0x7f)) WEXITSTATUS(status): 如果WIFEXITED(status)为非零，提取子进程退出码。(查看子进程退出码: (status&gt;&gt;8)&amp;0xff)) #include &lt;unistd.h&gt; #include &lt;sys/wait.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main() { int status = 0; pid_t id = fork(); if(id &lt; 0) { perror(&quot;fork error!\\n&quot;); } else if(id == 0) // child { printf(&quot;i am child process\\n&quot;); int count = 0; while (count &lt; 3) { sleep(1); count++; printf(&quot;sleep 1\\n&quot;); } int ret = 1/0; exit(10); } // parent printf(&quot;father wait before.\\n&quot;); pid_t ret = waitpid(id,&amp;status,0); printf(&quot;status = %d\\n&quot;,status); // 保存子进程的返回状态 if(WIFEXITED(status)) // 为真说明是正常退出的 { printf(&quot;child exit code: %d\\n&quot;,WEXITSTATUS(status)); } else { printf(&quot;child exit error!\\n&quot;); } printf(&quot;father wait after.\\n&quot;); return 0; } IPCpipe#include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;sys/wait.h&gt; int main() { int fd[2]; pipe(fd); // fd[1]是写端，fd[0]是读端 int pid = fork(); if(pid == 0) { sleep(3); write(fd[1],&quot;hello world\\n&quot;,13); } else if(pid &gt; 0) { waitpid(-1,NULL,0); char buf[20]={0}; int ret = read(fd[0],buf,sizeof(buf)); // read会阻塞等待 if(ret&gt;0) write(STDOUT_FILENO,buf,ret); } return 0; } 管道大小 [root@iZbp11u8qxiwepq15dm1liZ ComputerSystem]# ulimit -a core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 6946 max locked memory (kbytes, -l) 64 max memory size (kbytes, -m) unlimited open files (-n) 65535 pipe size (512 bytes, -p) 8 POSIX message queues (bytes, -q) 819200 real-time priority (-r) 0 stack size (kbytes, -s) 8192 cpu time (seconds, -t) unlimited max user processes (-u) 6946 virtual memory (kbytes, -v) unlimited file locks (-x) unlimited 可以看到在linux系统上pipe size 为512bytes * 8 = 4096bytes。 优点：简单 缺点： 只能有血缘关系的进程之间才能使用 只能单向通信(半双工通信)，如果需要双向通信需要创建两个管道 FIFO有名管道，实现无血缘关系进程通信。 创建一个管道的伪文件 int mkfifo(const char *pathname, mode_t mode); mkfifo fifoName 命令创建 内核会给fifo文件开辟一个缓冲区，操作fifo文件，可以操作缓冲区，实现进程通信–实际上就是文件读写 #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/types.h&gt; #include &lt;sys/stat.h&gt; #include &lt;fcntl.h&gt; #include &lt;string.h&gt; #define FIFO &quot;/root/ComputerSystem/myfifo&quot; // shell: mkfifo myfifo int main() { int fd = open(FIFO,O_WRONLY); // 如果没有程序 read，open会阻塞 char buf[256]; int num = 1; while(1) { memset(buf,0x00,sizeof(buf)); sprintf(buf,&quot;hello%d&quot;,num++); write(fd,buf,strlen(buf)); sleep(1); } close(fd); return 0; } // 若无读端写端open阻塞 #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/types.h&gt; #include &lt;sys/stat.h&gt; #include &lt;fcntl.h&gt; int main() { int fd = open(&quot;myfifo&quot;,O_RDONLY); char buf[256]; int num = 1; while(1) { int ret = read(fd,buf,sizeof(buf)); if(ret &gt; 0) { printf(&quot;read:%s\\n&quot;,buf); } } close(fd); return 0; } // 若无写端读端阻塞，有点类似golang里的无缓冲channel linux系统上通过命令：man 7 signal 查看信号的手册 若读端关闭，写端也会终止。至于为什么会关闭，如下解释： 执行写端程序时，open函数打开管道文件 myfifo，由于没有读端，所以写端会阻塞住。当执行读端程序之后 open停止阻塞 继续向下执行开始往管道里写数据。当关闭读端时，操作系统发送 sigpipe 信号给写端。由图可知 sigpipe 是一个Term(terminate)信号，所以写端程序终止退出。 nmap","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"进程","slug":"进程","permalink":"http://blog.3amupupup.online/tags/%E8%BF%9B%E7%A8%8B/"}]},{"title":"汇编笔记","slug":"汇编笔记","date":"2021-03-18T03:09:52.070Z","updated":"2021-03-18T03:09:52.071Z","comments":true,"path":"2021/03/18/汇编笔记/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/","excerpt":"","text":"AX = AH + AL BX = BH + BL CX = CH + CL DX = DH + DL 数据寄存器 段地址寄存器：偏移地址寄存器 DS SP ES BP SS SI CS DI ​ IP(和指令有关) ​ BX u指令：将内存某个地址开始的字节全部当做指令 d指令：将某个内存地址开始的字节全部当做数据 指令和数据在内存中是没有区别的 cpu中的cs段地址寄存器和ip这个偏移地址寄存器组合的时候，从中读取的内容当作指令来执行 指令是有长度的，一条指令可以由多个字节构成 执行过程： 1、cpu从cs:ip所指向的内存单元读取指令，存放到指令缓存器中 2、ip = ip+所读指令的长度，从而指向下一条指令 3、执行指令缓存器中的内容，毁到步骤1 汇编指令 jmp 转移指令，可以修改cs和ip这两个寄存器 决定了cpu从哪里读取指令 debug调试工具： r：可以查看和改变寄存器中的内容 d：可以查看内存中的内容 u：可以将内存中的机器指令翻译成汇编指令 u:地址 a：向内存写入一条汇编指令 t：执行当前cs:ip所指向的机器指令 e：可以改写内存中的内容","categories":[],"tags":[]},{"title":"C深入剖析","slug":"C深入剖析","date":"2021-03-18T03:09:52.069Z","updated":"2021-03-18T03:09:52.070Z","comments":true,"path":"2021/03/18/C深入剖析/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/C%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90/","excerpt":"","text":"定义和声明 定义：编译器创建一个对象，为这个对象分配一块内存并给它取一个名字，名字就是我们常说的变量或对象名。 int a; 声明：告诉编译器，这个名字已经匹配到一块内存上了；告诉编译器，这个名字预定了，其它地方不能再使用，这种声明的最典型例子就是声明一个函数；声明不会分配内存。 extern inn a; void func(int a); //声明一个函数 struct #include &lt;stdio.h&gt; struct stu { } s1; int main(){ printf(&quot;%lu\\n&quot;,sizeof(s1)); // 0 return 0; } // 编译器gcc 柔性数组 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; typedef struct { int a; int b[]; } soft_arr; int main() { printf(&quot;%lu\\n&quot;,sizeof(soft_arr)); // 4 soft_arr *p = malloc(sizeof(soft_arr)+sizeof(int)); free(p); return 0; } 结构中最后一个成员允许是一个未知大小的数组，这个成员叫做柔性数组。sizefo 返回这种类型的大小不包括柔性数组的内存。包含柔性数组成员的结构用malloc进行内存动态分配。(应用：比如网络通信，收发数据包) union union Person { char *name; int age; char *addr; double balance; }; int main() { printf(&quot;%lu\\n&quot;,sizeof(union Person)); return 0; } union维护足够的空间来置放多个成员的某一个成员，而不是为每个数据成员配置空间。在union中所有成员公用一个空间，同一时间只能存储其中一个数据成员，所有数据成员拥有相同的起始地址。 一个union需要配置足够的空间来容纳所有成员。上述例子中：double占用内存空间最大，所以Person的内存大小是8字节。 大小端对union的影响： union T { char a; int b; }; int main() { union T t1; t1.b = 1; printf(&quot;%d\\n&quot;,t1.a); return 0; } enum enum Color { RED, BLACK, WHITE, YELLOW, }; int main(){ RED = 3; // expression is not assignable return 0; } auto 编译器在默认缺省的情况下，所有变量都是auto。 register 请求编译器尽可能的将这个变量存在cpu内部的寄存器中而不是通过内存寻址访问。register变量可能不存放在内存中，所以不能用&amp;符取地址。 static 修饰变量。 变量分局部变量和全局变量，被static修饰它们都存在于内存的静态区。 静态全局变量：作用域仅限于变量被定义的文件中。 局部静态变量：只能在定义这个局部静态变量的函数使用，即使函数调用结束，这个变量也不会消失。 修饰函数。 函数前加static称为静态函数，静态不是指存储方式，而是此函数的作用域仅限于本文件内。 switch int main(){ int a = 4; int c=6; switch (a) { case 1: printf(&quot;1\\n&quot;); break; default: printf(&quot;default\\n&quot;); case 2: printf(&quot;2\\n&quot;); case 3: printf(&quot;3\\n&quot;); // case c: // error // printf(&quot;%d&quot;,c); // break; // case 3.14: // error // printf(&quot;3.14\\n&quot;); } } // output: // default // 2 // 3 case后只能是整形或字符型常量或常量表达式 End0 0x01&lt;&lt;2+3 结果为32，+的优先级比&lt;&lt;高。 左移右移的位数不能大于数据的长度，不能小于0。 ++i、i++ int main(){ int i = 0; int j = (++i,++i,++i); // ++i 先自增再进它其他运算。i在遇见逗号之后认为本计算单位已经结束，然后进行自增。 printf(&quot;j = %d\\n&quot;,j); // 3 int k = 0; int z = (k++,k++,k++); // i++ 先进行其它运算再自增 printf(&quot;z = %d\\n&quot;,z); // 2 int x = 0; int y = (x++) + (x++) + (x++); printf(&quot;y = %d\\n&quot;,y); // 1+1+1=3 x遇到分号之后才认为本次计算单位已结束，x这时候才会进行自加 } ++i+++i+++i int main(){ int a = 1; int b = 2; int ret = a+++b; // 贪心算法：a++ + b printf(&quot;ret = %d\\n&quot;,ret); // ret = 3 } #define宏定义注释符号 #define BSC // #define BMC /* #define EMC */ int main(){ int a = 10;BSC a is int DMC input a number:EMC } 注释先于预处理指令被处理。当发生宏替换时，注释已经处理完毕，再出现//、/*则会出现错误。 宏定义中的空格 #define SUM(x) (x)+(x) int main(){ int ret = SUM (3); return 0; } 这个空格仅在定义的时候有效，在使用这个宏函数的时候，空格会被忽略掉。因此：SUM(x) 和SUM (x)是一样的。 duweideMacBook-Pro:test duwei$ cat test.c #define SUM(x) (x)+(x) int main(){ int ret = SUM (3); return 0; } duweideMacBook-Pro:test duwei$ gcc -E test.c -o test.i duweideMacBook-Pro:test duwei$ cat test.i # 1 &quot;test.c&quot; # 1 &quot;&lt;built-in&gt;&quot; 1 # 1 &quot;&lt;built-in&gt;&quot; 3 # 361 &quot;&lt;built-in&gt;&quot; 3 # 1 &quot;&lt;command line&gt;&quot; 1 # 1 &quot;&lt;built-in&gt;&quot; 2 # 1 &quot;test.c&quot; 2 int main(){ int ret = (3)+(3); return 0; } duweideMacBook-Pro:test duwei$ - 预处理余下部分暂时省略，以后回来看 - 略 - 略 - 略 - int *p = NULL和 *p = NULL的区别 - ```c int *p = NULL; ``` 定义一个指针变量p，其指向的内存里面保存的是int类型的数据，在定义变量p的同时把p的值设为0x00000000，这个过程叫初始化，是在编译的时候进行的。 - ```c int *p; *p = NULL; ``` 第一行代码，定义了一个指针变量p，其指向内存里保存的是int类型的数据，此时p变量本身是多少不可知，也就是说p变量此时指向的内存地址可能是个非法值。第二行代码给*p赋值为NULL，也就是给 *p指向的内存赋值NULL。由于p变量的内存地址可能是非法的，所以在调试时编译器可能会报错。 - ```c int main(){ char *p1 = &quot;abcdef&quot;; printf(&quot;p1 = %p\\n&quot;,p1); // p1 = 0x109002f82 printf(&quot;p1 = %p\\n&quot;,p1+1); // p1 = 0x109002f82 printf(&quot;p1 = %p\\n&quot;,p1+2); // p1 = 0x109002f82 printf(&quot;&amp;p1 = %p\\n&quot;,&amp;p1); // &amp;p1 = 0x7ffee6bfda48 char p2[] = &quot;123456&quot;; printf(&quot;p2 = %p\\n&quot;,p2); // p2 = 0x7ffee6bfda41 printf(&quot;&amp;p2 = %p\\n&quot;,p2+1); // &amp;p2 = 0x7ffee6bfda42 printf(&quot;&amp;p2 = %p\\n&quot;,p2+2); // &amp;p2 = 0x7ffee6bfda43 } 结论： 数组名即为数据本身 数组作为参数传递给函数时，数组的地址赋值给形参，发生降维。 a和&amp;a的区别(数组名) int main(){ int a[5] = {1,2,3,4,5}; int *ptr = (int *)(&amp;a+1); printf(&quot;*(a+1)=%d\\n*(ptr-1))=%d\\n&quot;,*(a+1),*(ptr-1)); // *(a+1)=2，*(ptr-1))=5 } 结论： &amp;a代表的是数组地址，&amp;a+1，加上的是sizeof(a)，指向a[4]的下一个元素。 a代表的是首元素地址。 定义为数组，声明为指针 int arr[3] = {1,2,3}; int main(){ extern int *arr; } 将arr声明为指针会造成访问方式的错误，得出意外的结果。本应该是直接读取到arr的内存地址然后进行偏移操作，但是这里声明为指针，导致了访问方式的改变，访问时会先读取arr所在内存空间存放的内存地址，然后再进行偏移操作。 定义为指针，声明为数组 char *p = &quot;abcd&quot;; int main(){ extern char p[]; } 也会因为定义和声明的方式不一样造成访问方式不一样从而得到意外的结果。 指针和数组对比 指针 数组 保存数据的地址，任何被存入指针变量p的数据都会被当做地址处理。p本身的地址有编译器另外存储，存储在哪里我们并不知道。 保存数据，数组名a代表的是数组首元素的地址而不是数组的首地址，&amp;a才是整个数组的首地址。a本身的地址由编译器另外存储，存储在哪里，我们并不知道。 间接访问数据，首先取得指针变量p的内容，把它当做地址，然后从这个地址提取或者写入数据。指针可以以指针的形式访问*(p+i)；也可以以下标的方式访问p[i]。但是其本质都是先取p的内容然后加上 i * sizeof(类型)个byte作为数据的真正地址。 直接访问数据，数组名a是整个数组的名字，数组内每个元素并没有名字。只能通过”具名+匿名”的方式来访问其它某个元素，不能把数组当做一个整体来进行读写操作。数组可以以指针的形式访问*(pa+i)；也可以以下标的方式访问a[i]。但其本质都是a所代表的数组的首元素地址加上 i * sizeof(类型)个byte作为数据的真正地址。 通常用于动态数据结构 通常用于存储固定数目且数据类型相同的元素 相关函数malloc和free 隐式分配和删除 通常指向匿名数据（也可指向具名数据） 自身即为数组名 地址强制转换 int main(){ int a[4] = {1,2,3,4}; int *ptr1 = (int *)(&amp;a+1); int *ptr2 = (int *)((int)a+1); printf(&quot;ptr1[-1] = %x\\n&quot;,ptr1[-1]); printf(&quot;*ptr2 = %x\\n&quot;,*ptr2); return 0; } 32位系统下： 64位系统下会报错：Segmentation fault 个人看法：a代表的是首元素地址，将其强转成int然后+1再强转成int，即将a地址进行+1操作然后赋值给ptr2。在32位下指针的长度和 int\\ 类型的长度相同，所以不会发生提升。但是在64位下，将4位的int* 提升为8位的地址会发生提升，提升后的地址远远大于当前数组所有元素的地址，所以在进行printf访问打印时会报错：Segmentation fault。 &amp;p[4][2] - &amp;a[4][2] 等于多少？ int main(){ int a[5][5]; int(*p)[4]; p = a; printf(&quot;%p,%d\\n&quot;,&amp;p[4][2] - &amp;a[4][2],&amp;p[4][2] - &amp;a[4][2]); } 无法向一个函数传递数组 C语言中，当一维数组作为函数参数时，编译器总把它解析成一个指向其首元素地址的指针。 函数本身没有类型，只有函数的返回值才有类型。 能否把指针变量本身传递给一个函数 main函数中的变量不是全局变量，只不过是它的声明周期和全区变量一样长而已。全局变量定义在函数外部。 函数指针的定义 char* (*func1)(char* p1, char* p2); func1是一个指针变量，指向一个有两个char*类型参数且返回值是char*类型的函数 *(int*)&amp;p // 32位 void Function(){ printf(&quot;Call Function.\\n&quot;); } int main(){ void (*p)(); *(int*)&amp;p = (int)Function; (*p)(); return 0; } p是一个指针变量，指向一个无参数无返回值的函数； (int*)&amp;p将p的地址强转成int数据类型的指针； *(int*)&amp;p 就是一个整型，要将函数Function的地址赋值给p得先将其转为整型。 (*(void(*)())0)(); void(*)()：表示一个指针，指向一个返回值时void且没有参数的函数。 (void(*)())0：表示将0强制转换成void(*)()这个函数指针类型。 (*(void(*)())0)：获取地址0开始的内存中的一段内容(解引用)。 (*(void(*)())0)()：函数调用。 函数指针数组 char* (*pf1)(char *p); // pf1是一个指向参数是char *类型，返回值时char*的函数的指针 char* (*pf2[3])(char *p); // pf2是函数指针数组 #include &lt;stdio.h&gt; #include &lt;string.h&gt; char * func1(char *p){ printf(&quot;%s\\n&quot;,p); return p; } char * func2(char *p){ printf(&quot;%s\\n&quot;,p); return p; } char * func3(char *p){ printf(&quot;%s\\n&quot;,p); return p; } int main(){ char *(*pf[3])(char *); pf[0]=func1; pf[1]=func2; pf[2]=func3; pf[0](&quot;func1&quot;); pf[1](&quot;func2&quot;); pf[2](&quot;func3&quot;); return 0; } 函数指针数组的指针 char* (*pf2[3])(char *p); // pf2是函数指针数组 char* (*(*pf2)[3])(char *p); // pf2是函数指针数组指针 常见内存错误以及对策 指针没有指向一块合法的内存 结构体成员指针未初始化 struct student{ char *name; int score; }stu,*pstu; int main(){ strcpy(stu.name,&quot;jim&quot;); stu.score=99; return 0; } 在实例化stu时，给name分配了四字节的内存，但并没有指向合法的地址。调用strcpy往所指向的内存拷贝”jim”，这块内存name指针根本就无权访问，导致出错。 #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; struct student{ char *name; int score; }stu,*pstu; int main(){ stu.name = (char*)malloc(sizeof(char)); strcpy(stu.name,&quot;jim&quot;); stu.score=99; printf(&quot;%s\\n&quot;,stu.name); free(pstu); return 0; } 没有为结构体指针分配足够的内存 函数入口校验 assert(NULL!=p); // 是一个宏而非函数 为指针分配的内存太小 内存分配成功，但未初始化 int i = 10; char *p = (char *)malloc(sizeof(char)); //在不确定变量初始值的时候可以初始化为0或者NULL int i = 0; char *p = NULL; //或者使用memset(起始地址,要被设置的值,要被设置的内存大小); int a[10]; memset(a,0,sizeof(a));","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"book","slug":"book","permalink":"http://blog.3amupupup.online/tags/book/"}]},{"title":"CppPrimer","slug":"CppPrimer","date":"2021-03-18T03:09:52.068Z","updated":"2021-03-18T03:09:52.068Z","comments":true,"path":"2021/03/18/CppPrimer/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/CppPrimer/","excerpt":"","text":"第七章 类类作用域和成员函数： 编译器分两步处理类：首先编译成员的声明，然后才轮到成员函数体(如果有的话)。因此，成员函数体可以随意使用类中的其它成员而无需在意这些成员出现的次序。 IO类属于不能被拷贝的类型，因此只能通过引用传递。 每个类都分别定义了它的对象被初始化的方式，类通过一个或者几个特殊的成员函数来控制其对象的初始化过程，被称为构造函数。构造函数的任务是初始化类对象的数据成员，无论何时只要类的对象被创建，就会执行构造函数。 构造函数不能被声明成const，当创建一个const对象时，直到构造函数完成初始化过程，对象才能真正取得其“常量”属性。因此，构造函数在const对象的构造过程中可以向其写值。 如果类没有显示的定义构造函数，那么编译器就会为我们隐式的定义一个默认构造函数。 某些类不能依赖于合成的默认构造函数： 只有当类没有声明任何构造函数时，编译器才会自动的生成默认构造函数。 合成的默认构造函数有可能执行错误的操作。如果定义在块中的内置类型或符合类型(比如数组和指针)的对象被默认初始化，则他们的值将是未定义的。该准则同样适用于默认初始化的内置类型成员。因此，函数内置类型或者复合类型成员的类应该在类的内部初始化这些成员，或者定义一个自己的默认构造函数。否则，用户在创建类对象时就可能得到未定义的值。 编译器不能为某些类合成默认的构造函数。例如：一个类中包含另一个类类型的成员且这个成员没有默认构造函数。","categories":[],"tags":[]},{"title":"mongo","slug":"mongo","date":"2021-03-18T03:09:52.068Z","updated":"2021-03-18T03:09:52.069Z","comments":true,"path":"2021/03/18/mongo/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/mongo/","excerpt":"","text":"常用命令mongo备份: mongoexport导出json文件./mongoexport --host 0.0.0.0:65535 -u username -p password --authenticationDatabase admin -d database -c collection -o file.json mongo恢复: mongoimport导入json文件./mongoimport --host 0.0.0.0:65535 -u username -p password --authenticationDatabase admin -d database -c collection --file file.json 创建集合:db.createCollection() 查看库信息:db.stats(); 查看集合信息:db.collection.stats() mongo遇见的一些问题删除数据，磁盘空间不释放:db.collection.remove({}, {multi: true})命令删除文档，删除之后不会将被删除数据的磁盘空间归还给操作系统，但是当有新数据插入时mongo能重新使用这块空间。(解决办法)","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://blog.3amupupup.online/tags/mongodb/"}]},{"title":"C和指针","slug":"C和指针","date":"2021-03-18T03:09:52.067Z","updated":"2021-03-18T03:09:52.067Z","comments":true,"path":"2021/03/18/C和指针/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/C%E5%92%8C%E6%8C%87%E9%92%88/","excerpt":"","text":"第3章3.1 基本数据类型3.1.1 整形家族长整型至少应该和整型一样，而整型至少应该和短整型一样长。 一、整型字面值 初始化之后不可以被修改。 在整数字面值后面添加L或l，可以使这个整数被解释为long类型值，字符U或u则用于把数值指定为unsigned整型值。如果添加lu则被解释为 unsigned long 整型值。字符常量的类型总是int。 int main() { 123L; 123u; 123LU; 0123; // 8进制 0x1561; // 16进制 printf(&quot;%lu\\n&quot;,sizeof(&#39;a&#39;)); // 4 return 0; } 二、枚举类型 以整型方式存储。 enum age { a, b, c, d }; 3.1.1 浮点类型int main() { printf(&quot;%lu\\n&quot;,sizeof(3.14)); // 8,缺省时默认为double类型 printf(&quot;%lu\\n&quot;,sizeof(3.14l)); // 16,long double printf(&quot;%lu\\n&quot;,sizeof(3.14f)); // 4 printf(&quot;%lu\\n&quot;,sizeof(double )); // 8 printf(&quot;%lu\\n&quot;,sizeof(float )); // 4 return 0; } 3.1.3 指针把内存想象成一条长街，每间房子都用一个唯一的号码进行标识。每一个位置包含一个值，这和它的地址式独立且显著不同的，即使他们都是数字。 一、指针常量 二、字符串常量 字符串：一串以NUL字节结尾的零个或多个字符。字符串通常存储在字符数组总，所以c语言中没有显示的字符串类型。 int main() { printf(&quot;%lu\\n&quot;,sizeof(&quot;&quot;)); // 1，虽然字符串为空，但是还是会分配内存 return 0; } 在程序中使用字符串常量时会生成一个“指向字符的常量指针”，当一个字符串常量出现于一个表达式中时，表达式所使用的值就是这些字符所存储的地址，而不是这些字符本身。因此，可以把字符串常量赋值给一个“指向字符的指针”。但是不能把字符串常量赋值给一个字符数组，因为字符串常量的直接值是一个指针，而不是这些字符本身。 3.2 基本申明int a; 3.2.1 初始化3.2.2 声明简单数组int arr[100]; 3.2.3 声明指针int *a; int *b,*c; char *message = &quot;hello world&quot;; /* char *message; message = &quot;hello world&quot;; */ 3.2.4 隐式声明函数如果不显示的声明返回值的类型，就默认返回整型。 f(int x) { return x*2; } int main() { printf(&quot;ret = %d\\n&quot;,f(3)); return 0; } 3.3 typedef为数据类型定义新的名字，而不是产生新的类型。 int const a; const int a; // 二者等价 int const *pi; // const修饰 *pi ，可以修改pi的值但是不可以修改pi所指向的地址的值 int * const cpi; // 可以修改cpi所指向地址的值但是不可以修改cpi指向的地址。 int const * const cpci; // 无论是cpci指针本身还是它所指向的地址的值 都不可以修改 3.5 作用域3.5.1 代码块作用域任何在代码块的开始位置声明的标识符都具有代码块作用域。 3.5.2 文件作用域在代码块之外声明的标识符都具有文件作用域。 3.5.3 原型作用域只适用于在函数原型中声明的参数名。 int f(int x) { return x; } 3.6 链接属性标识符的链接属性决定如何处理在不同文件中出现的标识符。 链接属性 external (extern) 属于external链接属性的表示符不论声明多少次、位于几个源文件都表示同一实体。 internal (static) 属于internal的连接属性的标识符在同一源文件内的所有声明中都指同一个实体。 none (auto) 没有链接属性的标识符总是被当做单独的个体。 3.7 存储类型变量的存储类型是指存储变量值的内存类型。变量的存储类型决定变量何时创建、何时销毁以及它的值将保持多久。 普通内存 运行时堆栈 硬件寄存器 变量的缺省存储类型取决于它的声明位置。在任何代码块之外声明的变量总是存储于静态内存中(不属于堆栈)，这类变量称为静态变量。静态变量在程序运行之前创建，在程序的整个执行期间始终存在。 在代码块内部声明的变量的缺省内存存储类型是自动的(automatic)，它存储于堆栈中，称为自动(auto)变量。在程序执行到声明自动变量的代码块时，自动变量才被创建，当程序离开该代码块时自行销毁。 对于在代码块内部声明的变量，加上static关键字，可以使它的存储类型从自动变为静态。具有静态存储类型的变量在整个程序执行过程中一直存在，而不仅仅在声明它的代码块的执行时存在。修改变量的存储类型并不表示修改该变量的作用域，它仍然只能在该代码块内部按变量名访问。函数形式参数不能声明为静态，因为实参总是在堆栈中传递给函数，用于支持递归。 register可以用于自动变量声明，提示他们应该存储于机器的硬件寄存器而不是内存中，这类变量称为寄存器变量(因为不在内存中，所以不能用&amp;取地址。) 初始化 静态变量 静态变量的初始化中，可以把可执行程序文件想要初始化的值放在当程序执行时变量将会使用的位置。当可执行文件载入到内存时，这个已经保存了正确初始值的位置将赋值给那个变量。完成这个任务并不需要额外时间，也不需要额外指令，变量将会得到正确的值。如果不显式的指定其初始值，静态变量将初始化为0。 自动变量 自动变量初始化需要更多的开销，因为当程序链接时还无法判断自动变量的存储位置。 第六章 指针6.14 总结声明一个指针变量并不会自动分配任何内存。 第七章 函数int* find_int(int key, int arr[], int length); 这种声明方式，也就是用单独的一行给出参数的类型，那么编译器就只记住函数返回值的类型，不保存函数的参数数量和类型信息。 int func(); 这种声明会被解释为旧式风格的声明，只保存了函数的返回值类型。 int func(void); 使用新风格原型时，得加上void提示没有任何参数7.3 函数的参数C函数的所有参数均以“值传递调用”方式进行传递。(参数为指针时也会发生值拷贝，拷贝地址) 7.6 可变参数列表7.6.1 stdarg宏第八章 数组 下标：为了对下标表达式求值，编译器在程序中插入指令，取得a的值，并把它与整形的长度(也就是4)相乘，这个乘法需要花费一定的时间和空间。 指针：尽管不存在下标，但还是存在乘法运算，1这个值必须和整数的长度相乘，然后再与指针相加。但是这里存在一个重大区别：循环每次执行时，执行乘法的运算都是两个相同的数(1和4)。结果，这个乘法只在编译时执行一次—-程序现在包含了一条指令，把4与指针相加。程序在执行时并不执行乘法运算。 int main() { int arr[100] = { 0 }, *ap; for (int i = 0; i &lt; 100; ++i) { // 下标 arr[i] = 0; } for (ap = arr; ap &lt; arr+10; ++ap) { // 指针 *ap = 0; } return 0; } 8.1 一维数组8.1.1 数组名int a; // 标量 int b[10]; // 集合，称为数组 数据名是常量指针。 数组名在两种情况下表示整个数组，其余一律表示首元素。 int arr[10]; sizeof(arr); &amp;arr;8.1.2 下标引用数组下标引用和间接访问完全相同。 C检查下标所涉及的开销比你想象的大得多。编译器必须在程序中插入指令，证实下标表达式的结果所引用的元素和指针表达式所指向的元素属于同一数组。这个比较操作需要程序中所有数组的位置和长度方面的信息。这将占用一些空间。当程序运行时，这些信息必须进行更新，以反映自动和动态分配的数组，这又将占用一定的时间。 8.1.3 指针与下标int main(){ int arr1[10],a; for ( a = 0; a &lt; 10; ++a) { arr1[a] = 0; } return 0; } 为了对下标表达式求值，编译器在程序中插入指令，取得a的值，并把它与整形的长度(4)相乘。这个乘法需要花费一定的空间和时间。 int main(){ int arr2[10],*ap; for (ap=arr2; ap &lt; arr2; ++ap) { *ap = 0; } return 0; } 这里的乘法运算出现在for语句的调整部分(++ap)，1这个值必须与整形的长度相乘，然后再与指针相加。但是这里存在很大的区别：循环每次执行时，执行乘法运算的都是两个相同的数(1和4)。结果这个乘法只会在编译时执行一次—-程序包含一条指令，把4与指针相加。程序在运行时并不执行乘法运算。 8.1.4 指针的效率8.1.5 指针和数组数组和指针不相等。 int a[5]; int *p; 声明一个数组时，编译器将根据声明所指定的元素数量为数组保存内存空间，然后创建数组名，它的值是一个常量，指向这段空间的起始位置。 声明一个指针变量时，编译器只为指针本身保留内存空间，它并不为任何整形值分配内存空间。而且指针变量并未被初始化为指向任何现有的内存空间，如果是一个自动变量，它甚至不会被初始化。 因此：*a是合法的。*b将访问内存中某个不确定的位置，或者导致程序终止。但是b++可以通过编译，a++缺不行，因为a是一个常量。 8.1.6 作为函数参数的数组名一个数组名作为参数传递给函数：在函数传参时就会发生拷贝。可知数组是一个地址常量，在传参给函数时，发生地址拷贝，数组名(地址常量)传递给函数的形参，形参实例化成一个指针变量，指针变量存放数组的地址常量。因此数组地址传入函数之后，发生降维，降维成一个指针。函数如果执行了下标应用，实际山是对这个指针进行间接访问操作，并且通过这种间接访问，函数可以访问和修改调用程序的数组元素。 8.1.7 声明数组参数int strlen(char *string); int strlen(char string[]);8.1.8 初始化char message1[] = &quot;Hello&quot;; char *message2 = &quot;Hello&quot;; 8.2.3 下标int matrix[3][10]; matrix martrix此时指向第一个二维数组 matrix+1 *(matrix+1) *(matrix+1)+5 8.5 总结 在绝大多数表达式中，数组名是指向数组第一个元素的指针。只有两个规则例外： sizeof(arr)，返回整个数组占用的字节，而不是返回指针占用的字节。 &amp;arr，单目操作符&amp;返回一个指向整个数组的指针，而不是指向数组第一个元素的指针的指针。 指针和数组不相等。 声明一个数组，同时也分配了一些内存，用于容纳数组元素。 声明一个指针，只分配用于容纳指针本身的空间。 当数组名作为函数参数传递。实际传递的是一个指向数组第一个元素的指针。函数所接收到的参数实际上是原参数的一份拷贝，所以函数可以对其进行操纵而不影响实际的参数。但是对指针执行间接访问操作允许函数修改原先数组的元素。 数组形参既可以声明成数组也可以声明成指针，这两种声明形式只有当他们作为函数形参时才相等。 第九章 字符串、字符和字节9.1 字符串基础字符串是一串零个或多个字符，以NUL结尾。 9.3 不受限制的字符串函数9.3.1 复制字符串char *strcpy(char *dst, char const *src); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char dest[] = &quot;abcde&quot;; strcpy(dest,&quot;xyz&quot;); printf(&quot;%s\\n&quot;,dest); // xyz return 0; } 目标参数以前的内容将被覆盖，即使新的字符串比dest原先的内存更短。(NUL也会被复制) 9.3.2 连接字符串char * strcat(char *dst, char const *src); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char message[100] = {0}; strcat(message,&quot;hello&quot;); strcat(message,&quot; world&quot;); printf(&quot;%s\\n&quot;,message); return 0; } 9.3.3 函数的返回值。strcpy和strcat都返回它们第一个参数的一份拷贝，就是指向目标字符数组的指针。 9.3.4 字符串比较int strcmp(char const *s1, char const *s2); int main() { int ret = strcmp(&quot;duwei&quot;,&quot;zhangsan&quot;); /* if (ret){ // ret的值有三种情况：大于0，等于0，小于0。将其用bool值表达是一种坏风格，正确的方式是将其与0值进行比较 printf(&quot;duwei &gt; zhangsan&quot;); } */ if (ret &gt; 0){ printf(&quot;duwei &gt; zhangsan&quot;); } return 0; }9.5 字符串查找9.5.1 查找一个字符#include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char message[] = &quot;learn C language.&quot;; char *p1 = strchr(message,&#39;a&#39;); // 返回第一次出现的位置 printf(&quot;p1 - message = %lu\\n&quot;,p1-message); char *p2 = strrchr(message, &#39;a&#39;); // 返回最后一次出现的位置 printf(&quot;p2 - message = %lu\\n&quot;,p2-message); return 0; } 9.5.2 查找任何几个字符char *strpbrk(char const *str, char const *group); 查找一组字符串在字符串中第一次出现的位置。 #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char message[] = &quot;learn C language.&quot;; char *p = strpbrk(message,&quot;zC&quot;); // 返回z或者C第一次出现的位置， printf(&quot;%s\\n&quot;,p); return 0; } 9.5.3 查找一个子串char *strstr(char const *s1, char const *s2); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char message[] = &quot;learn C language.&quot;; char *p = strstr(message,&quot;lang&quot;); printf(&quot;%s\\n&quot;,p); return 0; } 9.9 内存操作","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"book","slug":"book","permalink":"http://blog.3amupupup.online/tags/book/"}]},{"title":"tcp:ip","slug":"tcp:ip","date":"2021-03-18T03:09:52.067Z","updated":"2021-03-18T03:09:52.067Z","comments":true,"path":"2021/03/18/tcp:ip/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/tcp:ip/","excerpt":"","text":"第一章1.2 分层tcp/ip通常被认为是一个四层协议系统： 链路层 也称作数据链路层或网络接口层。通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。它们一起处理与电缆（或者任何传输介质）的物理接口细节。 网络层 也称为互联网层，处理分组在网络中的活动。网络层IP提供一种不可靠的服务，它只是尽可能的快地把数据包从源结点送到目的结点，但是并不提供任何可靠性保证。TCP在不可靠的IP层上提供了一个可靠的运输层（TCP采用超时重传、发送和接收端的确认分组等机制）。ICMP是IP协议的附属协议，IP层用它来与其它主机或路由器交换错误报文和其它重要信息。 运输层 为两台主机上的应用提供端到端的通信。TCP/IP协议族中有两个互不相同的传输协议：tcp（传输控制协议）和udp（用户数据报协议）。虽然TCP使用不可靠的IP服务，但是它缺提供一种可靠的运输层服务。UDP是不可靠的，它不能保证数据安全无误的到达最终目的地。 应用层 负责处理特定的应用程序细节。 1.4 互联网的地址A、B、C类为商用 1.6 封装 1.7 分用 1.9 端口号TCP和UDP采用16bit位的端口号来识别应用程序。 客户端通常对它使用的端口号并不关心，只需要保证使用的端口号在本机是唯一就行了。客户端端口号又称临时端口号。 第二章 链路层链路层主要有三个目的： 为IP模块接受和发送数据报 为ARP模块发送ARP请求和接受ARP应答 为RARP发送RARP请求和接受RARP应答 2.7 环回接口使运行在同一台主机上的客户端程序和服务端程序能投通过TCP/IP进行通信。一个传给环回接口的IP数据报不能在任何网络上出现。 第三章 IP3.2 IP首部版本号字段：协议版本号，当前是ipv4。 首部长度字段：4个比特位，能表示范围是0~15，每个长度单位为4字节，所以首部的最大长度为60字节。 TOS: 总长度字段：整个ip数据报的长度（以字节为单位，该字段长为16个比特，由此可知该字段表示的数值范围是0~65535，也说明一个ip报文的最大长度是65535字节）。利用首部长度字段和总长度字段就可以知道ip数据报中数据内容的起始位置和长度（首部长度+1 ， 总长度-首部长度）。 标识字段： 标志字段：唯一标识主机发送的每一份数据报，通常每发送一次报文它的值就会增加1。 片偏移字段： TTL生存时间字段：表示数据报可以经过的最多路由器数。TTL通常由源主机设置（32或64），经过一个处理它的路由器，ttl的值就减去1，当该字段为0时，数据报被丢弃，并发送ICMP报文通知源主机。 协议字段： 首部校验和字段：根据ip首部计算的校验和码（不对首部后面的数据进行计算） 选项字段：以32bit作为界限，有必要的时候插入0作为填充字节，以保证IP首部始终是32bit的整数倍 3.3 路由选择IP路由选择是简单的，特别对于主机来说，如果目的主机与源主机直接相连或者都在一个共享网络上（以太网或者令牌环网），那么IP数据就直接发送到目的主机上。否则，主机把数据报发往默认的路由器上，由路由器转发该数据报。 IP层在内存中存在路由表。当收到一份数据报并进行转发时，都要对该表进行搜索。当数据报来自某个网络接口时，IP首先检查目的IP地址是否为本机的IP地址之一或者IP广播地址。如果是，数据报就会被送到由IP首部协议字段所指定的协议模块进行处理。如果不是且IP层被设置为路由器的功能那么就对数据报进行转发，否则数据报被丢弃。 路由表 目的IP地址(Destination) 可以是一个完整的主机地址，也可以是一个网络地址。图中第一条是默认规则(0.0.0.0)，仅当只有一条可用路径时才匹配。 下一站（下一跳）路由器的IP地址，下一站路由器是指一个直接相连的网络上的路由器，通过它可以转发数据报。 标志 为数据报的传输指定一个网络接口。 IP路由选择功能 搜索路由表，寻找与目的IP地址完全匹配的表目（网络号和主机号都要匹配）。 搜索路由表，寻找能与目的网络号匹配的表目。如果找到则把报文发送给该表目指定的下一跳路由器或者直接连接的网络接口。 搜索路由表，寻找标志为“默认（default）”的表目，如果找到，则把报文发送给改表目指定的下一跳路由器。 完整的主机地址匹配在网络号匹配之前执行。只有当他们都失败后才会选择默认路由。 为网络指定一个路由器，而不必为每一个主机都指定一个路由器，可以极大缩小路由表的规模。 3.4 子网寻址 所有主机都要求支持子网编址。不再是把IP地址看成单纯的一个网络号和一个主机号组成，而是把主机号再分成一个子网号和一个主机号。原因：A类和B类地址为主机号分配了太多空间，A类：224-2（24位主机号:224，全0和全1是无效的，所以减去2），B类：216-2，事实上一个网络安排不了这么多主机。 例如上图中的B类地址：可以将主机号划分为8bit的子网号，8bit的主机号。也就是说将网络号是140.252的IP地址划分为254个子网，每个子网可以有254台主机。 3.5 子网掩码子网掩码用于确定IP地址中多少比特位用于子网号多少比特位用于主机号。 掩码是一个32bit的值，其中值为1的留给网络号和子网号，为0的比特留给主机号。 10101100 00010000 00000000 00000000 IP网段: 172.16.0.0 11111111 11111111 00000000 00000000 掩码: 16 10101100 00010000 00000000 00000000 IP网段: 172.16.16.0 11111111 11111111 11110000 00000000 掩码: 20 给定IP地址和子网掩码之后，主机就可以确定IP数据报的目的地是： 本子网上的主机 本网络中其它子网上的主机 其它网络上的主机 第六章 ICMPICMP报文是在IP数据报内部被传输的。 类型字段有15个不同的值，以描述特定类型的ICMP报文。某些ICMP报文还使用代码字段的值来进一步描述不同的条件。 检验和字段覆盖整个ICMP报文。ICMP的校验和时必须的。 第八章 TracerouteTTL字段的目的是防止数据报在选路时无休止的在网络中流动。 当路由器收到一份IP数据报时，如果其ttl字段时0或者1，则路由器不转发该数据报，路由器会将该数据报丢弃并给信源机发送一份ICMP超时信息，Traceroute程序的关键在于包含这份icmp信息的ip报文的信源地址是该路由器的地址。 Traceroute工作原理：发送一个ttl为1的ip数据报给目的主机，这样就得到了第一个路由器的ip地址；紧接着发送一个ttl为2的数据包给目的主机…….。继续该过程直到该数据报到达目的主机。Traceroute发送一份udp数据报给目的主机，但它选择一个不可能的值作为udp端口号(大于30000)，使目的主机的任何一个应用程序都不能使用该端口。因为，当该数据报到达时，使目的主机的udp模块产生一份“端口不可达”错误的icmp报文，此时Tracetoute程序需要做的就是区分接受到的icmp报文是超时还是端口不可达。 第九章 IP选路需要进行选路的数据报可以由本机产生，也可以由其它主机产生(此种情况下：主机必须被配置成一个路由器，否则通过网络接口接受到的数据报，如果目的地址不是本级就会被丢弃) IP搜索路由表的步骤： 搜索匹配的主机地址(网络号、主机号完全一致) 搜索匹配的网络地址(网络号一致) 搜索默认表项 匹配主机地址始终发生在匹配网络地址步骤之前。 9.2.1 路由表 标志G区分是直接路由还是间接路由(直接路由不设置G标志)：发往直接路由的分组中不但具有指明目的端的ip地址，还具有其链路层地址。当分组被发往一个间接路由时，IP地址指明的是最终的目的地，但是链路层指明的是网关(下一站路由器)。 第11章 用户数据报协议udp首部 11.5 IP分片物理网络层一般要限制每次发送数据帧的最大长度。任何时候IP层接收到一份要发送的IP数据报时，它要判断向本地哪个接口发送数据(选路)，并查询该接口获得MTU(最大传输单元,netstat -i)。IP把MTU与数据报长度进行比较，如果需要则进行分片。分片可以发生在原始发送端主机上，也可以发生在中间路由器上。 引自 《计算机网络》 标识（identification）：占16位。IP软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1，并将此值赋给标识字段。 但这个“标识”不是序号，因为IP是无连接服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的MTU而必须分片时，这个标识字段的值就被复制到所有的数据报片的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原 来的数据报。 标志（flag）：占3位，但目前只有两位有意义。 ​ – 标志字段中的最低位为MF（More Fragment）。MF=1即表示后面“还有分片”的数据报。MF=0表示这已是若干数据报片中的最后一个。 ​ – 标志字段中间的一位记为DF（Don’t Fragment），意思是“不能分片”。只有当DF=0时才允许分片。 片偏移 ：占13位。片偏移指出：较长的分组在分片后，某片在原分组中的相对位置。也就是说，相对于用户数据字段的起点，该片从何处开始。片偏移以8个字节为偏移单位。也就是说，每个分片的长度一定是8字节（64位）的整数倍。 第十七章 TCP:传输控制协议17.2 TCP的服务尽管tcp和udp都使用相同的网络层(IP)，tcp向应用层提供与udp完全不同的服务。tcp提供一种面向连接的、可靠的字节流服务。 tcp通过下列方式提供可靠性： 应用数据被分割成tcp认为最适合发送的数据块。（udp：应用产生的报文长度保持不变） 当tcp发出一个段之后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。 当tcp收到发自tcp连接另一端的数据，它将发送一个确认。 tcp将保持它首部和数据的校验和。（如果收到段的检验和有差错，tcp将丢弃这个报文段并不确认收到此报文段） tcp报文段作为IP数据报传输，而ip数据报的到达可能会失序，因此tcp报文段的到达也有可能失序。tcp将会对收到的数据进行排序然后交给应用层。 ip数据报会发生重复，因此接收端必须丢弃重复的数据。 tcp能提供流量控制。tcp连接的每一方都有固定大小的缓冲空间。tcp的接收端只允许另一端发送接收端缓冲区所能接纳的大小。（防止发送较快的主机使接收的较慢的主机缓冲区溢出） 17.3 TCP的首部tcp数据被封装在一个ip数据报中。 tcp首部： 16位的源端口号和目的端口号（用于寻找发端和接收端的应用程序），客户端ip、客户端端口、服务端ip、服务端端口可唯一确定一个tcp连接。 序号：标识从tcp发端向tcp收端发送的数据字节流，它表示在这个报文段中的第一个数据字节。如果将字节流看作在两个应用程序间的单向流动，则tcp用序号对每个字节进行计数。（序号是32bit，序号达到232-1后又从0开始。）当建立一个新的连接时，SYN标志位变成1。序号字段包含由这个主机选择的该连接的初始序号ISN(Initial Sequece Number)。该主机要发送的第一个字节序列号为ISN+1(SYN标志消耗了一个序号)。 确认序号：是发送端序号的下一个序号。只有ACK标志为1时确认序号才有效。发送ACK不需要任何代价，因为是包含在首部中的字段，一个tcp连接一旦建立起来，ACK标识总是被置为1。tcp提供全双工服务 首部长度：4bit，能表示的范围是0-15，单位是4字节，所以tcp首部最大为60字节。 标志位：6个标志位 URG：紧急指针有效 ACK：确认序号有效 PSH：接收方应尽快将这个报文交给应用层 RST：重建连接 SYN：同步序号，用来发起一个连接 FIN：发端完成发送任务 窗口：tcp的流量控制由连接的每一端通过声明的窗口大小提供。窗口大小为字节数，16bit因而窗口大小最大为65535字节。 检验和：覆盖整个tcp报文段—-首部和数据 紧急指针：只有URG标志置为1时才有效。 常见可选字段：最长报文大小，又称为MSS(Maximum Segment Size)，每个连接方通常都在通信的第一个报文段中声明这个选项，它指明本端能接收最大长度的报文段。 第十八章 TCP连接的建立与终止18.2 连接的建立与终止注：Flags [S.]，S表示SYN，“.”表示ACK 这是用telnet实现的一次通信，利用tcpdump进行抓包，如下是分析（iZbp11u8qxiwepq15dm1liZ表示本机）： 第一行：方向：iZbp11u8qxiwepq15dm1liZ &gt; 47.96.67.121。iZbp11u8qxiwepq15dm1liZ 通过54008端口发送一个SYN标志位为1(通过Flags字段得知)的报文给远端主机47.96.67.121的ssh端口–也就是22端口，此报文的序号即seq是：826162287（ISN），后面的字段暂时可以忽略。 第二行：方向：47.96.67.121 &gt; iZbp11u8qxiwepq15dm1liZ。远程主机47.96.67.121 回复一个SYN标志位为1的报文给 iZbp11u8qxiwepq15dm1liZ，此报文序号即seq是：1641364849，此报文中出现了ack字段（表示确认），只有在首部中ACK标志被置为1时才显示，说明此报文中SYN、ACK两个标志位为1，当ACK为1时确认序号生效—826162288 第三行：方向：iZbp11u8qxiwepq15dm1liZ &gt; 47.96.67.121。由于47.96.67.121发来的报文首部中序号是1641364849(第二行)，所以在给47.96.67.121 回包时会将确认序号置为 序号（1641364849）的下一个序号。 第四行：方向：47.96.67.121 &gt; iZbp11u8qxiwepq15dm1liZ。到这里连接建立成功，开始数据传输，据图第四行可知传输了21字节。 第五行：方向：iZbp11u8qxiwepq15dm1liZ &gt; 47.96.67.121。收到确认数据报文后通知发送端。 第六行：方向：iZbp11u8qxiwepq15dm1liZ &gt; 47.96.67.121。发送一个报文，标志位FIN为1，意思是给47.96.67.121说数据发送完毕，我要关闭了。 第七行：方向：47.96.67.121 &gt; iZbp11u8qxiwepq15dm1liZ。服务端回复一个ack给iZbp11u8qxiwepq15dm1liZ说 我已经收到你要关闭的消息了。 第八行：方向：47.96.67.121 &gt; iZbp11u8qxiwepq15dm1liZ。47.96.67.121发送FIN给iZbp11u8qxiwepq15dm1liZ说我关闭了。 第九行：方向：iZbp11u8qxiwepq15dm1liZ &gt; 47.96.67.121。告诉47.96.67.121我收到你的关闭消息了，然后发送一个ack向47.96.67.121确认。 18.4 最大报文段长度 最大报文长度(MSS)表示tcp穿往另一端的最大块数据长度。当一个连接建立时，连接双方都要通告各自的MMS(MSS只能出现在SYN报文段中)。上图中第一行：mss为1406。 18.5 TCP的半关闭TCP提供了连接的一段在结束了它的发送之后还能接收另一端的数据的能力。 18.6.1 2MSL等待状态当tcp执行一端主动关闭，并发回最后一个ack，该连接必须在TIME_WAIT状态停留的时间为2MSL(Max Segment LifeTime)，这样可以让tcp能够再次发送最后的ACK以防止这个ACK丢失。在2MSL等待期间，插口中使用的本地端口在默认情况下不能再被使用。 18.6.3 FIN_WAIT_2状态 18.7 复位报文段 向一个没有监听的端口发起连接，服务端返回了一个RST标志为1的报文。 第二十章20.6 慢启动在局域网络中，发送方一开始便向网络中发送多个报文段，直到达到接收方通告的窗口大小为止，这种方式是没有问题的。但是当发送端和接收端之间存在多个路由器和速率较慢的链路时，就有可能出现一些问题：一些中间路由器必须缓存分组(报文)，并有可能耗尽存储器的空间(存储器耗尽之后路由器会丢弃新收到的分组)。 tcp支持慢启动算法，该算法通过观察到新分组进入网络的速率应该和另一端返回确认的速率相同而进行工作。 慢启动为发送方tcp增加了另一个新窗口：拥塞窗口(cwnd)。当与另一个网络的主机建立tcp连接时，拥塞窗口被初始化为一个报文段大小(另一端通告的窗口大小)。每收到一个ack，拥塞窗口就增加一个报文段(cwnd以字节为单位，但是慢启动以报文段大小为单位进行增加)。发送方取拥塞窗口与通告窗口中的最小值作为发送上限(报文长度)。拥塞窗口是发送发使用的流量控制，通告窗口是接收方使用的流量控制。 拥塞窗口也不可能无限增大，在网络传输中，当某些点上的路由器网络容量达到了上限，于是中间路由器开始丢弃分组并通知发送方。 第二十一章 TCP的超时与重传tcp提供可靠的运输层：确认从另一端收到的数据(ack)，但数据和确认都可能会发生丢失。tcp通过在发送时设置一个定时器解决数据和确认丢失的问题，当定时器发生溢出时还没有收到该数据的确认就重传该数据。 对于每个连接，tcp管理四个定时器： 重传定时器：期望收到对端确认的最大等待时间。 坚持定时器：使窗口大小信息保持不断流动，当发送端的发送速度过快，接收方的缓冲区被打满时，接收方会通告窗口大小为0，此时发送方会暂停数据发送，坚持定时器的作用就是不断发送报文询问窗口大小防止出现死锁(接收端不通告新的窗口大小，发送方一直等待。) 保活定时器：可以检测到一个空闲连接的另一端何时崩溃或者重启。 2MSL定时器：测量一个连接处于TIME_WAIT状态的时间。 21.2 超时重传例子 21.3 往返时间测量tcp超时与重传中最重要的部分就是对一个给定的连接的往返时间(RTT)测量","categories":[],"tags":[]},{"title":"C Primer Plus","slug":"C Primer Plus","date":"2021-03-18T03:09:52.065Z","updated":"2021-03-18T03:09:52.066Z","comments":true,"path":"2021/03/18/C Primer Plus/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/C%20Primer%20Plus/","excerpt":"","text":"#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; #include &lt;errno.h&gt; #include &lt;stddef.h&gt; #define LEN 40 #define MAX 41 /* 常量：在程序使用之前已经预设定好，在整个程序的运行过程中没有变化 变量：在程序运行期间可能会被改变或者赋值 数据： 显示十进制数：%d 显示八进制数：%o 显示十六进制数：%x 指针&amp;数组： 数组名是首元素地址： arr[i]=*(arr+i) 二者等价 特殊情况： 1. sizeof(数组名) - 数组名表示整个数组 2. &amp;数组名 - 数组名表示整个数组 指针操作： 赋值：可以把地址赋给指针 解引用：*运算符获得指针指向地址上存储的值 取地址：&amp;运算符，指针也拥有自己的地址 指针与整数相加：int *a = 1; a+1 即 a的地址 + sizeof(int)*1，步长为a指向的数据类型的大小 指针求差 比较：如果要使用关系运算符比较两个指针，那么要确保两个指针指向同一数据类型的对象 解引用未初始化的指针：严重的错误 int main(void){ int *pt; //错误写法 int *pt = NULL; //正确写法 *pt = 100; // pt在定义之后未被初始化，其值是一个随机值，不能确定100的存储位置，这可能不会出什么错，但是也有可能擦写数据或代码，导致程序崩溃，因此创建指针必须初始化，特殊情况下可以将指针指向NULL printf(&quot;%d\\n&quot;, *p); return 0; } const： 1、把const或者非const数据的地址初始化为指向const的指针或者为其赋值是合法的。 int main(void){ int arr1[10] = {1,2,3,4,5,6,7,8,9,10}; const int arr2[10] = {11,12,13,14,15,16,17,18,19,20}; const int * pt = arr1; //把pt指向的int类型的值声明为const(注意是值而非地址)，所以不能够用*pt修改数组的值，但是能修改pt所指向的地址 pt = arr2; pt = &amp;arr1[3]; return 0; } 2、只能把非const数据的地址赋给普通指针， int main(void){ int arr1[10] = {1,2,3,4,5,6,7,8,9,10}; const int arr2[10] = {11,12,13,14,15,16,17,18,19,20}; const int * pt = arr1; int * pt2 = arr1; pt2 = arr2; //非法，只能将非const的数据的地址赋值给普通指针，否则通过指针就能改变const数组中的数组，显然不合理。 pt2 = &amp;arr1[3]; return 0; } 3、创建一个不能改变指向地址的指针，但是能改变指针指向的地址的值 int main(void){ int arr1[10] = {1,2,3,4,5,6,7,8,9,10}; const int arr2[10] = {11,12,13,14,15,16,17,18,19,20}; const int * pt = arr1; int * pt2 = arr1; pt2 = &amp;arr1[3]; int * const pt3 = arr1; pt3 = &amp;arr1[3]; //非法 *(pt3+1) = 100; printf(&quot;new = %d\\n&quot;,arr1[1]); return 0; } 指针和多维数组： int main(void){ int arr[3][4]; printf(&quot;%d\\n&quot;,**arr); // arr = arr[0] = &amp;arr[0][0],**arr 与 *&amp;arr[0][0]等价，**arrd第一次解引用表示arr[0],此时仍然是个地址所以需要再次解引用 printf(&quot;arr = %p, arr[0] = %p, arr[0][0] = %p\\n&quot;,arr,arr[0],&amp;arr[0][0]); // arr = 0x7ffeeeec7be0, arr[0] = 0x7ffeeeec7be0, arr[0][0] = 0x7ffeeeec7be0 return 0; } 指向数组的指针： int *p[]; //指针数组 int (*p)[]; // 数组指针 ----例题： int main(void){ int arr[10] = {100 ,2,3,4,5,6,7,8,9,10}; int res = max(arr); printf(&quot;%d\\n&quot;,res); return 0; } int max(int *arr){ int temp; for (int i = 1; i &lt; 10; ++i) { if (arr[0]&lt;arr[i]) { temp = arr[0]; arr[0] = arr[i]; arr[i] = temp; } } return arr[0]; } 分配内存 malloc 和 free 之前所使用的的存储类别有一个共同之处：在确定存储类别之后，根据已定制好的内存管理规则，将自动选择其作用域和存储期，然而还有更灵活的选择，即使用库函数分配和管理内存。 int main(){ double * ptd1; ptd1 = (double *)malloc(30 * sizeof(double)); //为30个double类型的值申请内存空间，并让ptd指向该片内存的首地址。double类型且长度为30的数组 if (ptd1==NULL){ printf(&quot;内存分配失败\\n&quot;); exit(-1); } free(ptd1); //释放内存 long * ptd2; ptd2 = (long *)calloc(100,sizeof(long)); printf(&quot;ptd2 = %d\\n&quot;,ptd2); free(ptd2); return 0; } 可以认为程序把它的可用内存分为三部分：一部分供具有外部链接、内部链接和无连接的静态变量使用；一部分供自动变量使用；一部分供动态内存分配。 int num1 = 100; //文件作用域，外部链接 static int num2 = 100; //文件作用域，内部链接。 //无论外部还是内部链接，文件作用域变量都具有静态存储期(随程序执行创建，程序结束销毁，在程序执行和结束期间一直存在) //块级作用域具有自动存储器。当程序进入定义这些变量的块时，为这些变量分配内存，当退出这个块时，释放刚才为变量分配的内存。(变长数组略有不同，它的存储器从生命到块结尾) //块级作用域也能具有静态存储期。在块中声明变量时，加上static关键字。但是只有执行其所在的函数时才能访问，该函数可以提供改变量的存储地址以便间接的访问对象，例如返回一个指针 //静态变量：该变量在内存中原地不动，并不是值不可改变。 void trystat(void){ int fade = 1; //函数执行一次，初始化一次 static int stay = 1; //只在编译阶段初始化一次 printf(&quot;fade = %d and stay = %d\\n&quot;,fade++,stay++); } void test(void){ extern int num1; //可选重复声明 printf(&quot;%d\\n&quot;,num1); } ---------------------------------------------------------------------------------- C的存储类别：(静态存储期：随着程序运行创建，程序结束销毁，在这期间一直存在；文件作用域：可以多个程序文件使用；自动存储期：当程序进入定义这些变量的块时，为这些变量分配内存，当退出这个块时，释放刚才为变量分配的内存；静态存储期：在块中声明变量时，加上static关键字。但是只有执行其所在的函数时才能访问，该函数可以提供改变量的存储地址以便间接的访问对象) 自动：在块中不带存储类别说明符或带auto(默认)存储类说明符声明的变量(或者作为函数头中的形参)属于自动存储类别。 寄存器：在块中带register存储类别说明符声明的变量(或作为函数头中的形参)属于寄存器存储类别，具有自动存储区、块作用域、无链接且无法获取其地址。 静态、无链接：在块中带有static存储类别说明符声明的变量，具有静态存储期、块作用域、无链接，只在编译时初始化一次 静态、外部链接：在所有函数外部且没有使用static存储类别说明符，具有静态存储期、文件作用域、外部链接。只能在编译器被初始化一次 静态、内部链接：在所有函数外使用了static存储类别说明符，具有静态存储期、文件作用域、内部链接。只能在编译器被初始化一次 动态分配的内存：由malloc()相关函数分配。 类型限定符：const、volatile、restrict、_Automic，const限定符限定数据在程序运行时不能改变。对指针使用const时，可限定指针本身不能改变或者指向的数据不能改变。 ---------------------------------------------------------------------------------- 文件输入与输出： r:只读打开 w:覆盖写 a:追加写 r+:读写 w+:读，覆盖写 a+:读，追加写 int main(){ int ch; //读文件时存储每个字符的地方 FILE *fp; //文件指针 int count = 0; fp = fopen(&quot;test.txt&quot;,&quot;r&quot;); if (fp==NULL){ return 0; } for (;(ch = getc(fp))!=EOF;){ //getc() putc() 要传递文件的指针。 putc(ch,stdout); count++; } fclose(fp); printf(&quot;\\n%d\\n&quot;, count); return 0; } --------------- 文件读写demo: int main(){ int ch; FILE *fp,*wfp; int count = 0; wfp = fopen(&quot;test.txt&quot;,&quot;a+&quot;); if ((fp=fopen(&quot;/Users/duwei/ingress-controller-manager.yaml&quot;,&quot;r&quot;))==NULL) { printf(&quot;%s\\n&quot;,strerror(errno)); //strerror(errno) } for (;(ch = getc(fp)) != EOF;) { putc(ch,wfp); } fclose(fp); return 0; } --------------- rewind： int main(){ FILE *fp; char str1[10],str2[10],str3[10]; int year; fp = fopen(&quot;test.txt&quot;,&quot;w+&quot;); fputs(&quot;we are in 2020&quot;,fp); rewind(fp);//写完时文件描述符在末尾，rewind将文件描述符拉回文件开始的地方 fscanf(fp,&quot;%s %s %s %de&quot;,&amp;str1,&amp;str2,&amp;str3,&amp;year); printf(&quot;Read String1 |%s|\\n&quot;, str1 ); printf(&quot;Read String2 |%s|\\n&quot;, str2 ); printf(&quot;Read String3 |%s|\\n&quot;, str3 ); printf(&quot;Read Integer |%d|\\n&quot;, year ); fprintf(stderr, &quot;end.\\n&quot;); fclose(fp); return 0; } 结构体： --------------- struct book{ char title[100]; char author[100]; int value; }; void setV(struct book bk); int main(){ struct book library[100]; library[0].value = 99; printf(&quot;out func,value = %d\\n&quot;,library[0].value ); setV(library[0]); printf(&quot;out func,value = %d\\n&quot;,library[0].value ); } void setV(struct book bk){ bk.value=999; printf(&quot;in func,value = %d\\n&quot;,bk.value); } stdout: out func,value = 99 in func,value = 999 out func,value = 99 结论：结构体是值传递。 --------------- 对齐规则： 1、第一个成员在与结构体变量偏移量为0的地址处。(c1为起始位置) 2、其它成员变量要对齐到某个数(对齐数，vs默认为8，我用的gcc，对齐数就是成员自身大小)的整数倍的地址处。(对齐数: 编译器默认的对齐数 与 该成员大小 比较，小的就是该成员的对齐数。a大小为4，编译器默认的是8，那么该成员的对齐数就是4， 所以a的位置要为4的倍数处，所以a的位置为4，另外a占四个字节。同理c2的对齐数是1(1与8比较)，所以c2的位置为8。) 3、结构体总大小为最大对齐数(每个成员变量都有一个对齐数)的整数倍。(s1中的最大对齐数为4[来自a]，当前三个变量占了0-8也就是9个字节，所以结构体s1的整体大小为3*4=12字节) 4、如果嵌套了结构的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数(含嵌套结构体的对齐数)的整数倍。 在设计结构体时候，将占用空间小的成员尽量集中在一起。 #pragma pack(4) //设置默认对齐数 struct S1 { char c1; int a; char c2; }; _________________ ____ __________ 0 |_________________| c1 | 1 |_________________| | | 2 |_________________| | | 3 |_________________| _|__ 4 |_________________| a s1: 12个字节,1、2、3、9、10、11浪费掉 5 |_________________| | 6 |_________________| | 7 |_________________| ____ | 8 |_________________| _c2_ | 9 |_________________| | 10 |_________________| | 11 |_________________| _____|____ 12 |_________________| 13 |_________________| 14 |_________________| |_________________| |_________________| |_________________| |_________________| |_________________| |_________________| |_________________| 同理s2如下： struct S2 { char c1; char c2; int a; }; _________________ ____ _________ 0 |_________________| _c1_ | 1 |_________________| _c2_ | 2 |_________________| | 3 |_________________| ____ 4 |_________________| a s1: 8 个字节,2、3浪费掉 5 |_________________| | 6 |_________________| | 7 |_________________| ____ ____|_____ 8 |_________________| 9 |_________________| 10 |_________________| 11 |_________________| 12 |_________________| 13 |_________________| 14 |_________________| |_________________| |_________________| |_________________| |_________________| |_________________| |_________________| |_________________| struct S3 { double d; char c; int i; }; struct S4 { char c1; struct S3 s3; double d; }; ————————----------—————————————— struct S{ int a; char c; double d; }; void Init(struct S * tmp) { tmp-&gt;a = 100; tmp-&gt;c = &#39;d&#39;; tmp-&gt;d = 3.14; } int main(){ struct S s = {0}; Init(&amp;s); printf(&quot;%d\\n&quot;, s.a); } ————————----------—————————————— 位段：(二进制位) 1、位段的成员可以使 int、unsigned int、signed int 或者是char（属于整型家族）类型。 2、位段的空间上是按照需要以4个字节(int)或者一个字节(char)的方式来开辟的。 3、位段涉及很多不确定因素，不跨平台，注重可移植的程序应避免使用位段。 4、每一次开辟的内存，从右往左使用。 struct S { int _a:2; //2代表只需要两个比特位 int _b:5; //5代表只需要五个比特位 int _c:10; int _d:30; }; //47个比特位 需要 6字节*8bit = 48比特 int main() { struct S s; printf(&quot;%d\\n&quot;, sizeof(s)); //结果为8，int类型所以一次开辟四个字节，开辟两次。 return 0; } —————————————————————————————————— struct S { char a:3; char b:4; char c:5; char d:4; }; int main() { | | | | struct S s = {0}; | | | | | | | | | | | | | | | | | | | | | | | | | s.a = 10; //二进制：1010，但是长度只给了3 | b | a | | b | | d | s.b = 20; s.c = 3; s.d = 4; printf(&quot;%d\\n&quot;, sizeof(s)); // 类型是char：开辟一个字节放入a，再放入b，此时一个字节被占用了7个比特，剩下的1个比特不足以存放c，所以再开辟一个字节放入5，剩下的3个字节不足以存放d，so再次开辟一个字节。浪费了8比特。 printf(&quot;%d\\n&quot;, s.a); return 0; } ———————————————————————————— 枚举： enum Sex { MALE, FAMALE, SECRET }; enum Color { RED, //0 GREEN, //1 BLUE //2 }; int main(){ enum Sex s = MALE; enum Color c = BLUE; printf(&quot;%d,%d,%d\\n&quot;, RED,GREEN,BLUE); } ———————————————————————————— union: union Un { char c; int i; //对齐数为4 char arr[5]; //对齐数是1而不是5，最小占用内存为 最大对齐数的整数倍 }; int main() { union Un u; printf(&quot;%lu\\n&quot;, sizeof(u)); printf(&quot;%p\\n&quot;, &amp;u); printf(&quot;%p\\n&quot;, &amp;u.c); } ———————————————————————————— 动态内存分配： _____________________________________ | 局部变量 | | 函数形参 | | | | | | | 栈区 | | | | | | | | |———————————————————————————————————| | 动态内存分配 | | | | | | | | | | | | | 堆区 | | | | | | | | | | | | |———————————————————————————————————| | | | 全局变量 | | 静态变量 | | | | | | | 静态区 | | | | | | | | | | | | ————————————————————————————————————— int main() { int * p1 = (int *)malloc(10*sizeof(int)); //初始化之后默认值是随机的，int * p = realloc(NULL,40) if (p1 == NULL) { printf(&quot;%s\\n&quot;, strerror(errno)); } else { for (int i = 0; i &lt; 10; ++i) { printf(&quot;p1 = %d\\n&quot;, p1[i]); } } free(p1); p1 = NULL; printf(&quot;\\n&quot;); int * p2 = (int *)calloc(10,sizeof(int)); //初始化之后默认值是0 if (p2 == NULL) { printf(&quot;%s\\n&quot;, strerror(errno)); } else { for (int i = 0; i &lt; 10; ++i) { printf(&quot;p2 = %d\\n&quot;, *(p2+i)); } } free(p2); p2 = NULL; printf(&quot;\\n&quot;); int * p3 = (int *)malloc(20); if (p3 == NULL) { printf(&quot;%s\\n&quot;, strerror(errno)); } else { for (int i = 0; i &lt; 5; ++i) { *(p3+i) = i; } } int * p4 = realloc(p3,40); //调整已开辟内存的大小。 // 1、如果p3指向的内存空间后有足够的空间可以追加，则直接追加后返回p3。 // 2、如果p3指向的内存空间后没有足够的空间可以追加，则开辟一块全新的内存区域，将原来内存中的数据拷贝至新内存，释放旧内存空间，返回新开辟的内存空间地址 if (p4!=NULL) { p3 = p4; } for (int i = 0; i &lt; 40; ++i) { printf(&quot;p3 = %d\\n&quot;, *(p4+i)); } free(p3); p3 = NULL; return 0; } */ // #pragma pack(4) //设置默认对齐数 // void GetMemory(char **p) // { // p = (char *)malloc(100); // } // void Test(void) // { // char * str = NULL; // GetMemory(&amp;str); // strcpy(str,&quot;hello world&quot;); // printf(str); // } // int main() // { // //str传给GetMemory()函数，传的是str而不是str的地址，所以p是str的值拷贝，p的值为NULL，函数里将申请的内存的地址赋给p，GetMemory执行完毕之后， // //p是临时变量被销毁，所以str的值还是NULL // Test(); // return 0; // } // char *GetMemory(void) // { // char p[] = &quot;hello world&quot;; // return p; // } // void Test(void) // { // char * str = NULL; // str = GetMemory(); // printf(str); // } // int main() // { // Test(); // return 0; // } int main() { int a = 10000; FILE* pf = fopen(&quot;test.txt&quot;,&quot;wb&quot;); fwrite(&amp;a,4,1,pf); fclose(pf); pf = NULL; return 0; }","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c primer plus","slug":"c-primer-plus","permalink":"http://blog.3amupupup.online/tags/c-primer-plus/"}]},{"title":"nginx内存池","slug":"ngx_mem_pool","date":"2021-03-18T03:09:52.065Z","updated":"2021-03-18T03:09:52.065Z","comments":true,"path":"2021/03/18/ngx_mem_pool/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/ngx_mem_pool/","excerpt":"","text":"nginx内存池内存池的数据结构 // src/core/ngx_palloc.h typedef struct { u_char *last; /* 内存池中未使用内存的开始节点地址 */ u_char *end; /* 内存池的结束地址 */ ngx_pool_t *next; /* 指向下一个内存池,组成链表 */ ngx_uint_t failed; /* 失败次数 */ } ngx_pool_data_t; // typedef struct ngx_pool_s ngx_pool_t; struct ngx_pool_s { ngx_pool_data_t d; /* 内存池的数据区域(小块数据) */ size_t max; /* 最大每次可分配内存,大于这个值将被添加到大块数据链表上,小于这个值将被添加到小块数据链表上 */ ngx_pool_t *current; /* 指向当前的内存池指针地址。ngx_pool_t链表上最后一个缓存池结构 */ ngx_chain_t *chain; /* 缓冲区链表 */ ngx_pool_large_t *large; /* 存储大块数据的链表 */ ngx_pool_cleanup_t *cleanup; /* 可自定义回调函数，清除内存块分配的内存 */ ngx_log_t *log; /* 日志 */ }; // typedef struct ngx_pool_cleanup_s ngx_pool_cleanup_t; struct ngx_pool_cleanup_s { ngx_pool_cleanup_pt handler; /* 清理的回调函数 */ void *data; /* 指向存储的数据地址 */ ngx_pool_cleanup_t *next; /* 下一个ngx_pool_cleanup_t */ }; // src/os/unix/ngx_alloc.c // 两种申请内存接口 void * ngx_alloc(size_t size, ngx_log_t *log) { void *p; p = malloc(size); // 调用malloc分配内存 if (p == NULL) { // 检测是否分配成功 ngx_log_error(NGX_LOG_EMERG, log, ngx_errno, &quot;malloc(%uz) failed&quot;, size); } ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, log, 0, &quot;malloc: %p:%uz&quot;, p, size); return p; } void * ngx_calloc(size_t size, ngx_log_t *log) { void *p; p = ngx_alloc(size, log); // 还是调用ngx_alloc分配的内存 if (p) { ngx_memzero(p, size); // 如果分配成功则将内存块全部初始化为0，底层调用的memeset库函数 } return p; } /* ngx_calloc和ngx_alloc的区别在于：ngx_calloc会将分配的内存初始化为零值，ngx_alloc只分配不初始化。 */ // src/core/ngx_palloc.c // 创建内存池的函数 // typedef struct ngx_pool_s ngx_pool_t; ngx_pool_t * ngx_create_pool(size_t size, ngx_log_t *log) { ngx_pool_t *p; // 声明一个ngx_pool_t类型的指针变量用于保存申请的内存的地址 p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log); // 这个函数暂时跳过，功能就是分配size大小的内存 if (p == NULL) { // 检测是否分配成功 return NULL; } p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t); // p是这块内存的首地址，加上ngx_pool_t这个结构体的内存大小之后，此时的last指向的是可用内存的起始位置(分配size大小的内存之后，前sizeof(ngx_pool_t)个字节的内存被这个结构体里元素占用了，last指向的是这些元素的末尾，这之后的内存字节一直到end都是可以被使用的，也就有size-sizeof(ngx_pool_t)个字节时能够被申请者自定义使用的)。 p-&gt;d.end = (u_char *) p + size; // 内存使用范围的结束地址 p-&gt;d.next = NULL; // next指向NULL，避免野指针 p-&gt;d.failed = 0; // 失败次数的从0开始计数 size = size - sizeof(ngx_pool_t); // 此时size要减去sizeof(ngx_pool_t) p-&gt;max = (size &lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL; /* * NGX_MAX_ALLOC_FROM_POOL should be (ngx_pagesize - 1), i.e. 4095 on x86. * On Windows NT it decreases a number of locked pages in a kernel. */ // 只有缓存池的父节点，才会用到下面的这些 ，子节点只挂载在p-&gt;d.next,并且只负责p-&gt;d的数据内容 p-&gt;current = p; p-&gt;chain = NULL; p-&gt;large = NULL; p-&gt;cleanup = NULL; p-&gt;log = log; return p; } // 销毁内存池 void ngx_destroy_pool(ngx_pool_t *pool) { ngx_pool_t *p, *n; ngx_pool_large_t *l; ngx_pool_cleanup_t *c; for (c = pool-&gt;cleanup; c; c = c-&gt;next) { // 遍历链表，调用对应的handler回收data所指向的内存 if (c-&gt;handler) { ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0, &quot;run cleanup: %p&quot;, c); c-&gt;handler(c-&gt;data); // 回收 } } #if (NGX_DEBUG) // 条件编译，如果开启了ngx_debug模式则在销毁内存时应该记录日志 /* * we could allocate the pool-&gt;log from this pool * so we cannot use this log while free()ing the pool */ for (l = pool-&gt;large; l; l = l-&gt;next) { ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0, &quot;free: %p&quot;, l-&gt;alloc); } for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) { ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0, &quot;free: %p, unused: %uz&quot;, p, p-&gt;d.end - p-&gt;d.last); if (n == NULL) { break; } } #endif for (l = pool-&gt;large; l; l = l-&gt;next) { // 遍历大块数据链表，释放内存 if (l-&gt;alloc) { ngx_free(l-&gt;alloc); // #define ngx_free free,就是调用的free，是个宏，ngx_alloc.h } } for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) { // 遍历小块数据链表，释放内存 ngx_free(p); // // #define ngx_free free，ngx_alloc.h if (n == NULL) { break; } } } // 重置内存池(释放操作) void ngx_reset_pool(ngx_pool_t *pool) { ngx_pool_t *p; ngx_pool_large_t *l; for (l = pool-&gt;large; l; l = l-&gt;next) { // 清理掉大块数据链表 if (l-&gt;alloc) { ngx_free(l-&gt;alloc); // #define ngx_free free,就是调用的free，是个宏，ngx_alloc.h } } for (p = pool; p; p = p-&gt;d.next) { // 重置last的指向，恢复到last的起始位置(这个过程并没有擦除内存区域上的数据)，下次直接使用即可，更不用还给操作系统，避免频繁malloc和free p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t); p-&gt;d.failed = 0; } pool-&gt;current = pool; pool-&gt;chain = NULL; // 内存池父结点的缓存、大块数据链表置空 pool-&gt;large = NULL; } // ngx分配大块数据内存的函数 void * ngx_palloc(ngx_pool_t *pool, size_t size) { #if !(NGX_DEBUG_PALLOC) // 条件编译 if (size &lt;= pool-&gt;max) { // 如果要分配的内存size小于内存池的最大max，则走分配小块数据内存的逻辑 return ngx_palloc_small(pool, size, 1); } #endif return ngx_palloc_large(pool, size); // 分配大内存块，挂在大内存块链表上去 } // 分配小内存块的逻辑 // 先遍历小块数据内存的链表，如果找到合适的则将其结点上的last往后移动size个字节，再将last的原本位置的内存地址返回，如果没有合适的结点，则走扩容的逻辑 static ngx_inline void * ngx_palloc_small(ngx_pool_t *pool, size_t size, ngx_uint_t align) { u_char *m; ngx_pool_t *p; p = pool-&gt;current; do { // 循环读取p-&gt;d.next的各个ngx_pool_t结点，找到剩余空间大于size的结点并返回地址 m = p-&gt;d.last; if (align) { m = ngx_align_ptr(m, NGX_ALIGNMENT); } if ((size_t) (p-&gt;d.end - m) &gt;= size) { // 如果数据区上可用的内存打小大于调用者传入的size p-&gt;d.last = m + size; // 移动last size个字节 return m; // m就是分配出去的这块内存的起始地址 } p = p-&gt;d.next; } while (p); return ngx_palloc_block(pool, size); // 如果没找到能容纳size的结点则新申请一个池子结点，走扩容的逻辑 } // 分配大数据块内存逻辑 static void * ngx_palloc_large(ngx_pool_t *pool, size_t size) { void *p; // 保存分配的内存块地址的指针变量 ngx_uint_t n; ngx_pool_large_t *large; // 大块数据链表结点的指针变量 p = ngx_alloc(size, pool-&gt;log); // 申请size大小的内存块 if (p == NULL) { return NULL; } n = 0; for (large = pool-&gt;large; large; large = large-&gt;next) { // 遍历大内存块链表 if (large-&gt;alloc == NULL) { // 将新节点添加到末尾上去 large-&gt;alloc = p; return p; } if (n++ &gt; 3) { // 只查三次，否则就结束此操作 break; } } large = ngx_palloc_small(pool, sizeof(ngx_pool_large_t), 1); if (large == NULL) { // 如果申请失败则要把p释放掉避免内存泄露 ngx_free(p); return NULL; } large-&gt;alloc = p; large-&gt;next = pool-&gt;large; pool-&gt;large = large; return p; } // 内存池扩容 static void * ngx_palloc_block(ngx_pool_t *pool, size_t size) { u_char *m; size_t psize; ngx_pool_t *p, *new; psize = (size_t) (pool-&gt;d.end - (u_char *) pool); // end指向ngx_pool_t末尾，pool是ngx_pool_t首地址，末尾地址减去首地址转换成size_t得到的就是这个结构(ngx_pool_t)的size m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool-&gt;log); // 调用posix_memalign()分配内存 if (m == NULL) { return NULL; } new = (ngx_pool_t *) m; // 类型转换 new-&gt;d.end = m + psize; // m是首地址，psize是ngx_pool_t的大小，这个操作时在分配的内存m上取一个ngx_pool_t大小的内存块 new-&gt;d.next = NULL; // 下一个节点指向null避免野指针 new-&gt;d.failed = 0; // 失败次数初始化0 m += sizeof(ngx_pool_data_t); m = ngx_align_ptr(m, NGX_ALIGNMENT); // 没看懂 /* #define ngx_align_ptr(p, a) \\ (u_char *) (((uintptr_t) (p) + ((uintptr_t) a - 1)) &amp; ~((uintptr_t) a - 1)) */ new-&gt;d.last = m + size; // last之后的size个字节被标识已经分配了，也就是此时申请的内存块 for (p = pool-&gt;current; p-&gt;d.next; p = p-&gt;d.next) { if (p-&gt;d.failed++ &gt; 4) { pool-&gt;current = p-&gt;d.next; } } p-&gt;d.next = new;将此时的new添加到小数据链表上去 return m; } void * ngx_memalign(size_t alignment, size_t size, ngx_log_t *log) { void *p; int err; err = posix_memalign(&amp;p, alignment, size); // 调用posix_memalign( )成功时会返回size字节的动态内存，并且这块内存的地址是alignment的倍数 if (err) { ngx_log_error(NGX_LOG_EMERG, log, err, &quot;posix_memalign(%uz, %uz) failed&quot;, alignment, size); p = NULL; } ngx_log_debug3(NGX_LOG_DEBUG_ALLOC, log, 0, &quot;posix_memalign: %p:%uz @%uz&quot;, p, size, alignment); return p; } // 释放内存 ngx_int_t ngx_pfree(ngx_pool_t *pool, void *p) { ngx_pool_large_t *l; for (l = pool-&gt;large; l; l = l-&gt;next) { if (p == l-&gt;alloc) { ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0, &quot;free: %p&quot;, l-&gt;alloc); ngx_free(l-&gt;alloc); // #define ngx_free free,就是调用的free，是个宏，ngx_alloc.h l-&gt;alloc = NULL; return NGX_OK; } } return NGX_DECLINED; } // cleanup结构 ngx_pool_cleanup_t * ngx_pool_cleanup_add(ngx_pool_t *p, size_t size) { ngx_pool_cleanup_t *c; c = ngx_palloc(p, sizeof(ngx_pool_cleanup_t)); // 分配内存操作 if (c == NULL) { // 检测是否分配失败 return NULL; } if (size) { c-&gt;data = ngx_palloc(p, size); // 再次说下这个函数的功能：这个函数实际上是根据size的大小(与max比较)调用ngx_palloc_small或者ngx_palloc_large，因此分配的内存存在于小数据内存块链表上或者大数据内存块链表上，而cleanup结点中data保存的是分配的内存的地址，次结点上还有一个handler回调函数，便于我们自定义释放内存的函数，使我们有能力在内存池上保存一些特殊的数据类型或者自定义数据类型并自定义其释放的逻辑 if (c-&gt;data == NULL) { // 检测失败与否 return NULL; } } else { c-&gt;data = NULL; } c-&gt;handler = NULL; // handler是一个函数指针，默认给的NULL，需要调用者自行定义 c-&gt;next = p-&gt;cleanup; p-&gt;cleanup = c; ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, p-&gt;log, 0, &quot;add cleanup: %p&quot;, c); return c; } //一个cleanup上清理文件描述符的回调函数 void ngx_pool_run_cleanup_file(ngx_pool_t *p, ngx_fd_t fd) { ngx_pool_cleanup_t *c; ngx_pool_cleanup_file_t *cf; for (c = p-&gt;cleanup; c; c = c-&gt;next) { if (c-&gt;handler == ngx_pool_cleanup_file) { cf = c-&gt;data; if (cf-&gt;fd == fd) { c-&gt;handler(cf); c-&gt;handler = NULL; return; } } } } // 关闭文件的回调 void ngx_pool_cleanup_file(void *data) { ngx_pool_cleanup_file_t *c = data; ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &quot;file cleanup: fd:%d&quot;, c-&gt;fd); if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) { ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno, ngx_close_file_n &quot; \\&quot;%s\\&quot; failed&quot;, c-&gt;name); } } // void ngx_pool_delete_file(void *data) { ngx_pool_cleanup_file_t *c = data; ngx_err_t err; ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &quot;file cleanup: fd:%d %s&quot;, c-&gt;fd, c-&gt;name); if (ngx_delete_file(c-&gt;name) == NGX_FILE_ERROR) { err = ngx_errno; if (err != NGX_ENOENT) { ngx_log_error(NGX_LOG_CRIT, c-&gt;log, err, ngx_delete_file_n &quot; \\&quot;%s\\&quot; failed&quot;, c-&gt;name); } } if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) { ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno, ngx_close_file_n &quot; \\&quot;%s\\&quot; failed&quot;, c-&gt;name); } }","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.3amupupup.online/tags/nginx/"}]},{"title":"C语言预处理","slug":"C语言预处理","date":"2021-03-18T03:09:52.064Z","updated":"2021-03-18T03:09:52.065Z","comments":true,"path":"2021/03/18/C语言预处理/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/C%E8%AF%AD%E8%A8%80%E9%A2%84%E5%A4%84%E7%90%86/","excerpt":"","text":"#include &lt;stdio.h&gt; int g_val = 1000; int main(){ int i = 0; int arr[10] = { 0 }; for (i = 0; i &lt; 10; i++){ arr[i] = i; } for (i = 0; i &lt; 10; i++){ printf(&quot;%d &quot;, arr[i]); } return 0; } 1、预编译/预处理(gcc -E test.c &gt; test.i，文本操作) #include 头文件的包含 删除注释 #define 进行符号替换 2、编译(gcc -S test.i，将c代码编译成汇编代码) 语法分析 词法分析 语义分析 符号汇总 3、汇编(gcc -c test.s)将汇编代码转换成二进制指令 4、链接 合并段表 符号表的合并和重新定位 5、宏函数在调用的时候会有函数调用和返回的开销。 宏在预处理阶段就完成了替换，没有调用和返回的开销。","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c","slug":"c","permalink":"http://blog.3amupupup.online/tags/c/"}]},{"title":"第二章 信息的表示和处理","slug":"第二章 信息的表示和处理","date":"2021-03-18T03:09:52.062Z","updated":"2021-03-18T03:09:52.063Z","comments":true,"path":"2021/03/18/第二章 信息的表示和处理/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/","excerpt":"","text":"2.1 信息存储 大多数计算机使用8位的块，或者字节(byte)，作为最小的可寻址的内存单位，而不是访问内存中单独的位。 C编译器把指针和类型联系起来，这样就可以根据指针值的类型，生成不同的机器级别代码来访问存储在指针所指向位置处的值。尽管C编译器维护着这个类型的信息，但是它生成的实际机器级程序不包含关于数据类型的信息。 机器级程序将内存视为一个非常大的字节数组，称为虚拟内存(virtual memory)。内存的每一个字节都是由唯一的数字标识的，称为地址(address)。所有地址的集合就称为虚拟地址空间(virtual address space)。 2.1.1 十六进制表示法 十六进制 1 7 3 A 4 二 进 制 0001 0111 0011 1010 0100 2.1.2 字数据大小 对于一个字长为w位的机器而言，虚拟地址的范围是0 ~ 2^w-1，程序最多访问2^w个字节。 举个例子： 32位操作系统，传输总线是32位，8bit为一个字节，那么在读或者写数据时一次就能传输32/8=4个字节。一个字长就是4字节。 2.1.3 寻址和字节顺序 对于跨越多字节的程序对象，必须建立两个规则：① 这个对象的地址是什么，② 在内存上如何排列 多字节对象会被存储为连续的字节序列，对象的地址为所使用字节中最小的地址。 排列表示一个对象的字节有两个通用规则：小端法 &amp; 大端法 低有效字节存储在低地址上，称为小端存储，反之则为大端存储。 C语言中字符串被编码为一个以null(其值为0)字符结尾的字符数组。 2.1.6 布尔 NOT: ~ int main(){ int a = 10; // 0000 0000 0000 0000 0000 0000 0000 1010 printf(&quot;%d\\n&quot;,~a); // 1111 1111 1111 1111 1111 1111 1111 0101 补 // 1111 1111 1111 1111 1111 1111 1111 0100 反 // 1000 0000 0000 0000 0000 0000 0000 1011 原 } AND: &amp; int main(){ int a = 10; // 0000 0000 0000 0000 0000 0000 0000 1010 int b = 15; // 0000 0000 0000 0000 0000 0000 0000 1111 printf(&quot;%d\\n&quot;,a&amp;b); // 0000 0000 0000 0000 0000 0000 0000 1010 } OR: | int main(){ int a = 2; // 0000 0000 0000 0000 0000 0000 0000 0010 int b = 11; // 0000 0000 0000 0000 0000 0000 0000 1011 printf(&quot;%d\\n&quot;,a|b); // 0000 0000 0000 0000 0000 0000 0000 1011 } EXCLUSIVE-OR: ^ int main(){ int a = 10; // 0000 0000 0000 0000 0000 0000 0000 1010 int b = 2; // 0000 0000 0000 0000 0000 0000 0000 0010 printf(&quot;%d\\n&quot;,a^b); // 0000 0000 0000 0000 0000 0000 0000 1000 } 2.1.9 移位运算int main(){ unsigned int a = 10; // 0000 0000 0000 0000 0000 0000 0000 1010 a = a &gt;&gt; 3; // 0000 0000 0000 0000 0000 0000 0000 0001 printf(&quot;a = %d\\n&quot;,a); // 1,无符号右移补0 int b = -5; // 原码: 1000 0000 0000 0000 0000 0000 0000 0101 // 反码: 1111 1111 1111 1111 1111 1111 1111 1010 // 补码: 1111 1111 1111 1111 1111 1111 1111 1011 b = b &lt;&lt; 3; // 补码: 1111 1111 1111 1111 1111 1111 1101 1000 // 反码: 1111 1111 1111 1111 1111 1111 1101 0111 // 原码: 1000 0000 0000 0000 0000 0000 0010 1000 printf(&quot;b = %d\\n&quot;,b); // -40 int c = -5; // 原码: 1000 0000 0000 0000 0000 0000 0000 0101 // 反码: 1111 1111 1111 1111 1111 1111 1111 1010 // 补码: 1111 1111 1111 1111 1111 1111 1111 1011 c = c &gt;&gt; 3; // 补码: 1111 1111 1111 1111 1111 1111 1111 1111 // 反码: 1111 1111 1111 1111 1111 1111 1111 1110 // 补码: 1000 0000 0000 0000 0000 0000 0000 0001 printf(&quot;c = %d\\n&quot;,c); // -1,有符号数右移时补符号位 } 2.2 整数表示","categories":[{"name":"深入理解计算机系统","slug":"深入理解计算机系统","permalink":"http://blog.3amupupup.online/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"c","slug":"c","permalink":"http://blog.3amupupup.online/tags/c/"}]},{"title":"C语言实现linux命令","slug":"C语言实现linux命令","date":"2021-03-18T03:09:52.061Z","updated":"2021-03-18T03:09:52.062Z","comments":true,"path":"2021/03/18/C语言实现linux命令/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0linux%E5%91%BD%E4%BB%A4/","excerpt":"","text":"tail #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; #include &lt;stdint.h&gt; #define FILE_LINE_LEN 1024 long g_curr_offset = 0; int32_t c_tail(const char *file); int32_t c_tail(const char *file) { if (!file){ return -1; } FILE *fp = fopen(file,”r”); if (!fp){ printf(“can not open %s\\n”,file); return -2; } fseek(fp, g_curr_offset, SEEK_SET); char text[FILE_LINE_LEN]; uint32_t len; while (!feof(fp)){ memset(text, 0x0, FILE_LINE_LEN); fgets(text, FILE_LINE_LEN, fp); len = strlen(text); if (0 == len || &#39;\\n&#39; != text[len -1]){ continue; } text[len-1] = 0; g_curr_offset += len; printf(&quot;%s\\n&quot;,text); } fclose(fp); return 0; } int main(int argc, char *argv[]) { if (argc != 2) { printf(“Usage: exe file_name\\n”); exit(-1); } while (1) { c_tail(argv[1]); } return 0; }","categories":[],"tags":[]},{"title":"sql","slug":"sql","date":"2021-03-18T03:09:52.060Z","updated":"2021-03-18T03:09:52.061Z","comments":true,"path":"2021/03/18/sql/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/sql/","excerpt":"","text":"SELECT count(*) AS aggregate FROM bookrack WHERE book_id = ? AND created_at BETWEEN ? AND ? SELECT sum(price) AS aggregate FROM kuai_order_relation WHERE app_type = ? AND status = ? AND link_id != ? AND updated_at &lt;= ? SELECT count(*) AS aggregate FROM kuai_device_id WHERE app_type = ? AND link_id != ? SELECT * FROM push_newchapter WHERE created_at BETWEEN ? AND ? SELECT * FROM push_welfare WHERE created_at BETWEEN ? AND ? SELECT count(*) AS aggregate FROM kuai_device_id WHERE created_at BETWEEN ? AND ? AND adid IN (?) SELECT sum(cost) AS cost, adgroup_id, name FROM gdt_cost_hourly WHERE hourly &gt;= ? GROUP BY adgroup_id SELECT count(user_name) AS count, sum(price) AS price, appflags FROM third_party_order WHERE appflags IN (?) AND status = ? GROUP BY appflags SELECT user_id, book_name, bookrack.book_id, bookrack.chapte_id, bookrack.updated_at FROM bookrack LEFT JOIN book ON book.id = bookrack.book_id WHERE bookrack.updated_at BETWEEN ? AND ? AND book.is_shelves = ? AND book.id IN (?) GROUP BY user_id ORDER BY bookrack.updated_at DESC SELECT id FROM user WHERE created_at BETWEEN ? AND ?","categories":[],"tags":[]},{"title":"PracticeSql","slug":"PracticeSql","date":"2021-03-18T03:09:52.060Z","updated":"2021-03-18T03:09:52.060Z","comments":true,"path":"2021/03/18/PracticeSql/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/PracticeSql/","excerpt":"","text":"select TrueName,IDCard,Mobile from xb_mem_info where IDCard like &#39;%1999%&#39; limit 10; select id,TrueName,IDCard,soundex(TrueName) from xb_mem_info where soundex(TrueName)=soundex(&#39;杜维&#39;);select upper(NickName) as new,NickName from xb_mem_info limit 10; select id,Mobile,TrueName,IDCard,Mobile+id as sumid from xb_mem_info where id=3; select concat(curdate(),&#39; &#39;,curtime()); select count(1) from xb_mem_info; select count(*) from xb_mem_info; select max(Mobile) from xb_mem_info; select distinct name from student ; 去重 select count(distinct name) from student; select stutel,count(*) as newnum from student group by stutel ;不同的stutel出现的次数 select name,count(*) as newnum from student group by name having count(*)&gt;3; select name,count(*) as newnum from student group by name having name=&#39;duwei1&#39;; having过滤分组，where过滤行 select name,count(*) from student where stutel&gt;13487459071 group by name having count(*) &gt;2; ( select name,count(*) from student group by name order by count(*) desc; select name,count(*) from student group by name having count(*) &gt;= 1 order by count(*) desc; ) create database if not exists learn; 复制表数据至另一个表 CREATE TABLE IF NOT EXISTS teacher ( id int PRIMARY KEY AUTO_INCREMENT COMMENT &#39;id 主键&#39;, name varchar(20) NOT NULL COMMENT &#39;姓名&#39;, telnum varchar(11) COMMENT &#39;手机号码&#39;, addr varchar(100) DEFAULT &#39;unknow address&#39; COMMENT &#39;地址&#39; ) ENGINE = innodb; 添加、删除索引 修改列名 添加列 复制表操作 create table new_table like old_table; //仅复制表结构 create table new_table select column form old_table;//仅复制表数据 truncate table table_name;//清空表(删除再创建) delete from table;//仅删除数据 数据类型一、值类型 1、整形 类型 字节 范围 int 4 -2^31~2^31-1 mediumint 3 -2^23~2^23-1 smallint 2 -2^15~2^15-1 tinyint 1 -2^7~2^7-1 bigint 8 -2^63~2^63-1 无符号整数（unsigned），无符号没有负数，整数部分是有符号的两倍。 mysql&gt; create table stu( -&gt; id smallint unsigned auto_increment primary key comment &#39;主键&#39;, -&gt; age tinyint unsigned not null comment &#39;年龄&#39;, -&gt; money bigint unsigned comment &#39;存款&#39; -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; desc stu; +-------+----------------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +-------+----------------------+------+-----+---------+----------------+ | id | smallint(5) unsigned | NO | PRI | NULL | auto_increment | | age | tinyint(3) unsigned | NO | | NULL | | | money | bigint(20) unsigned | YES | | NULL | | +-------+----------------------+------+-----+---------+----------------+ 3 rows in set (0.00 sec) mysql&gt; insert into stu values (null,5,11); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from stu; +----+-----+-------+ | id | age | money | +----+-----+-------+ | 1 | 5 | 11 | +----+-----+-------+ 1 row in set (0.00 sec) mysql&gt; drop table stu; Query OK, 0 rows affected (0.01 sec) mysql&gt; create table stu( -&gt; id int(5), -&gt; age int(5) zerofill -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; desc stu; +-------+--------------------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+--------------------------+------+-----+---------+-------+ | id | int(5) | YES | | NULL | | | age | int(5) unsigned zerofill | YES | | NULL | | +-------+--------------------------+------+-----+---------+-------+ 2 rows in set (0.00 sec) mysql&gt; insert into stu values(1,11); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from stu; +------+-------+ | id | age | +------+-------+ | 1 | 00011 | +------+-------+ 1 row in set (0.00 sec) mysql&gt; insert into stu values(1111111,1111111); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from stu; +---------+---------+ | id | age | +---------+---------+ | 1 | 00011 | | 1111111 | 1111111 | +---------+---------+ 2 rows in set (0.00 sec) 2、浮点型（精度超出则会四舍五入，精确度会丢失） 浮点型 占用字节 范围 float（单精度） 4 -3.4E+38~3.4E+38 double（双精度） 8 -1.8E+308~1.8E+308 浮点数声明：float(M,D) double(M,D) M:总位数 D:小数位数 mysql&gt; create table t1( -&gt; num1 float(5,2), -&gt; num2 double(4,1) -&gt; ); Query OK, 0 rows affected (0.02 sec) mysql&gt; insert into t1 values(1.23,1.23) -&gt; ; Query OK, 1 row affected (0.01 sec) mysql&gt; select * from t1; +------+------+ | num1 | num2 | +------+------+ | 1.23 | 1.2 | +------+------+ 1 row in set (0.00 sec) mysql&gt; insert into t1 values(1555.23,122222.23); ERROR 1264 (22003): Out of range value for column &#39;num1&#39; at row 1 mysql&gt; insert into t1 values(123.233336,12.23444); Query OK, 1 row affected (0.01 sec) mysql&gt; select * from t1; +--------+------+ | num1 | num2 | +--------+------+ | 1.23 | 1.2 | | 123.23 | 12.2 | +--------+------+ 2 rows in set (0.00 sec) mysql&gt; insert into t1 values(9.9999,9.999); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from t1; +--------+-------+ | num1 | num2 | +--------+-------+ | 1.23 | 1.2 | | 123.23 | 12.2 | | 999.99 | 999.9 | | 10.00 | 10.0 | +--------+-------+ 4 rows in set (0.00 sec) 3、定点数（精度不会丢失） 语法：decimal(M,D) 定点数都是变长的，大致每9个数字用四个字节来存储。定点数之所以能保存精确小数，因为整数和小数是分开存储的。占用的资源比浮点数要多。 定点数和浮点数都支持显示宽度和无符号数。 mysql&gt; create table t4( -&gt; num decimal(20,19) -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; insert into t4 values (1.1234567890123456789); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from t4; +-----------------------+ | num | +-----------------------+ | 1.1234567890123456789 | +-----------------------+ 1 row in set (0.00 sec) 二、字符型 varchar：小于等于规定的长度，回收多余字符，节省空间。 char：小于等于规定的长度，不回收多余字符，执行效率比变长高。 数据类型 描述 长度 char(长度) 定长 最大255 varchar(长度) 变长 最大65535（理论值） tinytext 大段文本 2^8-1=255 text 大段文本 2^16-1=65535 mediumtext 大段文本 2^24-1 longtext 大段文本 2^32-1 mysql&gt; create table t3( -&gt; name varchar(10), -&gt; sex char(1) -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; insert into t3(name) values(&#39;12345678900&#39;); ERROR 1406 (22001): Data too long for column &#39;name&#39; at row 1 mysql&gt; insert into t3(name) values(&#39;1234567890&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from t3; +------------+------+ | name | sex | +------------+------+ | 1234567890 | NULL | +------------+------+ mysql&gt; insert into t3(name) values(&#39;123456&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from t3; +------------+------+ | name | sex | +------------+------+ | 1234567890 | NULL | | 123456 | NULL | +------------+------+ 2 rows in set (0.00 sec) 三、枚举（enmu） 优点： 运行速度快（数字比字符串运算速度快） ​ 限制数据 ​ 节省空间 mysql&gt; create table t5( -&gt; name varchar(20), -&gt; sex enum(&#39;男&#39;,&#39;女&#39;,&#39;保密&#39;) -&gt; ); Query OK, 0 rows affected (0.02 sec) mysql&gt; insert into t5 values(&#39;tom&#39;,&#39;男&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; insert into t5 values(&#39;jim&#39;,&#39;女&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; insert into t5 values(&#39;marry&#39;,&#39;未知&#39;); ERROR 1265 (01000): Data truncated for column &#39;sex&#39; at row 1 #只能插入枚举值 mysql&gt; insert into t5 values(&#39;yls&#39;,&#39;保密&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from t5; +------+--------+ | name | sex | +------+--------+ | tom | 男 | | jim | 女 | | yls | 保密 | +------+--------+ 3 rows in set (0.00 sec) mysql&gt; select sex+0 from t5; #内部通过数字存储 +-------+ | sex+0 | +-------+ | 1 | | 2 | | 3 | +-------+ 3 rows in set (0.01 sec) mysql&gt; insert into t5 values(&#39;qss&#39;,&#39;3&#39;); #能直接插入数字 Query OK, 1 row affected (0.01 sec) mysql&gt; select * from t5; +------+--------+ | name | sex | +------+--------+ | tom | 男 | | jim | 女 | | yls | 保密 | | qss | 保密 | +------+--------+ 4 rows in set (0.00 sec) 四、集合（set）最多64个选项 mysql&gt; create table t6( -&gt; hobby set(&#39;爬山&#39;,&#39;读书&#39;,&#39;golang&#39;) -&gt; ); Query OK, 0 rows affected (0.02 sec) mysql&gt; insert into t6 values(&#39;爬山&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; insert into t6 values(&#39;爬山&#39;,&#39;读书&#39;); ERROR 1136 (21S01): Column count doesn&#39;t match value count at row 1 mysql&gt; insert into t6 values(&#39;爬山,读书&#39;); Query OK, 1 row affected (0.01 sec) mysql&gt; select * from t6; +---------------+ | hobby | +---------------+ | 爬山 | | 爬山,读书 | +---------------+ 2 rows in set (0.00 sec) mysql&gt; insert into t6 values(&#39;读书,爬山&#39;); #插入顺序不一样，但是显示顺序会一样。 Query OK, 1 row affected (0.01 sec) mysql&gt; select * from t6; +---------------+ | hobby | +---------------+ | 爬山 | | 爬山,读书 | | 爬山,读书 | +---------------+ 3 rows in set (0.00 sec) 五、时间类型 数据类型 描述 datetime 日期时间，占用8个字节 date 日期，占用3个字节 time 时间，占用3个字节 timestamp 时间戳，占用4个字节 year 年份，占用1个字节 1、datetime 格式：年-月-日 小时：分钟：秒 （范围：0001-9999年） mysql&gt; create table t7( -&gt; field datetime -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; insert into t7 values(&#39;2020-02-29 04:25:29&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from t7; +---------------------+ | field | +---------------------+ | 2020-02-29 04:25:29 | +---------------------+ 1 row in set (0.00 sec) 2、date mysql&gt; create table t8( -&gt; field date -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; insert into t8 values(&#39;2020-02-29&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from t8; +------------+ | field | +------------+ | 2020-02-29 | +------------+ 1 row in set (0.00 sec) 3、timestamp（日期形式） 4、year 最多只能表示255个年份，范围1901-2155 5、time 表示时间或者时间间隔 六、boolean mysql&gt; create table t9( -&gt; field boolean -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; insert into t9 values (true),(false); Query OK, 2 rows affected (0.00 sec) Records: 2 Duplicates: 0 Warnings: 0 mysql&gt; select * from t9; +-------+ | field | +-------+ | 1 | | 0 | +-------+ 2 rows in set (0.00 sec) 列属性(null | not null)default:默认值 mysql&gt; create table t10( -&gt; id int unsigned, -&gt; addr varchar(20) not null default &#39;不详&#39; -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; insert into t10 values(1,&#39;杭州&#39;),(2,default); Query OK, 2 rows affected (0.01 sec) Records: 2 Duplicates: 0 Warnings: 0 mysql&gt; select * from t10; +------+--------+ | id | addr | +------+--------+ | 1 | 杭州 | | 2 | 不详 | +------+--------+ 2 rows in set (0.00 sec) auto_increment:auto_increment必须是主键，但是主键不一定是自增。 ​ 给自增列插入数据，使用null关键字。 自增列上的数据被删除，默认情况下此记录编号不再使用。唯一键： ​ 特点：不能重复，可以为空，同一张表可以拥有多个唯一键 ​ 作用：保证数据不能重复，保证数据完整性，加快数据访问 ​ 添加唯一键： ​ mysql&gt; create table t14( -&gt; id int primary key, -&gt; name varchar(20) unique -&gt; ); Query OK, 0 rows affected (0.02 sec) ----------------------------------------------------------------------------------------------- mysql&gt; create table t15( -&gt; id int primary key, -&gt; name varchar(20) -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; alter table t15 add unique(name); Query OK, 0 rows affected (0.01 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; desc t15; +-------+-------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+-------------+------+-----+---------+-------+ | id | int(11) | NO | PRI | NULL | | | name | varchar(20) | YES | UNI | NULL | | +-------+-------------+------+-----+---------+-------+ 2 rows in set (0.00 sec) ----------------------------------------------------------------------------------------------- mysql&gt; create table t16( -&gt; id int, -&gt; name varchar(20), -&gt; addr varchar(20) -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; alter table t16 add unique(name),add unique(addr); Query OK, 0 rows affected (0.01 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; desc t16; +-------+-------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+-------------+------+-----+---------+-------+ | id | int(11) | YES | | NULL | | | name | varchar(20) | YES | UNI | NULL | | | addr | varchar(20) | YES | UNI | NULL | | +-------+-------------+------+-----+---------+-------+ 3 rows in set (0.00 sec) ----------------------------------------------------------------------------------------------- mysql&gt; create table t17( -&gt; id int, -&gt; name varchar(20), -&gt; addr varchar(20) -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; alter table t16 add unique(name,addr); #name、addr组合成唯一键 Query OK, 0 rows affected (0.01 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; desc t16; +-------+-------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+-------------+------+-----+---------+-------+ | id | int(11) | YES | | NULL | | | name | varchar(20) | YES | UNI | NULL | | | addr | varchar(20) | YES | UNI | NULL | | +-------+-------------+------+-----+---------+-------+ 3 rows in set (0.00 sec) ​ 查看唯一键： mysql&gt; show create table t15\\G *************************** 1. row *************************** Table: t15 Create Table: CREATE TABLE `t15` ( `id` int(11) NOT NULL, `name` varchar(20) DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `name` (`name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 1 row in set (0.00 sec) mysql&gt; show create table t16\\G *************************** 1. row *************************** Table: t16 Create Table: CREATE TABLE `t16` ( `id` int(11) DEFAULT NULL, `name` varchar(20) DEFAULT NULL, `addr` varchar(20) DEFAULT NULL, UNIQUE KEY `name` (`name`), UNIQUE KEY `addr` (`addr`), UNIQUE KEY `name_2` (`name`,`addr`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 1 row in set (0.00 sec) ​ 删除唯一键: mysql&gt; show create table t16\\G *************************** 1. row *************************** Table: t16 Create Table: CREATE TABLE `t16` ( `id` int(11) DEFAULT NULL, `name` varchar(20) DEFAULT NULL, `addr` varchar(20) DEFAULT NULL, UNIQUE KEY `name` (`name`), UNIQUE KEY `addr` (`addr`), UNIQUE KEY `name_2` (`name`,`addr`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 1 row in set (0.00 sec) mysql&gt; alter table t16 drop index name_2; Query OK, 0 rows affected (0.02 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; show create table t16\\G *************************** 1. row *************************** Table: t16 Create Table: CREATE TABLE `t16` ( `id` int(11) DEFAULT NULL, `name` varchar(20) DEFAULT NULL, `addr` varchar(20) DEFAULT NULL, UNIQUE KEY `name` (`name`), UNIQUE KEY `addr` (`addr`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 1 row in set (0.00 sec) primary key: ​ 唯一标识表中记录的一个或者一组列 ​ 不能重复，不能为空 ​ 一个表只能有一个主键，可以由多个字段组成 ​ 保证数据完整性，加快查询速度 选择主键原则： ​ 添加主键：mysql&gt; create table t11( -&gt; id varchar(5) primary key, -&gt; name varchar(10) not null -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; insert into t11 values(&#39;s2531&#39;,&#39;tom&#39;),(&#39;s2532&#39;,&#39;berry&#39;); Query OK, 2 rows affected (0.00 sec) Records: 2 Duplicates: 0 Warnings: 0 mysql&gt; insert into t11 values(&#39;s2531&#39;,&#39;tom&#39;); ERROR 1062 (23000): Duplicate entry &#39;s2531&#39; for key &#39;PRIMARY&#39; mysql&gt; insert into t11 values(null,&#39;tom&#39;); ERROR 1048 (23000): Column &#39;id&#39; cannot be null 添加主键的方法mysql&gt; create table t11( -&gt; id varchar(5) primary key, -&gt; name varchar(10) not null -&gt; ); Query OK, 0 rows affected (0.02 sec) ----------------------------------------------------------------------------------------------- mysql&gt; create table t12( -&gt; id int, -&gt; name varchar(10), -&gt; primary key(id) -&gt; ); Query OK, 0 rows affected (0.02 sec) ----------------------------------------------------------------------------------------------- mysql&gt; create table t13( -&gt; id int, -&gt; name varchar(10) -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; alter table t13 add primary key(id); Query OK, 0 rows affected (0.01 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; desc t13; +-------+-------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+-------------+------+-----+---------+-------+ | id | int(11) | NO | PRI | NULL | | | name | varchar(10) | YES | | NULL | | +-------+-------------+------+-----+---------+-------+ 2 rows in set (0.00 sec) 删除主键：mysql&gt; alter table t13 drop primary key; Query OK, 0 rows affected (0.02 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; desc t13; +-------+-------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+-------------+------+-----+---------+-------+ | id | int(11) | NO | | NULL | | | name | varchar(10) | YES | | NULL | | +-------+-------------+------+-----+---------+-------+ 2 rows in set (0.00 sec) 数据完整性引用完整性 外键 mysql&gt; create table stuinfo( -&gt; stunum char(4) primary key, -&gt; name varchar(10) not null -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; create table stumarks( -&gt; stuid char(4) primary key, -&gt; score tinyint unsigned, -&gt; foreign key (stuid) references stuinfo(stunum) -&gt; ); Query OK, 0 rows affected (0.01 sec) ----------------------------------------------------------------------------------------------- mysql&gt; insert into stumarks values(&#39;s101&#39;,88); ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`school`.`stumarks`, CONSTRAINT `stumarks_ibfk_1` FOREIGN KEY (`stuid`) REFERENCES `stuinfo` (`stunum`)) /* 主表中不存在s101，从表是无法插入的 */ mysql&gt; insert into stuinfo values(&#39;s101&#39;,&#39;tom&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; insert into stumarks values(&#39;s101&#39;,88); Query OK, 1 row affected (0.00 sec) ----------------------------------------------------------------------------------------------- mysql&gt; delete from stuinfo where stunum=&#39;s101&#39;; ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`school`.`stumarks`, CONSTRAINT `stumarks_ibfk_1` FOREIGN KEY (`stuid`) REFERENCES `stuinfo` (`stunum`)) mysql&gt; delete from stumarks where stuid=&#39;s101&#39;; Query OK, 1 row affected (0.00 sec) mysql&gt; delete from stuinfo where stunum=&#39;s101&#39;; Query OK, 1 row affected (0.01 sec) /*删除主表的数据必须先删除从表中的对应数据*/ ----------------------------------------------------------------------------------------------- mysql&gt; drop table stumarks; Query OK, 0 rows affected (0.00 sec) mysql&gt; drop table stuinfo; Query OK, 0 rows affected (0.00 sec) mysql&gt; create table stuinfo( -&gt; stunum char(4) primary key, -&gt; name varchar(10) not null -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; create table stumarks( -&gt; stuid char(4) primary key, -&gt; score tinyint unsigned -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; alter table stumarks add foreign key(stuid) references stuinfo(stunum); Query OK, 0 rows affected (0.02 sec) Records: 0 Duplicates: 0 Warnings: 0 /*修改表的时候添加外键*/ ----------------------------------------------------------------------------------------------- mysql&gt; show create table stumarks\\G *************************** 1. row *************************** Table: stumarks Create Table: CREATE TABLE `stumarks` ( `stuid` char(4) NOT NULL, `score` tinyint(3) unsigned DEFAULT NULL, PRIMARY KEY (`stuid`), CONSTRAINT `stumarks_ibfk_1` FOREIGN KEY (`stuid`) REFERENCES `stuinfo` (`stunum`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 1 row in set (0.00 sec) mysql&gt; alter table stumarks drop foreign key stumarks_ibfk_1; Query OK, 0 rows affected (0.01 sec) Records: 0 Duplicates: 0 Warnings: 0 /*删除外键*/ ----------------------------------------------------------------------------------------------- mysql&gt; create table stuinfo( -&gt; stunum char(4) primary key, -&gt; name varchar(10) not null -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; create table stumarks( -&gt; stuid int auto_increment primary key, -&gt; stunum char(4), -&gt; score tinyint unsigned, -&gt; foreign key (stunum) references stuinfo(stunum) on delete set null on update cascade -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; insert into stuinfo values(&#39;100&#39;,tom); ERROR 1054 (42S22): Unknown column &#39;tom&#39; in &#39;field list&#39; mysql&gt; insert into stuinfo values(&#39;100&#39;,&#39;tom&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; insert into stumarks values(null,&#39;100&#39;,88); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from stuinfo; +--------+------+ | stunum | name | +--------+------+ | 100 | tom | +--------+------+ 1 row in set (0.00 sec) mysql&gt; select * from stumarks; +-------+--------+-------+ | stuid | stunum | score | +-------+--------+-------+ | 1 | 100 | 88 | +-------+--------+-------+ 1 row in set (0.00 sec) mysql&gt; update stuinfo set stunum=&#39;101&#39; where stunum=&#39;100&#39;; Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0 mysql&gt; select * from stumarks; +-------+--------+-------+ | stuid | stunum | score | +-------+--------+-------+ | 1 | 101 | 88 | +-------+--------+-------+ 1 row in set (0.00 sec) mysql&gt; delete from stuinfo where stunum=&#39;101&#39;; Query OK, 1 row affected (0.00 sec) mysql&gt; select * from stuinfo; Empty set (0.00 sec) mysql&gt; select * from stumarks; +-------+--------+-------+ | stuid | stunum | score | +-------+--------+-------+ | 1 | NULL | 88 | +-------+--------+-------+ 1 row in set (0.00 sec) /*级联操作：当主表中的数据删除是，从表中对应的记录置空；更新时也对应更新*/ /*in 、not in*/ mysql&gt; select id,truename as &#39;姓名&#39;,idcard from xb_mem_info where id not in (10,330,499,331) limit 5; +----+-----------+--------------------+ | id | 姓名 | idcard | +----+-----------+--------------------+ | 1 | 5990 | NULL | | 3 | 蔡伟优 | 360727198706152011 | | 4 | 黄杰 | 360727199108280093 | | 5 | 谭辉金 | 360729199606260020 | | 6 | 黄美霞 | 36072719870519202X | +----+-----------+--------------------+ 5 rows in set (0.01 sec) mysql&gt; select id,truename as &#39;姓名&#39;,idcard from xb_mem_info where id in (10,330,499,331) limit 5; +-----+-----------+--------------------+ | id | 姓名 | idcard | +-----+-----------+--------------------+ | 10 | 蔡素华 | 360727198902202020 | | 330 | 9375 | NULL | | 331 | 2782 | NULL | | 499 | 陈书芹 | 410727197812236921 | +-----+-----------+--------------------+ 4 rows in set (0.00 sec) ----------------------------------------------------------------------------------------------- /*between、not between*/ mysql&gt; select id,truename,idcard from xb_mem_info where id between 10 and 15 limit 6; +----+-----------+--------------------+ | id | truename | idcard | +----+-----------+--------------------+ | 10 | 蔡素华 | 360727198902202020 | | 11 | 5729 | NULL | | 12 | 陈奎龙 | 500226199001052237 | | 13 | 3330 | NULL | | 14 | 王忠诚 | 500381199401114118 | | 15 | 莫黎 | 511025198608230010 | +----+-----------+--------------------+ 6 rows in set (0.00 sec) mysql&gt; select id,truename,idcard from xb_mem_info where id not between 10 and 15 limit 6; +----+-----------+--------------------+ | id | truename | idcard | +----+-----------+--------------------+ | 1 | 5990 | NULL | | 3 | 蔡伟优 | 360727198706152011 | | 4 | 黄杰 | 360727199108280093 | | 5 | 谭辉金 | 360729199606260020 | | 6 | 黄美霞 | 36072719870519202X | | 7 | 黄燕芳 | 360727199309232020 | +----+-----------+--------------------+ 6 rows in set (0.00 sec) ----------------------------------------------------------------------------------------------- /*is null、is not null*/ mysql&gt; select id,truename,idcard from xb_mem_info where idcard is null limit 10; +----+----------+--------+ | id | truename | idcard | +----+----------+--------+ | 1 | 5990 | NULL | | 11 | 5729 | NULL | | 13 | 3330 | NULL | | 17 | 1468 | NULL | | 20 | NULL | NULL | | 21 | 9474 | NULL | | 22 | 5469 | NULL | | 23 | 9453 | NULL | | 25 | 2643 | NULL | | 26 | 4491 | NULL | +----+----------+--------+ 10 rows in set (0.00 sec) mysql&gt; select id,truename,idcard from xb_mem_info where idcard is not null limit 10; +----+-----------+--------------------+ | id | truename | idcard | +----+-----------+--------------------+ | 3 | 蔡伟优 | 360727198706152011 | | 4 | 黄杰 | 360727199108280093 | | 5 | 谭辉金 | 360729199606260020 | | 6 | 黄美霞 | 36072719870519202X | | 7 | 黄燕芳 | 360727199309232020 | | 8 | 王经媛 | 360732199709234122 | | 9 | 刘利盛 | 360727198907082013 | | 10 | 蔡素华 | 360727198902202020 | | 12 | 陈奎龙 | 500226199001052237 | | 14 | 王忠诚 | 500381199401114118 | +----+-----------+--------------------+ 10 rows in set (0.00 sec) ----------------------------------------------------------------------------------------------- /*sum()*/ mysql&gt; select sum(id) from xb_mem_info; +----------+ | sum(id) | +----------+ | 60856657 | +----------+ 1 row in set (0.01 sec) ----------------------------------------------------------------------------------------------- /*avg()*/ mysql&gt; select avg(idcard) from xb_mem_info; +----------------------+ | avg(idcard) | +----------------------+ | 3.556618801202589e17 | +----------------------+ 1 row in set, 789 warnings (0.01 sec) ----------------------------------------------------------------------------------------------- /*max()*/ mysql&gt; select max(idcard) from xb_mem_info; +--------------------+ | max(idcard) | +--------------------+ | 659001199107054831 | +--------------------+ 1 row in set (0.00 sec) ----------------------------------------------------------------------------------------------- /*min*/ mysql&gt; select min(idcard) from xb_mem_info; +--------------------+ | min(idcard) | +--------------------+ | 110101198112240038 | +--------------------+ 1 row in set (0.01 sec) ----------------------------------------------------------------------------------------------- /*count()*/ mysql&gt; select count(*) from xb_mem_info; +----------+ | count(*) | +----------+ | 11029 | +----------+ 1 row in set (0.00 sec) mysql&gt; select count(1) from xb_mem_info; +----------+ | count(1) | +----------+ | 11029 | +----------+ 1 row in set (0.00 sec) 执行效率上： 列名为主键，count(列名)会比count(1)快 列名不为主键，count(1)会比count(列名)快 如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*） 如果有主键，则 select count（主键）的执行效率是最优的 如果表只有一个字段，则 select count（*）最优。 https://blog.csdn.net/iFuMI/article/details/77920767 ---------------------------------------------------------------------------------------- /*order by*/ mysql&gt; select id,truename,idcard from xb_mem_info where idcard is not null order by idcard limit 10; +------+-----------+--------------------+ | id | truename | idcard | +------+-----------+--------------------+ | 8847 | 曹磊 | 110101198112240038 | | 6870 | 李曌 | 11010119870608102X | | 6854 | 郭思酉 | 11010119930224451X | | 934 | 刘晨晞 | 110102197902222725 | | 1190 | 杨宽 | 110102198007070432 | | 7085 | 王璞 | 110102198103131530 | | 5252 | 杨雨 | 110102198806162405 | | 3243 | 霍建 | 110103197801230650 | | 7744 | 孟龙 | 110103198712181214 | | 5967 | 何林 | 110104196302251256 | +------+-----------+--------------------+ 10 rows in set (0.00 sec) mysql&gt; select id,truename,idcard from xb_mem_info where idcard is not null order by idcard desc limit 10; +-------+-------------------------+--------------------+ | id | truename | idcard | +-------+-------------------------+--------------------+ | 3671 | 杨先锋 | 659001199107054831 | | 7297 | 孙正钰 | 65900119910511161X | | 5523 | 孟蕊 | 659001198612115725 | | 2194 | 胡安·巴合夏别克 | 654301199308090013 | | 10193 | 哈里哈什·胡沙因 | 654301198405201868 | | 912 | 晁永康 | 65422219980303391X | | 6237 | 哈依那尔·叶尔肯 | 654221199506131437 | | 1598 | 刘洋 | 65420219950519631X | | 9606 | 郭玉忠 | 654123198710133299 | | 2521 | 屈荣兰 | 654122198810251325 | +-------+-------------------------+--------------------+ 10 rows in set (0.01 sec) ---------------------------------------------------------------------------------------- /*group by*/ mysql&gt; select * from test; +----+-----------+------+------+ | id | name | sex | age | +----+-----------+------+------+ | 1 | 蔡伟优 | 男 | 33 | | 2 | 黄杰 | 男 | 29 | | 3 | 谭辉金 | 男 | 24 | | 4 | 黄美霞 | 女 | 30 | | 5 | 黄燕芳 | 女 | 27 | +----+-----------+------+------+ 5 rows in set (0.00 sec) mysql&gt; select avg(age) as avg_age,sex from test group by sex; +---------+------+ | avg_age | sex | +---------+------+ | 28.6667 | 男 | | 28.5000 | 女 | +---------+------+ 2 rows in set (0.00 sec) ---------------------------------------------------------------------------------------- /*distinct*/ select distinct name from test; ---------------------------------------------------------------------------------------- /*内连接：inner join*/ ①：select column from t1 inner join t2 on t1.commen_column=t2.commen_column; ②：select column from t1,t2 where t1.commen_column=t2.commen_column; ③：select from t1 inner join t2 on t1.commen_column=t2.commen_column inner join t3 on t2.commen_column=t3.commen_column; ---------------------------------------------------------------------------------------- /*左外连接：left join*/ select column from t1 left join t2 on t1.commen_column=t2.commen_column; ---------------------------------------------------------------------------------------- /*添加索引*/ mysql&gt; desc stu; +-------+--------------------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+--------------------------+------+-----+---------+-------+ | id | int(5) | YES | | NULL | | | age | int(5) unsigned zerofill | YES | | NULL | | +-------+--------------------------+------+-----+---------+-------+ 2 rows in set (0.00 sec) mysql&gt; create index idx_id on stu(id); # Query OK, 0 rows affected (0.03 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; show index from stu; +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | stu | 1 | idx_id | 1 | id | A | 2 | NULL | NULL | YES | BTREE | | | +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ 1 row in set (0.00 sec) ---------------------------------------------------------------------------------------- /*添加索引*/ mysql&gt; desc t10; +-------+------------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+------------------+------+-----+---------+-------+ | id | int(10) unsigned | YES | | NULL | | | addr | varchar(20) | NO | | 不详 | | +-------+------------------+------+-----+---------+-------+ 2 rows in set (0.00 sec) mysql&gt; show index from t10; Empty set (0.00 sec) mysql&gt; alter table t10 add index idx_addr(addr); Query OK, 0 rows affected (0.01 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; show index from t10; +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | t10 | 1 | idx_addr | 1 | addr | A | 2 | NULL | NULL | | BTREE | | | +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ 1 row in set (0.00 sec) ---------------------------------------------------------------------------------------- /*创建表时添加索引*/ mysql&gt; create table t18( -&gt; id int, -&gt; name varchar(10), -&gt; index idx_name (name) -&gt; ); Query OK, 0 rows affected (0.01 sec) mysql&gt; show index from t18; +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | t18 | 1 | idx_name | 1 | name | A | 0 | NULL | NULL | YES | BTREE | | | +-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ 1 row in set (0.00 sec) mysql&gt; drop index idx_name on t18; /*删除索引*/ Query OK, 0 rows affected (0.02 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; show index from t18; Empty set (0.00 sec) /*唯一索引*/ create unique index index_name table_name (column_name); alter table table_name add unqiue index index_name (column) ---------------------------------------------------------------------------------------- /*rand()*/ mysql&gt; select truename from xb_mem_info order by rand() limit 5; //随机取值 +-----------+ | truename | +-----------+ | 杨昌龙 | | 高胜兵 | | 陆惠玲 | | 石兴 | | 1108 | +-----------+ 5 rows in set (0.01 sec) mysql&gt; select truename from xb_mem_info order by rand() limit 5; +-----------+ | truename | +-----------+ | 陈常华 | | 吴宾宾 | | 刘宏斌 | | 8011 | | 漆艳玲 | +-----------+ 5 rows in set (0.02 sec) mysql&gt; select truename from xb_mem_info order by rand() limit 5; +-----------+ | truename | +-----------+ | 张雨 | | 彭宏扬 | | 施树伟 | | 易亚平 | | 陈泳希 | +-----------+ 5 rows in set (0.02 sec) title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: test","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.3amupupup.online/categories/mysql/"}],"tags":[{"name":"sql_base","slug":"sql-base","permalink":"http://blog.3amupupup.online/tags/sql-base/"}]},{"title":"kubectl","slug":"kubectl","date":"2021-03-18T03:09:52.057Z","updated":"2021-03-18T03:09:52.059Z","comments":true,"path":"2021/03/18/kubectl/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/kubectl/","excerpt":"","text":"kubectl命令技巧: 平滑更新部署（滚动更新）。相当于阿里云的容器服务里的触发器，触发更新。kubectl -n vk rollout restart deployment workerman","categories":[{"name":"k8s","slug":"k8s","permalink":"http://blog.3amupupup.online/categories/k8s/"}],"tags":[{"name":"kubectl","slug":"kubectl","permalink":"http://blog.3amupupup.online/tags/kubectl/"}]},{"title":"c陷阱与缺陷","slug":"c陷阱与缺陷","date":"2021-03-18T03:09:52.054Z","updated":"2021-03-18T03:09:52.055Z","comments":true,"path":"2021/03/18/c陷阱与缺陷/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/c%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7/","excerpt":"","text":"1.5 字符与字符串 用单引号引起的一个字符实际上代表一个证书，整数值对应于该字符在编译器采用的字符集中的序列值。 用双引号引起的字符串，代表的是指向一个无名数组起始字符的指针。 2.1 理解函数声明 float *g(), (*h)(); /* ()的优先级比*高，*g()等价于*(g()): g是一个函数，该函数的返回值时一个指向浮点数的指针。 (*h)(): h是一个函数指针，返回值时浮点数类型。 (float (*)())表示一个“指向返回值为浮点类型的函数的指针”的类型转换符。 */ ((void()())0)(); /* (fp)() fp是个指针 fp 替换 (void()())0 0强制类型转换成一个函数指针，该函数无返回值无参数 */ void sigfunc(int); /* 声明一个指向sigfunc函数的指针变量：void (*psf)(int) */","categories":[],"tags":[]},{"title":"Nginx","slug":"Nginx","date":"2021-03-18T03:09:52.053Z","updated":"2021-03-18T03:09:52.053Z","comments":true,"path":"2021/03/18/Nginx/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/Nginx/","excerpt":"","text":"初识nginxnginx 命令行: 指令 功能 -c 指定使用的配置文件 -t -T 检查配置文件语法 -g 指定配置指令 -p 指定运行目录 -v -V 查看版本信息、编译参数 -s 发送信号[reload|stop|quit|reopen(重新打开一个文件记录日志)] nginx热部署: was 重新编译nginx生成nginx(new)二进制文件，编译参数在原来的基础上添加。 备份nginx(old)，用nginx(new)二进制文件覆盖nginx(old)二进制文件。 找出nginx(old)的master进程的pid，kill -USR2 pid。(nginx会使用nginx(new)二进制文件启动，此时ps aux |grep nginx会看见两个master进程) kill -WINCH old_nginx_pid，旧版本的worker进程会优雅结束，master进程仍然在运行(出现意外时，能够回退版本)。 nginx配置文件指令:gzip on; gzip_min_length 1;当发送的内容小于1字节时就不进行压缩 gzip_comp_level 2;压缩级别，级别越高越损耗性能 gzip_types text/plain application/x-javascript text/css application/xml text/javascript image/jpg image/gig image/png;压缩对象 autoindex on;显示网站根目录结构(eg:下载) set $limit_rate 1k;限制发送到client的速度(每秒1k) access_log /data/wwwlogs/access.log main;记录nginx的访问日志,main是log_format需要自己根据需求定义 proxy_cache_path /tmp/nginxcache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path off; upstream test { server ip:port; server ip:port; ... } server{ location / { proxy_cache my_cache;使用cache proxy_cache_key $host$uri$is_arges$arges; proxy_cache_valid 200 304 302 1d; proxy_set_header Host $host;传header proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://test; 反向代理 } } nginx架构进程结构多进程模式，master &amp; slave（master管理子进程） nginx进程管理：信号master进程： 监控work进程——CHLD信号（linux中子进程退出时会发送CHLD信号给父进程，当nginx子进程退出时master进程会收到CHLD信号，将子进程重新拉起） 接受信号：TERM ，INT（立即退出，stop）；QUIT（优雅退出，quit）；HUP（重载配置文件，reload）；USR1（重新打开日志文件，reopen）； worker进程：TERM ，INT；QUIT；USR1；WINCHreload真相① 向master进程发送HUP信号（reload命令）。 ② master进程校验配置文件语法的正确性。 ③ master进程打开新的监听端口。 ④ master进程用新配置启动worker进程。 ⑤ master向老的worker进程发送QUIT信号。 ⑥ 老worker进程关闭监听句柄，处理完当前连接之后结束进程。 注：如果重载中worker进程由于某些原因无法正常退出，就会一直占用系统资源，可以通过worker_shutdown_timeout指令设置worker进程退出的最大等待时间。 worker进程的优雅关闭（针对http请求）① 设置定时器（worker_shutdown_timeout）。 ② 关闭监听句柄。（保证worker进程不会再接受新的连接请求） ③ 关闭空闲链接。 ④ 在循环中等待全部连接关闭。（如果设置了worker_shutdown_timeout，那么即使连接没有处理完也会强行关闭） ⑤ 退出进程。 nginx事件驱动模型 epoll的优劣势及原理","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://blog.3amupupup.online/tags/Nginx/"}]},{"title":"c++构造函数","slug":"c++构造函数","date":"2021-03-18T03:09:52.052Z","updated":"2021-03-18T03:09:52.052Z","comments":true,"path":"2021/03/18/c++构造函数/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/c++%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/","excerpt":"","text":"#include &lt;iostream&gt; #include &lt;string&gt; using namespace std; class Person { public: Person() { cout &lt;&lt; &quot;调用无参构造&quot; &lt;&lt; endl; this-&gt;name = &quot;null&quot;; this-&gt;age = 0; } Person(string name, int age) { cout &lt;&lt; &quot;调用有参构造函数&quot; &lt;&lt; endl; this-&gt;name = name; this-&gt;age = age; } Person(const Person&amp; p) { cout &lt;&lt; &quot;调用拷贝构造函数&quot; &lt;&lt; endl; this-&gt;name = p.name; this-&gt;age = p.age; } Person operator=(const Person&amp; p) // 如果直接返回对象，在返回时会多调用一次拷贝构造函数。如果返回值为引用，则不会调用拷贝构造。另外在传参的时候也尽量要使用引用，如果不使用则会增加一次拷贝构造函数的调用。 { cout &lt;&lt; &quot;调用重载符=&quot; &lt;&lt; endl; this-&gt;age = p.age; this-&gt;name = p.name; return *this; } void Info() { cout &lt;&lt; this-&gt;name &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;age &lt;&lt; endl; } private: string name; int age; string family[3]; }; int main() { Person p1(&quot;duwei&quot;,25); Person p2; p2 = p1; return 0; } output: 调用有参构造函数 调用无参构造 调用重载符= 调用拷贝构造函数 // 由于重载符=返回的是非引用造成的","categories":[],"tags":[]},{"title":"zabbix_dingdingAlert","slug":"zabbix_dingdingAlert","date":"2021-03-18T03:09:52.051Z","updated":"2021-03-18T03:09:52.052Z","comments":true,"path":"2021/03/18/zabbix_dingdingAlert/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/zabbix_dingdingAlert/","excerpt":"","text":"1、go脚本package main import ( &quot;fmt&quot; &quot;os&quot; &quot;script/utils&quot; ) func main() { res := os.Args[1:] fmt.Println(res[0]) message := fmt.Sprintf(&quot;message:from zabbix\\n%s&quot;, res[0]) utils.SendDingMsg(message) } func SendDingMsg(msg string) { //请求地址模板 webHook := `https://oapi.dingtalk.com/robot/send?access_token=ac19ab391d99a7xa93128af4e9bacbeafea151926c1187640233a2f3199baba9` content := `{&quot;msgtype&quot;: &quot;text&quot;, &quot;text&quot;: {&quot;content&quot;: &quot;` + msg + `&quot;} }` //创建一个请求 req, err := http.NewRequest(&quot;POST&quot;, webHook, strings.NewReader(content)) if err != nil { // handle error fmt.Println(err) } client := &amp;http.Client{} //设置请求头 req.Header.Set(&quot;Content-Type&quot;, &quot;application/json; charset=utf-8&quot;) //发送请求 resp, err := client.Do(req) //关闭请求 defer resp.Body.Close() if err != nil { // handle error fmt.Println(err) } } 2、编译脚本之后上传到zabbix-server。 查看zabbix-server配置文件，找到AlertScriptsPath参数查看存放脚本位置：AlertScriptsPath=/usr/lib/zabbix/alertscripts，将编译好的二进制文件放入。 默认信息: 告警主机：{HOST.NAME} 主机IP： {HOST.IP} 告警时间：{EVENT.DATE} {EVENT.TIME} 告警等级：{TRIGGER.SEVERITY} 告警信息：{TRIGGER.NAME} 问题详情：{ITEM.NAME}:{ITEM.VALUE} 当前状态: {TRIGGER.STATUS}:{ITEM.VALUE1} 事件ID： {EVENT.ID}","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"zabbix","slug":"zabbix","permalink":"http://blog.3amupupup.online/tags/zabbix/"}]},{"title":"数据的存储","slug":"数据的存储","date":"2021-03-18T03:09:52.051Z","updated":"2021-03-18T03:09:52.051Z","comments":true,"path":"2021/03/18/数据的存储/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/","excerpt":"","text":"原码、反码、补码有符号：原反补相同。 计算机中的整形有符号数有三种表示方法，即原码、反码、补码。 三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位三种表示法各不相同。 方法名 方法 原码 直接按照正负数的形式翻译成二进制就可以 反码 原码的符号位不变，将其它维依次按位取反 补码 反码加一 #include &quot;stdio.h&quot; int main(){ int a = 20; // 0(符号位) 0000000 00000000 00000000 00010100 -原码 // 00000000 00000000 00000000 00010100 -反码 // 00000000 00000000 00000000 00010100 -补码 // 0x00000014 十六进制 int b = -10; // 1(符号位) 0000000 00000000 00000000 00001010 -原码 // 11111111 11111111 11111111 11110101 -反码 // 11111111 11111111 11111111 11110110 -补码 // 0xfffffff6 a+b; // 00000000000000000000000000010100 // 11111111111111111111111111110110 // 1 00000000000000000000000000001010 33位，int只能存32位 所以第一个1舍弃，所以结果为10 return 0; } 对于整形来说：数据存放在内存中其实存放的是补码。 10000000 不进行计算，直接等于128 浮点数： 9.0 1001.0 1.001*2^3 == (-1)^0 * 1.001 * 2^3 //(-1)^s * M * 2^E [S 1bit][E 8bit][M 23bit] S:符号位 E:指数位(无符号) M:有效数字 5.5 101.1 (-1)^0 * 1.011 * 2^2 S = 0 E = 2 + 127 = 129 = 10000001(二进制) M = 1.011 0 10000001 01100000000000000000000 0100 0000 1011 0000 0000 0000 0000 0000 4 0 b 0 0 0 0 0(16进制) 内存: 0x40b00000 (如下图，小端存储法) 例题： int n = 9; float *pFloat = (float *)&amp;n; printf(&quot;n的值为：%d\\n&quot;,n); printf(&quot;*pFloat的值为：%f\\n&quot;,*pFloat); *pFloat = 9.0; printf(&quot;num的值为：%d\\n&quot;,n); printf(&quot;*pFloat的值为：%f\\n&quot;,*pFloat); // 9.0: 1001.0 // 1.001 * 2^3 // (-1)^0 3+127 001 // 0 10000010 00100000000000000000000 // 0100 0001 0001 0000 0000 0000 0000 0000 因为是正数，所以 补码==原码==反码 //转换成10进制为：1091567616","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c语言基础","slug":"c语言基础","permalink":"http://blog.3amupupup.online/tags/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"c学习笔记","slug":"c学习笔记","date":"2021-03-18T03:09:52.049Z","updated":"2021-03-18T03:09:52.050Z","comments":true,"path":"2021/03/18/c学习笔记/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/c%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"1、数组名。#include &lt;stdio.h&gt; /* int main(){ char *src = &quot;duabcdwei&quot;; char dest[100] = { 0 }; for (;(*dest++ = *src++);){ ; } printf(&quot;%s\\n&quot;,dest); return 0; } * 数组名是一个常量，不能进行自增。 * 所以这里的写法是错误的。 */ void strcpy_best2(char *src, char*dest) { printf(&quot;&amp;src in = %p\\n&quot;, &amp;src); printf(&quot;src = %p,line = %d\\n&quot;,src,__LINE__); *(*&amp;src+1) = &#39;A&#39;; while ((*dest++ = *src++)){ ; } /* * 在此函数被调用时，数组的地址会拷贝给形参变量，src、dest是变量，所以能够进行自增 * */ } int main() { char dest[10]; char src[] = &quot;duwei&quot;; printf(&quot;&amp;src out = %p\\n&quot;,&amp;src); printf(&quot;src out = %p\\n&quot;,src); strcpy_best2(src,dest); printf(&quot;dest = %s\\n&quot;, dest); printf(&quot;src = %s\\n&quot;,src); return 0; } output: &amp;src out = 0x7ffeed653a32 src out = 0x7ffeed653a32 &amp;src in = 0x7ffeed653a08 src = 0x7ffeed653a32,line = 64 dest = dAwei src = dAwei 结论：数组名是常量，不能够被修改。 2、字符串+内存函数 size_t strlen(const char *); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { printf(&quot;length = %lu\\n&quot;,strlen(&quot;learn C&quot;)); return 0; } char * strcpy(char *dest, const char *src); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char dest[100]; strcpy(dest,&quot;learn C&quot;); printf(&quot;dest = %s\\n&quot;,dest); return 0; } char * strcat(char *dest, const char *src); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char str[100] = &quot;learn&quot;; strcat(str,&quot; C&quot;); printf(&quot;str = \\&quot;%s\\&quot;\\n&quot;, str); // strcat(str,str); // printf(&quot;str = \\&quot;%s\\&quot;\\n&quot;, str); return 0; } int strcmp(const char *str1, const char *str2); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { /* * 比较的是ascii码 * */ int ret1 = strcmp(&quot;first&quot;, &quot;second&quot;); printf(&quot;ret = %d\\n&quot;,ret1); // -1 int ret2 = strcmp(&quot;first&quot;, &quot;first&quot;); printf(&quot;ret = %d\\n&quot;,ret2); // 0 int ret3 = strcmp(&quot;second&quot;, &quot;first&quot;); printf(&quot;ret = %d\\n&quot;,ret3); // 1 return 0; } char strstr(const char\\, const char*); int main() { char str[] = &quot;this is a simple string.&quot;; char *pch = NULL; pch = strstr(str, &quot;simple&quot;); strncpy(pch,&quot;simple&quot;,6); printf(&quot;str = \\&quot;%s\\&quot;&quot;, pch); return 0; } char *strtok(char *str, const char *sep); sep参数是字符串，包含分隔符的字符集合。 #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char str[] = &quot;-this,a simple string.&quot;; char *pch; printf(&quot;Splitting string \\&quot;%s\\&quot; into tokens:\\n&quot;,str); pch = strtok(str, &quot;,.-&quot;); while (pch != NULL){ printf(&quot;%s\\n&quot;,pch); pch = strtok(NULL,&quot;,.-&quot;); } return 0; } strtok会改变被操作字符串，所以一般先进行拷贝再操作 #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char *p = &quot;duwei19961021@163.com&quot;; const char *sep = &quot;@.&quot;; char cp[30]; strcpy(cp,p); char *str = NULL; for (str = strtok(cp,sep);str != NULL; str = strtok(NULL,sep)) { printf(&quot;%s\\n&quot;,str); } return 0; } char *strerror(int errnum); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { for (int i = 0; i &lt; 200; ++i) { printf(&quot;%d: %s\\n&quot;,i,strerror(i)); } return 0; } /* 0: Success 1: Operation not permitted 2: No such file or directory 3: No such process 4: Interrupted system call 5: Input/output error 6: No such device or address 7: Argument list too long 8: Exec format error 9: Bad file descriptor 10: No child processes 11: Resource temporarily unavailable 12: Cannot allocate memory 13: Permission denied 14: Bad address 15: Block device required 16: Device or resource busy 17: File exists 18: Invalid cross-device link 19: No such device 20: Not a directory 21: Is a directory 22: Invalid argument 23: Too many open files in system 24: Too many open files 25: Inappropriate ioctl for device 26: Text file busy 27: File too large 28: No space left on device 29: Illegal seek 30: Read-only file system 31: Too many links 32: Broken pipe 33: Numerical argument out of domain 34: Numerical result out of range 35: Resource deadlock avoided 36: File name too long 37: No locks available 38: Function not implemented 39: Directory not empty 40: Too many levels of symbolic links 41: Unknown error 41 42: No message of desired type 43: Identifier removed 44: Channel number out of range 45: Level 2 not synchronized 46: Level 3 halted 47: Level 3 reset 48: Link number out of range 49: Protocol driver not attached 50: No CSI structure available 51: Level 2 halted 52: Invalid exchange 53: Invalid request descriptor 54: Exchange full 55: No anode 56: Invalid request code 57: Invalid slot 58: Unknown error 58 59: Bad font file format 60: Device not a stream 61: No data available 62: Timer expired 63: Out of streams resources 64: Machine is not on the network 65: Package not installed 66: Object is remote 67: Link has been severed 68: Advertise error 69: Srmount error 70: Communication error on send 71: Protocol error 72: Multihop attempted 73: RFS specific error 74: Bad message 75: Value too large for defined data type 76: Name not unique on network 77: File descriptor in bad state 78: Remote address changed 79: Can not access a needed shared library 80: Accessing a corrupted shared library 81: .lib section in a.out corrupted 82: Attempting to link in too many shared libraries 83: Cannot exec a shared library directly 84: Invalid or incomplete multibyte or wide character 85: Interrupted system call should be restarted 86: Streams pipe error 87: Too many users 88: Socket operation on non-socket 89: Destination address required 90: Message too long 91: Protocol wrong type for socket 92: Protocol not available 93: Protocol not supported 94: Socket type not supported 95: Operation not supported 96: Protocol family not supported 97: Address family not supported by protocol 98: Address already in use 99: Cannot assign requested address 100: Network is down 101: Network is unreachable 102: Network dropped connection on reset 103: Software caused connection abort 104: Connection reset by peer 105: No buffer space available 106: Transport endpoint is already connected 107: Transport endpoint is not connected 108: Cannot send after transport endpoint shutdown 109: Too many references: cannot splice 110: Connection timed out 111: Connection refused 112: Host is down 113: No route to host 114: Operation already in progress 115: Operation now in progress 116: Stale file handle 117: Structure needs cleaning 118: Not a XENIX named type file 119: No XENIX semaphores available 120: Is a named type file 121: Remote I/O error 122: Disk quota exceeded 123: No medium found 124: Wrong medium type 125: Operation canceled 126: Required key not available 127: Key has expired 128: Key has been revoked 129: Key was rejected by service 130: Owner died 131: State not recoverable 132: Operation not possible due to RF-kill 133: Memory page has hardware error */ void *memcpy(void * dest, const void * src, size_t num); #include &lt;stdio.h&gt; #include &lt;string.h&gt; struct Person{ char name[40]; int age; } person,person_copy; int main() { char my_name[] = &quot;duwei19961021&quot;; memcpy(person.name,my_name,strlen(my_name)+1); person.age = 24; memcpy(&amp;person_copy, &amp;person, sizeof(person)); printf(&quot;person_copy:%s,%d\\n&quot;,person_copy.name,person_copy.age); return 0; } void *memmove(void * dest, const void * src, size_t num); #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main() { char str[] = &quot;memmove can be very useful......&quot;; memmove(str+20,str+15,11); printf(&quot;str:\\&quot;%s\\&quot;&quot;,str); return 0; } int memcmp(const void *ptr1, const void *ptr2, size_t num); printf #include &lt;stdio.h&gt; int main(){ int a = 1234,b = -5678; printf(&quot;%+-6d%+-6d%\\n&quot;,a,b); return 0; } /* * %和d之间的 * + 表示输出数字的正负号 * - 号表示s输出数据向左对齐 * 6表示输出宽度 * 如果数据宽度不够则左对齐，右边补空格 * */ ||、&amp;&amp;优先级 #include &lt;stdio.h&gt; int main(){ int a=1,b=1,c=1; if (a-- || b-- &amp;&amp; --c){ printf(&quot;%d,%d,%d\\n&quot;,a,b,c); } else{ printf(&quot;%d,%d,%d\\n&quot;,a,c,b); } } /* * 逻辑与(&amp;&amp;)的优先级比逻辑或(||)的优先级高 * 先进行 b-- &amp;&amp; --c * 再将其结果和a--进行逻辑或 * */ switch中使用continue #include &lt;stdio.h&gt; int main() { int a = 123456,b; while (a){ b=a%10; a/=10; switch (b) { default:printf(&quot;%d&quot;,b++); case 1:continue; case 2:printf(&quot;%d&quot;,b++);continue; case 3:printf(&quot;%d&quot;,b++); case 4:printf(&quot;%d&quot;,b++);continue; } } return 0; } /* * 这里使用continue会导致switch所有分支在执行完成之后返回到外层的while循环， * 因此default不会被执行 * */ 局部变量覆盖全局变量 #include &lt;stdio.h&gt; int a=1; int func(int d) { int b=1; static int c =1; a++;b++;++c;++d; return a+b+c+d; } int main() { int k,a=4; for (k = 0; k &lt; 3; ++k) { printf(&quot;%d,&quot;,func(a)); } return 0; } /* * 在main()函数作用域中，局部变量a屏蔽全局变量a。 * func()函数和main()函数作用域属于同级，func()中没有a变量，所以去全局中找 * */ ddddd","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c","slug":"c","permalink":"http://blog.3amupupup.online/tags/c/"}]},{"title":"二级计算机","slug":"二级计算机","date":"2021-03-18T03:09:52.049Z","updated":"2021-03-18T03:09:52.049Z","comments":true,"path":"2021/03/18/二级计算机/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E4%BA%8C%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA/","excerpt":"","text":"二叉树 度：节点的孩子数量，二叉树只有三种：0，1，2。度为0的节点(叶子节点)总是比度为2的节点多一个 深度：深度为m的二叉树最多有2^m-1个节点 满二叉树是指除了最后一层之外，每一层上的所有结点都有两个子结点。 完全二叉树是指除了最后一层之外，每一层上的结点树均达到最大值；在最后一层上只缺少右边的若干节点。 后序遍历与中序遍历相同，说明该二叉树除了叶子结点外，所有结点都只有左子结点。 前序遍历和中序遍历相同，说明该二叉树除了叶子结点外，所有结点都只有右子节点。","categories":[],"tags":[]},{"title":"C专家编程","slug":"C专家编程","date":"2021-03-18T03:09:52.047Z","updated":"2021-03-18T03:09:52.047Z","comments":true,"path":"2021/03/18/C专家编程/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/C%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B/","excerpt":"","text":"1.9 传参时的数据类型 void foo(const char **p){ } int main(int argc, char **argv){ foo(argv); } output: warning: passing &#39;char **&#39; to parameter of type &#39;const char **&#39; discards qualifiers in nested pointer types 每个实参都应该具有自己的类型，这样它的值就可以赋值给与它所对应的形参类型的对象(该对象的类型不能含有限定符)。这就是说函数传参类似于赋值。 要使上述赋值合法，必须满足下列条件之一: 两个操作数都是指向有限定符或者无限定符的相同类型指针，左边指针所指向的类型必须具有右边指针所指向类型的全部限定符。 int main(){ char *cp; const char *ccp; ccp = cp; return 0; } /* * 左操作数是一个指向const限定符的char指针。 * 右操作数是一个指向没有限定符的char指针。 * char类型与char类型是相容的，左操作数所指向的类型具有右操作数所指向类型的限定符，加上自身的限定符const。 * 反之: cp = ccp 在编译时会产生警告。 * */ const float *p1; //指向一个具有const限定符的float类型的指针，意思是p所指向的指针能改变，但是*p所指向的值不能改变 3.2 声明 int main(){ const int * grape1; int num1 = 10; *grape1 = 100; // error: read-only variable is not assignable grape1 = &amp;num1; int const * grape2; int num2 = 10; *grape2 = 10; // error: read-only variable is not assignable grape2 = &amp;num2; int * const grape_jelly; int num3 = 10; grape_jelly = &amp;num3; // error: read-only variable is not assignable *grape_jelly = 10; const int * const grape_jim; int const * const grape_jim2; //两种写法都表示对象和指针都为只读 } 函数的返回值不能是一个函数，像foo()()是非法。 函数的返回值不能是一个数组，foo()[]是非法。 数组里面不能有函数，foo是非法。 函数的返回值允许是一个函数指针，如：int(* func())()。func() 返回 int (*)()函数 函数的返回值允许是一个指向数组的指针，如：int(* foo())[]。foo()返回 int (*)[]数组指针。 数组里面允许有函数指针，如：int(* foo[])()。* foo[]指针数组，数组类型是一个参数为void、返回值为int的函数的指针 3.2.1 结构 struct Person { char* name; int age; } stu1,*stu2; struct s_tag { int a[100]; }; struct s_tag orange,lime,lemon; struct s_tag twofold(struct s_tag s){ for (int i = 0; i &lt; 100; ++i) { s.a[i] *= 2; } return s; } int main(){ for (int i = 0; i &lt; 100; ++i) { lime.a[i] = i; } printf(&quot;line%d, lime[10] = %d\\n&quot;, __LINE__,lime.a[10]); lemon = twofold(lime); printf(&quot;line%d, lime[10] = %d\\n&quot;, __LINE__,lime.a[10]); // 结构体是值传递 printf(&quot;line%d, lemon[10] = %d\\n&quot;, __LINE__,lemon.a[10]); orange = lemon; printf(&quot;line%d, orange[10] = %d\\n&quot;, __LINE__,orange.a[10]); return 0; } 4.3.1 数组和指针是如何访问的x = y; 符号x的含义是x所代表的地址，被称为左值，左值在编译时可知，左值表示存储结果的地方。 符号y的含义是y所代表的地址的内容，被称为右值，右值知道运行时才知。 c语言术语–可修改的左值，表示允许左值出现在赋值语句的左边。数组名用于确定对象在内存中的位置，也是左值，但它不能作为赋值对象。因此，数组名是个左值但是不可修改的左值。 4.3.2 定义为指针，以数组方式引用。 char *p = &quot;abcdefgh&quot;; // 初始化指针时所创建的字符串常量通常被定义为只读 char a[] = &quot;abcdefgh&quot;; char b = &#39;d&#39;; ps: 每个符号的地址在编译时可知。 通过p取得字符 ‘d’: 通过编译器符号表找到p的地址，解引用得到一个地址，这个地址再加上偏移量得到字符 ‘d’。 通过数组名a取得字符 ‘d’: 数组名用于确定对象在内存中的位置。通过编译器符号表找到a的地址，取地址(a+3)得到字符 ‘d’。 通过b取得字符’d’: #include &lt;stdio.h&gt; char p[] = &quot;duwei1996&quot;; void test(){ extern char *p; printf(&quot;%c\\n&quot;,p[1]); } int main(){ test(); return 0; } // 一段错误代码，这段代码用我现在的编译器都编译不过去，书上用的编译器可能比较老能编译过去。 4.5 数组和指针的其它区别 指针 数组 保存数据的地址 保存数据的值 间接访问数据，先取得指针的内容，把它作为地址，然后提取这个地址的数据。如果指针有个下标[ i ]，就把指针的内容加上i作为地址，从中提取数据。 直接访问数据，a[i]只是意见单的a+i为地址取得数据 通常用于动态数据结构 通常用于存储固定数目且数据类型相同的元素 相关的函数为malloc()和free() 隐式分配和删除 通常指向匿名数据 自身即为数据名 6.2 段 编译”hello world”程序，指向ls -l得到可执行文件总体大小，运行size得到文件里各段的大小。 增加一个全局的int[1000]的数组声明。 在数组声明中增加初始值。 在函数内部声明一个巨大的数组。 6.6 auto、staticchar * favorite_fruit(){ char deciduous[] = &quot;apple&quot;; retrun deciduous; } 进入该函数时，自动变量deciduous在堆栈中分配，函数执行结束后，变量不复存在，它所占用的堆栈空间被回收，可能再任何时候被覆盖，指针就失去了有效性(引用不存在的东西)，被称为悬垂指针。如果想返回一个指向在函数内部定义的变量的指针，要把那个变量声明为static，这样就能保证该变量被保存在数据段中而不是堆栈中。 9.1 什么时候指针与数组相同 声明 extern，如extern char a[]; 不能改写成指针的形式(extern char *a)。 定义，如char a[10]; 不能改写成指针的形式。 函数的参数，如 func(char a[]);既可以写数组形式也可以写指针形式。 在表达式中使用 如 a = c[i]; 既可以写数组形式也可以写指针形式。 对于编译器而言，一个数组就是一个地址，一个指针是一个地址的地址。 数组和指针是相同的三条规则 表达式中的数组名(与声明不同)被编译器当做一个指向该数组第一个元素的指针。 int [10], *p, i = 2; // 可以通过下面任何一种方法访问a[i] p = a; p[i]; p = a; *(p+i); p = a + i; *p; c语言把数组下标作为指针的偏移量。 作为函数参数的数组名等同于指针。 9.3 为什么c语言把数组形参当做指针所有非数组形式的数据均以传值形式(对实参作一份拷贝并传递给调用的函数，函数不能修改作为实参的的实际变量的值，而只能修改传递给它的那份拷贝。)调用，然而，如果要拷贝整个数组，无论在时间上还是在内存空间上的开销都可能是非常大的。而且在大部分情况下并不需要整个数组的拷贝。所有数组在传递时都转换为指向数组起始地址的指针，而其它参数均采用传值。函数的返回值决不能是一个函数数组，而只能是指向数组或者函数的指针。","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"book","slug":"book","permalink":"http://blog.3amupupup.online/tags/book/"}]},{"title":"Dockerfile","slug":"Dockerfile","date":"2021-03-18T03:09:52.045Z","updated":"2021-03-18T03:09:52.046Z","comments":true,"path":"2021/03/18/Dockerfile/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/Dockerfile/","excerpt":"","text":"NGINXFROM centos:centos7 RUN /usr/bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ &amp;&amp; mkdir /data/logs -p \\ &amp;&amp; mkdir /data/www -p \\ &amp;&amp; rm -rf /etc/yum.repos.d/* \\ &amp;&amp; curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo\\ &amp;&amp; yum -y install wget \\ &amp;&amp; curl -o /etc/yum.repos.d/nginx.repo http://172.16.72.173/nginx_config/nginx.repo \\ &amp;&amp; yum clean all \\ &amp;&amp; yum repolist \\ &amp;&amp; yum -y install nginx RUN rm -rf /etc/nginx/conf.d/default.conf \\ &amp;&amp; curl -o /etc/nginx/nginx.conf http://172.16.72.173/v2/nginx_config/nginx.conf \\ &amp;&amp; sed -i &#39;s/user nginx;/user www;/&#39; /etc/nginx/nginx.conf \\ &amp;&amp; useradd www -s /sbin/nologin CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;] PHPFROM centos:centos7 RUN /usr/bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ &amp;&amp; mkdir /data/www -p \\ &amp;&amp; mkdir /data/logs/ -p \\ &amp;&amp; rm -rf /etc/yum.repos.d/* \\ &amp;&amp; curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo \\ &amp;&amp; curl -o /etc/yum.repos.d/Centos-7-epel.repo https://mirrors.aliyun.com/repo/epel.repo \\ &amp;&amp; yum clean all \\ &amp;&amp; yum repolist \\ &amp;&amp; curl -o /usr/local/src/php-7.1.3.tar.gz http://172.16.72.173/packages/php-7.1.3.tar.gz \\ &amp;&amp; cd /usr/local/src &amp;&amp; tar xf php-7.1.3.tar.gz \\ &amp;&amp; yum clean all \\ &amp;&amp; yum repolist \\ &amp;&amp; yum -y install cmake doxygen php-mysqlnd autoconf make freetype-devel openssl-devel gcc gcc-c++ bison libxml2-devel curl-devel libjpeg-devel libpng-devel libc-client-devel libmcrypt-devel librabbitmq-devel \\ &amp;&amp; cd /usr/local/src/php-7.1.3 \\ &amp;&amp; groupadd -g 1001 www \\ &amp;&amp; useradd -g 1001 -M -s /sbin/nologin www \\ &amp;&amp; ./configure --prefix=/usr/local/php \\ --exec-prefix=/usr/local/php \\ --bindir=/usr/local/php/bin \\ --sbindir=/usr/local/php/sbin \\ --includedir=/usr/local/php/include \\ --libdir=/usr/local/php/lib/php \\ --mandir=/usr/local/php/php/man \\ --with-config-file-path=/usr/local/php/etc \\ --with-mcrypt=/usr/include \\ --without-pear \\ --disable-phar \\ --with-mhash \\ --with-openssl \\ --with-pdo-mysql=shared,mysqlnd \\ --with-gd \\ --with-iconv \\ --with-zlib \\ --enable-zip \\ --enable-inline-optimization \\ --disable-debug \\ --disable-rpath \\ --enable-shared \\ --enable-xml \\ --enable-bcmath \\ --enable-shmop \\ --enable-sysvsem \\ --enable-mbregex \\ --enable-mbstring \\ --enable-ftp \\ --enable-gd-native-ttf \\ --enable-pcntl \\ --enable-sockets \\ --with-xmlrpc \\ --enable-soap \\ --without-pear \\ --with-gettext \\ --enable-session \\ --with-curl=/usr/include/x86_64-linux-gnu/curl \\ --with-jpeg-dir \\ --with-freetype-dir \\ --enable-opcache \\ --enable-fpm \\ --with-fpm-user=www \\ --with-fpm-group=www \\ --without-gdbm \\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; curl http://172.16.72.173/packages/redis-5.0.2.tgz -o /usr/local/src/php-7.1.3/ext/redis-5.0.2.tgz \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext/ \\ &amp;&amp; tar xf redis-5.0.2.tgz \\ &amp;&amp; cd redis-5.0.2 \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config \\ &amp;&amp; make &amp;&amp; make install \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext/fileinfo \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config --enable-fileinfo\\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; curl http://172.16.72.173/packages/amqp-1.9.3.tgz -o /usr/local/src/php-7.1.3/ext/amqp-1.9.3.tgz \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext \\ &amp;&amp; tar xf amqp-1.9.3.tgz \\ &amp;&amp; cd amqp-1.9.3 \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config \\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; curl http://172.16.72.173/packages/mongodb-1.5.3.tgz -o /usr/local/src/php-7.1.3/ext/mongodb-1.5.3.tgz \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext \\ &amp;&amp; tar xf mongodb-1.5.3.tgz \\ &amp;&amp; cd mongodb-1.5.3 \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config \\ &amp;&amp; make &amp;&amp; make install \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext/mysqli \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config \\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; rm -rf /usr/local/src/* \\ &amp;&amp; yum -y autoremove gcc gcc-c++ make autoconf cmake\\ &amp;&amp; yum clean all \\ &amp;&amp; curl http://172.16.72.173/v2/php_config/php-fpm.conf -o /usr/local/php/etc/php-fpm.conf \\ &amp;&amp; curl http://172.16.72.173/v2/php_config/php.ini -o /usr/local/php/etc/php.ini \\ &amp;&amp; curl http://172.16.72.173/v2/php_config/www.conf -o /usr/local/php/etc/php-fpm.d/www.conf SUPERVISORFROM centos:centos7 RUN /usr/bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ &amp;&amp; mkdir /data/www -p \\ &amp;&amp; mkdir /data/logs/ -p \\ &amp;&amp; rm -rf /etc/yum.repos.d/* \\ &amp;&amp; curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo \\ &amp;&amp; curl -o /etc/yum.repos.d/Centos-7-epel.repo https://mirrors.aliyun.com/repo/epel.repo \\ &amp;&amp; yum clean all \\ &amp;&amp; yum repolist \\ &amp;&amp; curl -o /usr/local/src/php-7.1.3.tar.gz http://172.16.72.173/packages/php-7.1.3.tar.gz \\ &amp;&amp; cd /usr/local/src &amp;&amp; tar xf php-7.1.3.tar.gz \\ &amp;&amp; yum clean all \\ &amp;&amp; yum repolist \\ &amp;&amp; yum -y install cmake python-setuptools doxygen php-mysqlnd autoconf make freetype-devel openssl-devel gcc gcc-c++ bison libxml2-devel curl-devel libjpeg-devel libpng-devel libc-client-devel libmcrypt-devel librabbitmq-devel \\ &amp;&amp; cd /usr/local/src/php-7.1.3 \\ &amp;&amp; groupadd -g 1001 www \\ &amp;&amp; useradd -g 1001 -M -s /sbin/nologin www \\ &amp;&amp; ./configure --prefix=/usr/local/php \\ --exec-prefix=/usr/local/php \\ --bindir=/usr/local/php/bin \\ --sbindir=/usr/local/php/sbin \\ --includedir=/usr/local/php/include \\ --libdir=/usr/local/php/lib/php \\ --mandir=/usr/local/php/php/man \\ --with-config-file-path=/usr/local/php/etc \\ --with-mcrypt=/usr/include \\ --without-pear \\ --disable-phar \\ --with-mhash \\ --with-openssl \\ --with-pdo-mysql=shared,mysqlnd \\ --with-gd \\ --with-iconv \\ --with-zlib \\ --enable-zip \\ --enable-inline-optimization \\ --disable-debug \\ --disable-rpath \\ --enable-shared \\ --enable-xml \\ --enable-bcmath \\ --enable-shmop \\ --enable-sysvsem \\ --enable-mbregex \\ --enable-mbstring \\ --enable-ftp \\ --enable-gd-native-ttf \\ --enable-pcntl \\ --enable-sockets \\ --with-xmlrpc \\ --enable-soap \\ --without-pear \\ --with-gettext \\ --enable-session \\ --with-curl=/usr/include/x86_64-linux-gnu/curl \\ --with-jpeg-dir \\ --with-freetype-dir \\ --enable-opcache \\ --enable-fpm \\ --with-fpm-user=www \\ --with-fpm-group=www \\ --without-gdbm \\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; curl http://172.16.72.173/packages/redis-5.0.2.tgz -o /usr/local/src/php-7.1.3/ext/redis-5.0.2.tgz \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext/ \\ &amp;&amp; tar xf redis-5.0.2.tgz \\ &amp;&amp; cd redis-5.0.2 \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config \\ &amp;&amp; make &amp;&amp; make install \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext/fileinfo \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config --enable-fileinfo\\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; curl http://172.16.72.173/packages/amqp-1.9.3.tgz -o /usr/local/src/php-7.1.3/ext/amqp-1.9.3.tgz \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext \\ &amp;&amp; tar xf amqp-1.9.3.tgz \\ &amp;&amp; cd amqp-1.9.3 \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config \\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; curl http://172.16.72.173/packages/mongodb-1.5.3.tgz -o /usr/local/src/php-7.1.3/ext/mongodb-1.5.3.tgz \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext \\ &amp;&amp; tar xf mongodb-1.5.3.tgz \\ &amp;&amp; cd mongodb-1.5.3 \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config \\ &amp;&amp; make &amp;&amp; make install \\ &amp;&amp; cd /usr/local/src/php-7.1.3/ext/mysqli \\ &amp;&amp; /usr/local/php/bin/phpize \\ &amp;&amp; ./configure \\ --with-php-config=/usr/local/php/bin/php-config \\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; curl -o /usr/local/src/supervisor-3.4.0-1.el7.noarch.rpm http://172.16.72.173/packages/supervisor-3.4.0-1.el7.noarch.rpm \\ &amp;&amp; curl -o /usr/local/src/python-meld3-0.6.10-1.el7.x86_64.rpm http://172.16.72.173/packages/python-meld3-0.6.10-1.el7.x86_64.rpm \\ &amp;&amp; rpm -ivh /usr/local/src/python-meld3-0.6.10-1.el7.x86_64.rpm \\ &amp;&amp; rpm -ivh /usr/local/src/supervisor-3.4.0-1.el7.noarch.rpm \\ &amp;&amp; rm -rf /usr/local/src/* \\ &amp;&amp; yum -y autoremove gcc gcc-c++ make autoconf cmake\\ &amp;&amp; yum clean all \\ &amp;&amp; curl http://172.16.72.173/v2/php_config/php-fpm.conf -o /usr/local/php/etc/php-fpm.conf \\ &amp;&amp; curl http://172.16.72.173/v2/php_config/php.ini -o /usr/local/php/etc/php.ini \\ &amp;&amp; curl http://172.16.72.173/v2/php_config/www.conf -o /usr/local/php/etc/php-fpm.d/www.conf REDISFROM centos:centos7 RUN yum -y install epel-release \\ &amp;&amp; yum -y install redis \\ &amp;&amp; sed -i &#39;s/^bind 127.0.0.1/bind 0.0.0.0/&#39; /etc/redis.conf \\ &amp;&amp; sed -i &#39;s/^# requirepass foobared/requirepass 3IPvlX81kaflqzB/&#39; /etc/redis.conf CMD [&quot;/usr/bin/redis-server&quot;,&quot;/etc/redis.conf&quot;] GOLANGFROM centos:centos7 ADD go1.13.5.linux-amd64.tar.gz /usr/local/ RUN mkdir -p /data/www ENV GOROOT /usr/local/go/ ENV PATH $PATH:$GOROOT/bin:$GOPATH/bin ENV GOPATH /data/www/ ENV PATH $PATH:$GOPATH/bin ENV GO111MODULE on ENV GOPROXY https://goproxy.cn,direct WORKDIR /data/www/src/yanxiangbook CMD [&quot;bee&quot;,&quot;run&quot;] CODEBOXFROM registry.cn-hangzhou.aliyuncs.com/ysg_baseimage/codebox:v1 RUN mkdir /data/wwwroot/ -p &amp;&amp; adduser www -s /sbin/nologin -D -H","categories":[{"name":"Docker","slug":"Docker","permalink":"http://blog.3amupupup.online/categories/Docker/"}],"tags":[{"name":"Dockerfile","slug":"Dockerfile","permalink":"http://blog.3amupupup.online/tags/Dockerfile/"}]},{"title":"make","slug":"make","date":"2021-03-18T03:09:52.044Z","updated":"2021-03-18T03:09:52.045Z","comments":true,"path":"2021/03/18/make/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/make/","excerpt":"","text":"make简介Linux自动化构建工具，方便工程的编译。 单文件Makefile#include &lt;stdio.h&gt; int main() { int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; int i; for(i = 0; i &lt; 10; i++) printf(&quot;%d &quot;,arr[i]); return 0; } for:for.c @gcc -o $@ for.c .PHONY:clean clean: @rm -rf for #加上@符号，在执行make时就不会将输出显示在终端上 多文件Makefileroot$ tree . ├── bar.c ├── bar.h ├── Makefile └── test.c bar.h #pragma onece #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;unistd.h&gt; #define N 101 bar.c #include &quot;bar.h&quot; void bar(void) { char bar[N]; memset(bar,&#39;\\0&#39;,sizeof(bar)); const char label[5]=&quot;|/-\\\\&quot;; int i = 0; while(i &lt; 100) { fflush(stdout); bar[i++] = &#39;#&#39;; printf(&quot;[%-100s][%3d%%][%c]\\r&quot;,bar,i,label[i%4]); usleep(10000); } printf(&quot;\\n&quot;); } test.c #include &quot;bar.h&quot; int main() { bar(); return 0; } Makefile cc = gcc #定义变量不需要带引号 targetFile = test.o bar.o bin=test $(bin):$(targetFile) # 表示一个依赖关系 $(bin) 的编译生成可执行文件依赖于 $(targetFile) $(cc) -o $@ $^ # $@ 代表依赖关系中的目标文件也就是$(bin)=test,$^ 代表依赖文件列表也就是$(targetFile)=test.o bar.o %.o:%.c $(cc) -c $&lt; # $&lt; 代表当前目录下所有 %.c文件的集合 .PHONY:clean clean: rm -rf $(targetFile) $(bin)","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c","slug":"c","permalink":"http://blog.3amupupup.online/tags/c/"}]},{"title":"zabbix_key","slug":"zabbix_key","date":"2021-03-18T03:09:52.043Z","updated":"2021-03-18T03:09:52.044Z","comments":true,"path":"2021/03/18/zabbix_key/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/zabbix_key/","excerpt":"","text":"proc.num[&lt;name&gt;,&lt;user&gt;,&lt;state&gt;,&lt;cmdline&gt;] （进程数量。） [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;proc.num[,www,,]&quot; 428 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;proc.num[nginx,www,,]&quot; 8 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;proc.num[php-fpm,www,,]&quot; 420 net.if.in[if,&lt;mode&gt;]（网卡流入量统计。） [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.if.in[eth0,]&quot; 7439402782114 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.if.in[eth0,errors]&quot; 0 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.if.in[eth0,packets]&quot; 19550922396 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.if.in[eth0,dropped]&quot; 0 net.if.out[if,&lt;mode&gt;] （网卡流出量统计。） net.if.total[if,&lt;mode&gt;] （网卡的进出流量统计信息的总和。） net.tcp.listen[port] （检查此TCP端口是否处于监听状态。） [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.listen[443]&quot; 0 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.listen[80]&quot; 1 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.listen[9000]&quot; 1 net.tcp.port[&lt;ip&gt;,port] (检查是否可以将TCP连接到指定的端口。) [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.port[,80]&quot; 1 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.port[,8080]&quot; 0 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.port[,9000]&quot; 1 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.port[47.98.232.213,9000]&quot; 0 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.port[47.98.232.213,80]&quot; 1 net.tcp.service[service,&lt;ip&gt;,&lt;port&gt;] (检查服务是否正在运行并接受TCP连接。) [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.service[http,47.98.232.109,80]&quot; 1 [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.service[https,47.98.232.109,443]&quot; 0 net.tcp.service.perf （检测TCP服务性能。） [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;net.tcp.service.perf[http,47.98.232.109,80]&quot; 0.001654 net.tcp.service.perf[service,&lt;ip&gt;,&lt;port&gt;] （进程CPU利用率百分比。） proc.mem[&lt;name&gt;,&lt;user&gt;,&lt;mode&gt;,&lt;cmdline&gt;,&lt;memtype&gt;] （用户进程使用的内存。） [operate@zabbix ~]$ zabbix_get -s 47.98.232.109 -p 10050 -k &quot;proc.mem[,root]&quot; 101788995584 system.cpu.load[&lt;cpu&gt;,&lt;mode&gt;] （CPU负载。） system.cpu.util[&lt;cpu&gt;,&lt;type&gt;,&lt;mode&gt;] （CPU利用率。） system.run[command,&lt;mode&gt;] （在主机上运行指定的命令,注意: 要启用此功能，Zabbix agent配置文件 必须包含EnableRemoteCommands=1 选项。） vfs.file.cksum[file] （文件checksum校验，由UNIX cksum算法计算实现。） zabbix_get -s 47.98.232.109 -p 10050 -k &quot;vfs.file.cksum[/usr/local/nginx/conf/vhost/novel.conf]&quot; vfs.file.exists[file] （检测文件是否存在。） vfs.file.size[file] （文件大小(按字节)。） vfs.fs.inode[fs,&lt;mode&gt;] （inode的数量或百分比。） [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;vfs.fs.inode[/,used]&quot; 228387 [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;vfs.fs.inode[/,pused]&quot; 8.712273 vfs.fs.size[fs,&lt;mode&gt;]（磁盘空间，以字节为单位，用百分比表示。） [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;vfs.fs.size[/,pused]&quot; 32.847219 vm.memory.size[&lt;mode&gt;] （内存大小，以字节为单位，以百分比表示。） [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;vm.memory.size[cached]&quot; 8009416704 [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;vm.memory.size[buffers]&quot; 329150464 [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;vm.memory.size[used]&quot; 12454846464 [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;vm.memory.size[pused]&quot; 74.776654 web.page.get[host,&lt;path&gt;,&lt;port&gt;] （获取网页内容） [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;web.page.get[www.baidu.com,/,80]&quot; web.page.perf[host,&lt;path&gt;,&lt;port&gt;] （加载完整网页的时间（以秒为单位）。） [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;web.page.perf[www.baidu.com,/,80]&quot; 0.023391 web.page.regexp[host,&lt;path&gt;,&lt;port&gt;,&lt;regexp&gt;,&lt;length&gt;,&lt;output&gt;] （在网页上查找字符串。） [root@zabbix ~]# zabbix_get -s 47.98.232.109 -p 10050 -k &quot;web.page.regexp[www.baidu.com,/,80,baidu,100,1]&quot; 1","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"zabbix","slug":"zabbix","permalink":"http://blog.3amupupup.online/tags/zabbix/"}]},{"title":"指针","slug":"指针","date":"2021-03-18T03:09:52.041Z","updated":"2021-03-18T03:09:52.042Z","comments":true,"path":"2021/03/18/指针/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E6%8C%87%E9%92%88/","excerpt":"","text":"1、函数指针void(* signal( int, void(*)(int)) )(int); // signal是一个函数声明 // signal函数的参数有2个，第一个是int，第二个是函数指针，改函数指针的参数是int，返回类型是void // signal函数的返回类型也是一个函数指针：该函数指针指向的函数的参数是int，返回类型是void //简化 typedef void(*pfun_t)(int); pfun_t signal(int, pfun_t); char* my_strcpy(char* dest, const char* src); char* (*pf)(char *, const char*)(); char* (*pfArr[4])(char *,const char *); 2、qsort demo#include &quot;stdlib.h&quot; #include &quot;string.h&quot; struct student{ char name[10]; int age; }; int CmpStudentAge(const void * e1, const void * e2){ return ((struct student*)e1)-&gt;age-((struct student*)e2)-&gt;age; } int CmpStudentName(const void * e1, const void * e2){ return strcmp(((struct student*)e1)-&gt;name, ((struct student*)e2)-&gt;name); } int main(){ struct student s[3] = {{\"zhangsan\",14}, {\"lisi\", 5}, {\"duwei\", 8}}; int len = sizeof(s) / sizeof(struct student); int sz = sizeof(struct student); qsort(s, len, sz, CmpStudentName); /* * 第一个参数：待排序数组的首元素地址 * 第二个参数：待排序数组的元素个数 * 第三个参数：待排序数组的每个元素的大小，单位是字节 * 第四个参数：是函数指针，比较两个元素的函数的地址，需要自己实现 * 函数指针的两个参数是：待比较的两个元素的地址 * */ for (int i = 0; i &lt; 3; ++i) { printf(&quot;%s &quot;,s[i].name); } return 0; } 3、简单实现qsort()，冒泡排序版。struct person{ char name[10]; int age; }; void Swap(char* buf1, char* buf2, int width){ for (int i = 0; i &lt; width; ++i) { char tmp = *buf1; *buf1 = *buf2; *buf2 = tmp; buf1++; buf2++; } } void bubble_sort(void*base, int sz, int width,int (*cmp)(const void * e1, const void * e2)){ for (int i = 0; i &lt; sz -1; ++i) { for (int j = 0; j &lt; sz - 1 - i; ++j) { if (cmp((char*)base+j*width, (char*)base+(j+1)*width) &gt; 0){ /* * 冒泡排序此处省略。 * void类型的指针无法进行指针加减操作，所以先将其转换成char*类型，然后通过函数传参传入待排序数组中元素的size(即width，单位字节)， * 然后通过 base + j*width 进行地址操作，保证每次操作都能够跳跃一个元素。 * */ Swap((char*)base+j*width, (char*)base+(j+1)*width, width); } } } } int CmpPersonAge(const void * e1, const void * e2){ return ((struct person*)e1)-&gt;age-((struct person*)e2)-&gt;age; } int CmpPersonName(const void * e1, const void * e2){ return strcmp(((struct person*)e1)-&gt;name, ((struct person*)e2)-&gt;name); } int cmp_int(const void * e1, const void * e2){ return *(int *)e1 - *(int *)e2; } int main(){ struct person p[3] = {{\"zhangsan\",14}, {\"lisi\", 5}, {\"duwei\", 8}}; int sz = sizeof(p) / sizeof(struct person); int width = sizeof(struct person); bubble_sort(p,sz,width,CmpPersonAge); for (int i = 0; i &lt; 3; ++i) { printf(&quot;%s &quot;,p[i].name); } printf(&quot;\\n&quot;); int num[10] = {1,5,2,6,3,9,0,8,7,4}; bubble_sort(num,10,sizeof(int), cmp_int); for (int i = 0; i &lt; 10; ++i) { printf(&quot;%d &quot;,num[i]); } printf(&quot;\\n&quot;); } 4、练习题int main(){ /* * 针对64位操作系统 * 1. sizeof(数组名) - 数组名表示整个数组 * 2. &amp;数组名 - 数组名表示整个数组 * */ int a[] = {1,2,3,4}; printf(&quot;%d\\n&quot;,sizeof(a)); // 16 表示计算数组的大小(特殊) printf(&quot;%d\\n&quot;,sizeof(a+0)); // 8 表示数组a中第一个元素的地址 printf(&quot;%d\\n&quot;,sizeof(*a)); // 4 表示数组中的第一个元素的值 printf(&quot;%d\\n&quot;,sizeof(a+1)); // 8 表示数组a中第二个元素的地址 printf(&quot;%d\\n&quot;,sizeof(a[1])); // 4 表示数组中第二个元素的值 printf(&quot;%d\\n&quot;,sizeof(&amp;a)); // 8 表示数组的地址 printf(&quot;%d\\n&quot;,sizeof(*&amp;a)); // 16 *和&amp;抵消，a表示数组，在此表示计算数组的大小 printf(&quot;%d\\n&quot;,sizeof(&amp;a+1)); // 8 &amp;a是地址，地址加一还是地址且步长为被加地址的长度 printf(&quot;%d\\n&quot;,sizeof(&amp;a[0])); // 8 []的优先级比&amp;高，因此表示数组a第一个元素的地址 printf(&quot;%d\\n&quot;,sizeof(&amp;a[0]+1)); // 8 地址加1还是地址 printf(&quot;-------\\n&quot;); char arr[] = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;}; //这种方式创建一个字符串，需要手动加上&#39;\\0&#39;作为字符串结束符 printf(&quot;%d\\n&quot;,sizeof(arr)); // 6 计算数组的大小，而非字符串的长度 printf(&quot;%d\\n&quot;,sizeof(arr+0)); // 1 第一个字符的地址 printf(&quot;%d\\n&quot;,sizeof(*arr)); // 1 第一个字符的长度 printf(&quot;%d\\n&quot;,sizeof(arr[1])); // 1 第二个字符的长度 printf(&quot;%d\\n&quot;,sizeof(&amp;arr)); // 8 表示数组的地址 printf(&quot;%d\\n&quot;,sizeof(&amp;arr+1)); // 8 跳过整个数组之后的地址 printf(&quot;%d\\n&quot;,sizeof(&amp;arr[0]+1)); // 8 跳过第一个元素之后的地址 printf(&quot;-------\\n&quot;); printf(&quot;strlen(arr)=%d\\n&quot;,strlen(arr)); // 随机值，因为没有&#39;\\0&#39;的位置不确定 printf(&quot;strlen(arr+0)=%d\\n&quot;,strlen(arr+0)); // 随机值 printf(&quot;strlen(&amp;arr)=%d\\n&quot;,strlen(&amp;arr)); // 随机值 printf(&quot;strlen(&amp;arr+1)=%d\\n&quot;,strlen(&amp;arr+1)); // 随机值 printf(&quot;strlen(&amp;arr[0]+1)=%d\\n&quot;,strlen(&amp;arr[0]+1)); // 随机值 // printf(&quot;strlen(*arr)=%d\\n&quot;,strlen(*arr)); // error // printf(&quot;strlen(arr[1])=%d\\n&quot;,strlen(arr[1])); // err printf(&quot;\\n&quot;); char arr2[] = &quot;abcdef&quot;; //这种方式会自动在字符串末尾加上&#39;\\0&#39; printf(&quot;%d\\n&quot;,sizeof(arr2)); // 7 还有个字符结束符 &#39;\\0&#39;，所以数组实际长度为7 printf(&quot;%d\\n&quot;,sizeof(arr2+0)); // 8 printf(&quot;%d\\n&quot;,sizeof(*arr2)); // 1 printf(&quot;%d\\n&quot;,sizeof(arr2[1])); // 1 printf(&quot;%d\\n&quot;,sizeof(&amp;arr2)); // 8 printf(&quot;%d\\n&quot;,sizeof(&amp;arr2+1)); // 8 printf(&quot;%d\\n&quot;,sizeof(&amp;arr2[0]+1)); // 8 printf(&quot;-------\\n&quot;); printf(&quot;%d\\n&quot;,strlen(arr2)); // 6 printf(&quot;%d\\n&quot;,strlen(arr2+0)); //6 printf(&quot;%d\\n&quot;,strlen(&amp;arr2)); //6 printf(&quot;%d\\n&quot;,strlen(&amp;arr2+1)); // 随机值 printf(&quot;%d\\n&quot;,strlen(&amp;arr2[0]+1)); // 5 // printf(&quot;%d\\n&quot;,strlen(*arr2)); // error,a[0]为a,a的阿斯卡码为97，strlen(97)报错 // printf(&quot;%d\\n&quot;,strlen(arr2[1])); // error,arr2[1]为b，b的阿斯卡码值为98，strlen(98)报错 printf(&quot;-------\\n&quot;); char *p = &quot;abcdef&quot;; // char p[] = &quot;abcdef&quot;; printf(&quot;%d\\n&quot;,sizeof(p)); // 8 p是指针 printf(&quot;%d\\n&quot;,sizeof(p+1)); // 8 printf(&quot;%d\\n&quot;,sizeof(*p)); // 1 字符串的第一个字符 printf(&quot;%d\\n&quot;,sizeof(p[0])); // 1 等价于 *(p+0) printf(&quot;%d\\n&quot;,sizeof(&amp;p)); // 8 printf(&quot;%d\\n&quot;,sizeof(&amp;p+1)); // 8 printf(&quot;%d\\n&quot;,sizeof(&amp;p[0]+1)); // 8 printf(&quot;-------\\n&quot;); printf(&quot;%d\\n&quot;,strlen(p)); // 6 printf(&quot;%d\\n&quot;,strlen(p+1)); // 5 printf(&quot;%d\\n&quot;,strlen(&amp;p)); // 随机值 printf(&quot;%d\\n&quot;,strlen(&amp;p+1)); // 随机值 printf(&quot;%d\\n&quot;,strlen(&amp;p[0]+1)); // 5 // printf(&quot;%d\\n&quot;,strlen(*p)); // error // printf(&quot;%d\\n&quot;,strlen(p[0])); // error printf(&quot;-------\\n&quot;); int a2[3][4] = {0}; printf(&quot;sizeof(a2)=%d\\n&quot;,sizeof(a2)); // 48 printf(&quot;sizeof(a2[0][0])=%d\\n&quot;,sizeof(a2[0][0])); // 4 printf(&quot;sizeof(a2[0]=%d\\n&quot;,sizeof(a2[0])); // *(a2+0) = 16 printf(&quot;sizeof(a2[0]+1)=%d\\n&quot;,sizeof(a2[0]+1)); // 8 printf(&quot;sizeof(*(a2[0]+1))=%d\\n&quot;,sizeof(*(a2[0]+1))); // a2[0]表示第一个数组(元素个数为3的)，地址+1表示跳跃到下一个元素，所以表示a[0][1]=4 printf(&quot;sizeof(a2+1)=%d\\n&quot;,sizeof(a2+1)); // 8 printf(&quot;sizeof(*(a2+1)=%d\\n&quot;,sizeof(*(a2+1))); // 表示第二个数组(元素个数为3的) 所以为16 printf(&quot;sizeof(&amp;a2[0]+1)=%d\\n&quot;,sizeof(&amp;a2[0]+1)); // 8 printf(&quot;sizeof(*(&amp;a2[0]+1))=%d\\n&quot;,sizeof(*(&amp;a2[0]+1))); // 16 printf(&quot;sizeof(*a2)=%d\\n&quot;,sizeof(*a2)); // 16 printf(&quot;sizeof(a2[3])=%d\\n&quot;,sizeof(a2[3])); // 16 return 0; } 5、易错题int main(){ int a[5] = {1,2,3,4,5}; int *ptr = (int *)(&amp;a+1); printf(&quot;%d,%d\\n&quot;,*(a+1),*(ptr-1)); return 0; /* (&amp;a+1)表示跳跃一个数组的长度，也就是元素5后的第一个内存地址，再将其转换成int*指针。 *(a+1)等价于a[1]，结果为2；*(ptr-1)，ptr是元素5后的地址，其类型为int*，在对其进行指针操作的时候其步长为4，所以在-1时会将其内存地址往前移四个字节也就是元素5的地址，所以结果为5. _______________________ | 1 | 2 | 3 | 4 | 5 |ptr| */ } struct Test{ int Num; char *pcName; short sDate; char cha[2]; short sBa[4]; }*p; /* * 假设p的值为0x100000 * 已知，结构体Test类型的变量大小是20字节 * */ int main(){ p = (struct Test*)0x100000; printf(&quot;%p\\n&quot;,p+0x1); // 0x100014 printf(&quot;%p\\n&quot;,(unsigned long)p + 0x1); // 0x100001, 0x100000转换成10进制为1048576，再+1位1048577，因为打印的是%p，所有会将其显示为16进制，结果为0x100001 printf(&quot;%p\\n&quot;,(unsigned int*)p + 0x1); // 0x100004 return 0; } int main(){ /* * 小端存储 * */ int a[4] = {1,2,3,4}; int *ptr1 = (int *)(&amp;a+1); int *ptr2 = (int *)((int)a +1); printf(&quot;%x\\n&quot;,ptr1[-1]); // 0x4 printf(&quot;%x\\n&quot;,*ptr2); // 2000000 return 0; /* * a数组的内存分部如下： * |01 00 00 00|02 00 00 00|03 00 00 00|04 00 00 00| * int(a)+1表示指向a地址的后一个字节(01后的那个位置也就是00)，然后再转换成int*类型，解引用ptr2时会往后读取四个字节即：00 00 00 02 * 因为是小端存储，所以结果为 02000000 * */ } int main(){ int a[5][5]; int(*p)[4]; p = a; printf(&quot;%p,%d\\n&quot;,&amp;p[4][2] - &amp;a[4][2],&amp;p[4][2] - &amp;a[4][2]); } int main(){ int aa[2][5] = {1,2,3,4,5,6,7,8,9,10}; int *ptr = (int *)(&amp;aa+1); int *ptr2 = (int *)(*(aa+1)); // *(aa+1) 等价于 aa[1]也就是第二个数组的数组名 printf(&quot;%d,%d\\n&quot;, *(ptr-1), *(ptr2-1)); // 10,5 return 0; } int main(){ char *a[] = {&quot;work&quot;,&quot;at&quot;,&quot;alibaba&quot;}; char**pa = a; pa++; printf(&quot;%s\\n&quot;,*pa); return 0; /* * a是一个指针数组，数组有三个char*类型的指针，将a赋值给char**pa，pa还是一个指针 * 指针+1会根据自己的类型来决定步长，而pa的类型就是一个指针，所以步长为8字节(64位操作系统)， * pa也就是a，再加上八个字节，指向了a数组中的第二个元素。所以打印结果为at * */ } int main(){ char *c[] = {&quot;ENTER&quot;, &quot;NEW&quot;, &quot;POINT&quot;, &quot;FIRST&quot;}; char**cp[] = {c+3,c+2,c+1,c}; char***cpp = cp; printf(&quot;%s\\n&quot;,**++cpp); // POINT printf(&quot;%s\\n&quot;,*--*++cpp + 3); // ER printf(&quot;%s\\n&quot;,*cpp[-2]+3); // cpp[-2] 等价于 *(cpp-2),所以得到 **(cpp-2) + 3 ,结果ST printf(&quot;%s\\n&quot;,cpp[-1][-1]+1); // *(*(cpp-1)-1) + 1 ,结果EW } #include &quot;stdio.h&quot; #define OFFSETOF(struct_name, member_name) (int)&amp;(((struct_name*)0)-&gt;member_name) struct S{ char c1; int a; char c2; }; int main(){ printf(&quot;%d\\n&quot;,sizeof(struct S)); printf(&quot;%d\\n&quot;,OFFSETOF(struct S,c1)); printf(&quot;%d\\n&quot;,OFFSETOF(struct S,a)); printf(&quot;%d\\n&quot;,OFFSETOF(struct S,c2)); return 0; } //预处理之后: /* struct S{ char c1; int a; char c2; }; int main(){ printf(&quot;%d\\n&quot;,sizeof(struct S)); printf(&quot;%d\\n&quot;,(int)&amp;(((struct S*)0)-&gt;c1)); printf(&quot;%d\\n&quot;,(int)&amp;(((struct S*)0)-&gt;a)); printf(&quot;%d\\n&quot;,(int)&amp;(((struct S*)0)-&gt;c2)); return 0; } */","categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c语言基础","slug":"c语言基础","permalink":"http://blog.3amupupup.online/tags/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"jenkins结合rsync同步代码","slug":"jenkins结合rsync同步代码","date":"2021-03-18T03:09:52.040Z","updated":"2021-03-18T03:09:52.041Z","comments":true,"path":"2021/03/18/jenkins结合rsync同步代码/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/jenkins%E7%BB%93%E5%90%88rsync%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81/","excerpt":"","text":"背景：之前发布代码一直使用的一个jenkins插件 Publish over SSH，如果是java语言不存在问题，每次只拷贝一个jar包，但是如果是前端或者php这种类型的代码会存在问题：假如在gitlab仓库删除一个文件，jenkins拉取更新再通过Publish over SSH推送到服务器。这个过程中在gitlab仓库被删除的文件在远端服务器上是不会被删除的，因为Publish over SSH只会做增量更新。如果代码经常添加删除文件，那么远程机器上的代码文件就会越堆越多。 web机器：安装rsync [root@yanxiang_test webapp]# cat /etc/rsyncd.conf # /etc/rsyncd: configuration file for rsync daemon mode #同步过来后文件的主组 uid = nginx gid = nginx use chroot = yes max connections = 200 timeout = 300 pid file = /var/run/rsyncd.pid lock file = /var/run/rsync.lock log file = /var/log/rsyncd.log ignore errors read only = false list = false hosts allow = * hosts deny =10.0.8.9 #要在本机创建的用户 auth users = ysg #内容格式为 user:passwd #文件权限600 secrets file = /etc/rsync.password #同步到本机的目录 [webapp] path = /var/webapp/ [root@yanxiang_test webapp]# cat /etc/rsync.password ysg:123456xxx [root@yanxiang_test webapp]# jenkins机器：安装rsync [root@izbp1gldj1nzq5934tk5czz ~]# cat /etc/rsync.password #文件权限600 #只需要存储密码就行了，和web机器的密码一样 123456xxx [root@izbp1gldj1nzq5934tk5czz ~]# rsync -rltDqzp --no-o --no-g --delete /root/.jenkins/workspace/go_script ysg@172.16.72.173::webapp --exclude &quot;.git&quot; --password-file=/etc/rsync.password #参数解释 # -r 递归 # -l 复制符号链接为符号链接 # -t 保留修改时间 # --no-o --no-g 不改变主组 # --delete 删除差异文件 # /root/.jenkins/workspace/go_script 同步目录 # --exclude &quot;.git&quot; 需要排除的目录或者文件，多个--exclude指定多个目录或文件 # --password-file ysg用户和远程机器认证的密码 jenkins上的配置：","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"http://blog.3amupupup.online/tags/jenkins/"}]},{"title":"第九章 虚拟内存","slug":"第九章 虚拟内存","date":"2021-03-18T03:09:52.039Z","updated":"2021-03-18T03:09:52.040Z","comments":true,"path":"2021/03/18/第九章 虚拟内存/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/","excerpt":"","text":"第九章：虚拟内存9.1 物理和虚拟寻址物理寻址： 该示例的上下文是一条加载指令。当cpu加载这条指令时，会生成一个有效物理地址，通过内存总线，把它传递给主存。主存取出从物理地址4开始的四个字节，并将它返回给cpu，cpu会将它存放在一个寄存器里。 虚拟寻址： 使用虚拟地址，cpu通过生成一个虚拟地址(Virtual Address,VA)来访问主存，这个虚拟地址在被送到主存之前先转换成适当的虚拟地址(Memory Manager Unit简称MMU：内存管理单元，利用存放在主存中的查询表来动态翻译虚拟地址)，主存收到翻译过的地址(物理地址)之后从物理内存上取出数据并返回给cpu。 9.2 地址空间地址空间：一个非负整数地址的有序集合。为了简化讨论，总是假设使用的是线性地址空间。 在一个带虚拟内存的系统，CPU从一个有N=2^n个地址的空间中生成虚拟地址，称为虚拟地址空间。 {0, 1, 2, 3,…,N-1} 一个包含N=2^n个地址的虚拟地址空间叫做一个n位地址空间。例如32位操作系统(2^32)、64位操作系统(2^64)。 主存中的每个字节都有一个选自虚拟空间的地址和一个选自物理空间的地址。 虚拟地址位数(n) 虚拟地址数(N) 最大的可能虚拟地址 8 2^8=256 byte 2^8-1=255 16 2^16=64 K 2^16-1 32 2^32 = 4096M = 4G 2^32-1 48 2^48 = 256T 2^48-1 64 2^64 = 16E 2^64-1 9.3 虚拟内存作为缓存工具1、什么是虚拟内存？虚拟内存是磁盘上(较低层)连续N个字节组成的数组，每个字节都有唯一的虚拟地址作为数组的索引，磁盘上数组的内容(指的是数据)被缓存在主存中。(虚拟页存在于磁盘上) 物理内存被分隔成物理页(Physical Page,PP)。 VM系统将虚拟内存分隔成虚拟页(Virtual Page,VP)。 虚拟页面的集合分为三个不相交的子集： 未分配的(VM系统还未分配或者未创建的页，未分配的块没有任何数据和他们相关联，所以不占用任何磁盘空间，linux命令free在计算内存使用量时，未分配的 不会被记入)。 缓存的(已缓存在物理内存中的已分配页)。 未缓存的(未缓存在物理内存中的已分配页)。 2、DRAM缓存组织结构 SRAM：表示位于cpu和主存之间的L1、L2、L3高速缓存。 DRAM：表示虚拟内存系统的缓存，它在主存中缓存虚拟页。 直 写：当 CPU 要将数据写入内存时 除了更新缓冲内存(高速缓存L1、L2、L3)上的数据外也将数据写在 DRAM 中 以维持主存与缓冲内存的一致性 当要写入内存的数据一多 速度自然就慢了下来 回 写：每当 CPU 要将数据写入内存时 只会先更新缓冲内存(高速缓存L1、L2、L3)上的数据 随后再让缓冲内存在总线不塞车的时候 才把数据写回 DRAM 所以速度自然快得多 3、页表(将虚拟页映射到物理页)虚拟内存必须有某种方法来判定一个虚拟页是否缓存在DRAM中的某个地方。如果是，系统还必须确定这个虚拟页存放在哪个物理页(主存)。如果不命中还必须判断这个虚拟页存放在磁盘的哪个位置上，在物理页中选择一个牺牲页，并将虚拟页从磁盘复制到DRAM中，替换这个牺牲页。(操作系统为每个进程都维护一个独立的页表) 页表：将虚拟页映射到物理页。每次地址翻译硬件将一个虚拟地址转换为物理地址时，都会读取页表，操作系统负责维护页表的内容，以及在磁盘与DRAM之间来回传送页。 我们将假设每个PTE是由一个有效位(valid bit)和一个n位地址字段组成，有效位表明了该虚拟页当前是否被缓存在DRAM中。如果设置了有效位，那么地址字段就表示DRAM中相应的物理页的起始位置，这个物理页中缓存了该虚拟页。 如果没有设置有效位，那么一个空地址表示这个虚拟页还未被分配。否则，这个地址就指向该虚拟页在磁盘上的起始位置。 确定虚拟地址大小(n)和页大小(P)的组合需要的PTE数量。 n(位) P=2^p PTE数量 16 4K 2^16 / 2^12 = 16 16 8K 2^16 / 2^13 = 8 32 4K 2^32 / 2^12 = 2^20 32 8K 2^32 / 2^13 = 2^19 4、缺页DRAM缓存不命中称为缺页。 自己的理解：在cpu获取虚拟页中的数据时，地址翻译硬件去读页表的页表记录的有效位，如果有效位为0则推断出该虚拟页未被缓存，并且触发一个缺页异常。缺页异常调用内核中的缺页异常处理程序，该程序会在主存的PP(物理页)中选择一个被缓存的VP作为牺牲页(如果牺牲页中的数据被修改过那么就会将数据写会磁盘)，接下来将要被缓存的vp从磁盘中加载出来缓存到主存上去(替换牺牲页)。 CPU引用VP3中的一个字，地址翻译硬件将虚拟地址作为一个索引(虚拟地址分为两部分：虚拟页号[VPN:virtual page number]和虚拟页偏移量[VPO:virtual page offset]，使用虚拟页号作为索引)来定位PTE3，通过读取PTE3：有效为为0且地址不为null，所以得出VP3没有被缓存在物理内存中且得到了VP3的磁盘地址，此时触发缺页异常，缺页异常调用内核中的缺页异常处理程序，该程序会选择一个牺牲页(PP3中的VP4，如果VP4的内容被修改了，那么内核就会将VP4的数据复制回磁盘)，无论哪种情况，内核都会修改VP4的页表条目，反映VP4不在缓存在主存中的事实。 随后，内核从磁盘复制VP3到内存PP3，并更新PTE3(将有效为设置为1，地址位设置为物理页号)，随后返回，当异常处理程序返回的时候，它会重启导致缺页的指令，该指令会把缺页的虚拟地址重新发送给地址翻译硬件，但是此时VP3已经缓存在物理内存中了，那么页命中就能由地址翻译硬件正常处理了。 5、分配页面 操作系统分配一个新的虚拟内存页时对页表的影响，例如：调用mallooc，在这个实例中，VP5的分配过程是在磁盘创建空间并更新PTE5，并使它指向磁盘上这个新创建的页面。此过程中并没有分配物理内存哦。 9.6 地址翻译 地址翻译符号 MMU利用虚拟地址包含的VPN寻找PTE，将页表条目中的PPN和VPO串联起来就得到响应的物理地址(因为vp和pp都是P字节，所以物理页和虚拟页的偏移量相同) 当页面命中时，CPU硬件执行的步骤： 处理器生成一个虚拟地址，并把它传送给MMU。 MMU生成PTE地址，并从高速缓存/主存请求得到它。 高速缓存/主存向MMU返回PTE。 MMU构造物理地址，并把它传给告诉缓存/主存。 高速缓存/主存返回所请求的数据字给处理器。 缺页，CPU硬件执行步骤： 处理器生成一个虚拟地址，并把它传送给MMU。 MMU生成PTE地址，并从高速缓存/主存请求得到它。 高速缓存/主存向MMU返回PTE。 PTE中的有效为是0，所以MMU触发了一次异常，传递CPU中的控制到操作系统内核中的缺页异常处理程序。 缺页处理程序确定出物理内存中的牺牲页，如果这个页面修改了则把它换出到磁盘。 缺页处理程序页面调入新的页面，并更新内存中的PTE。 缺页处理程序返回到原来的进程，再次执行导致缺页的指令，CPU将引起缺页的虚拟地址重新发送给MMU。 给定一个32位的虚拟地址空间和一个24位的物理地址，对于下列页面大小P。 P VPN位数 VPO位数 PPN位数 PPO位数 1KB (2^p=1024,p=10) 22 10 14 10 2KB(2^p=2048,p=11) 21 11 13 11 4KB(2^p=4096,p=12) 20 12 12 12 8KB(2^p=8192,p=13) 19 13 11 13 (常说的32位和64位操作系统，指的就是页表条目PTE的长度。) 1、多级页表到目前为止，一直假设系统只用一个单独的页表进行地址翻译。但是如果我们有一个32位地址空间、4kb的页和一个4字节的PTE，那么即使应用所引用的只是虚拟空间中很小的一部分，也总是需要4MB的页表驻留内存。(32位地址空间，总共有2^32个内存地址，一个虚拟页的大小是4KB，那么总共有 2^32/2^12=2^20 个内存页，一个内存页需要一个PTE，一个PTE是4字节，那么页表总共大小是：2^20 * 2^12 = 2^32字节 = 2^32 / 2^10 KB = 2^12 / 2^10 MB = 4MB。在没有优化的情况下，一张独立页表在内存中要占用4M物理内存) 计算机中的字，双字以及存储 字节(byte)：一个字节由8位二进制数组成 字(word)：","categories":[{"name":"深入理解计算机系统","slug":"深入理解计算机系统","permalink":"http://blog.3amupupup.online/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://blog.3amupupup.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"Nginx日志获取header","slug":"Nginx日志获取header","date":"2021-03-18T03:09:52.038Z","updated":"2021-03-18T03:09:52.038Z","comments":true,"path":"2021/03/18/Nginx日志获取header/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/Nginx%E6%97%A5%E5%BF%97%E8%8E%B7%E5%8F%96header/","excerpt":"","text":"对于一个发送给nginx的请求，如果在想要在nginx日志中记录header信息，可以使用 将 $http_HeaderName 配置到日志格式即log_format中。 log_format headd escape=json &#39;[$time_local] $remote_addr $status $body_bytes_sent $request_time $host $request_method $server_protocol [$http_referer] [$request_body] [$http_user_agent] [$request_uri] &quot;content_type&quot;: &quot;$http_content_type&quot; &quot;androidid&quot;: &quot;$http_androidid&quot; &quot;appsystem&quot;: &quot;$http_appsystem&quot; &quot;brand&quot;: &quot;$http_brand&quot; &quot;brandname&quot;:&quot;http_brandname&quot; &quot;imei&quot;:&quot;$http_imei&quot; &quot;key&quot;: &quot;$http_key&quot; &quot;language&quot;: &quot;$http_language&quot; &quot;mac&quot;:&quot;$http_mac&quot; &quot;manufacturer&quot;: &quot;$http_manufacturer&quot; &quot;model&quot;: &quot;$http_model&quot; &quot;modelname&quot;: &quot;$http_modelname&quot; &quot;os&quot;: &quot;$http_os&quot; &quot;osType&quot;: &quot;$http_osType&quot; &quot;osVersionCode&quot;: &quot;$http_osVersionCode&quot; &quot;osVersionName&quot;: &quot;$http_osVersionName&quot; &quot;platformVersionCode&quot;: &quot;$http_platformVersionCode&quot; &quot;platformVersionName&quot;: &quot;$http_platformVersionName&quot; &quot;product&quot;: &quot;$http_product&quot;&#39;;","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://blog.3amupupup.online/tags/Nginx/"}]},{"title":"Jenkinsfile","slug":"Jenkinsfile","date":"2021-03-18T03:09:52.038Z","updated":"2021-03-18T03:09:52.039Z","comments":true,"path":"2021/03/18/Jenkinsfile/","link":"","permalink":"http://blog.3amupupup.online/2021/03/18/Jenkinsfile/","excerpt":"","text":"pipeline { agent any //agent指令是必须的，它为jenkins流水线分配一个执行器和工作区 stages { stage(&#39;Build&#39;) { steps { echo &#39;Building..&#39; } } stage(&#39;Test&#39;) { steps { echo &#39;Testing..&#39; } } stage(&#39;Deploy&#39;) { steps { echo &#39;Deploying....&#39; } } stage(&#39;Deploy&#39;) { when { expression { currentBuild.result == null || currentBuild.result == &#39;SUCCESS&#39; } } steps { sh &#39;make publish&#39; } } } } jenkinsfile支持使用单引号和双引号声明一个字符，但是只有双引号的字符串才支持$符的字符串插入值。 def singlyQuoted = &#39;Hello&#39; def doublyQuoted = &quot;World&quot; def username = &#39;Jenkins&#39; echo &#39;Hello Mr. ${username}&#39; echo &quot;I said, Hello Mr. ${username}&quot; 执行结果为： Hello Mr. ${username} I said, Hello Mr. Jenkins 使用环境变量 第一种是jenkins自带的全局变量：BUILD_ID、BUILD_URL、BUILD_TAG等 pipeline { agent any stages { stage(&#39;Example&#39;) { steps { echo &quot;Running ${env.BUILD_ID} on ${env.JENKINS_URL}&quot; } } } } 第二种是自定义的环境变量 pipeline { agent any environment { CC = &#39;clang&#39; } stages { stage(&#39;Example&#39;) { environment { DEBUG_FLAGS = &#39;-g&#39; } steps { sh &#39;printenv&#39; } } } } //用在最高层的 pipeline 块的 environment 指令适用于流水线的所有步骤。 //定义在 stage 中的 environment 指令只适用于 stage 中的步骤。","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Jenkinsfile","slug":"Jenkinsfile","permalink":"http://blog.3amupupup.online/tags/Jenkinsfile/"}]}],"categories":[{"name":"C语言","slug":"C语言","permalink":"http://blog.3amupupup.online/categories/C%E8%AF%AD%E8%A8%80/"},{"name":"运维","slug":"运维","permalink":"http://blog.3amupupup.online/categories/%E8%BF%90%E7%BB%B4/"},{"name":"k8s","slug":"k8s","permalink":"http://blog.3amupupup.online/categories/k8s/"},{"name":"深入理解计算机系统","slug":"深入理解计算机系统","permalink":"http://blog.3amupupup.online/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"},{"name":"mysql","slug":"mysql","permalink":"http://blog.3amupupup.online/categories/mysql/"},{"name":"Docker","slug":"Docker","permalink":"http://blog.3amupupup.online/categories/Docker/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.3amupupup.online/tags/nginx/"},{"name":"排序","slug":"排序","permalink":"http://blog.3amupupup.online/tags/%E6%8E%92%E5%BA%8F/"},{"name":"sonar","slug":"sonar","permalink":"http://blog.3amupupup.online/tags/sonar/"},{"name":"数据结构","slug":"数据结构","permalink":"http://blog.3amupupup.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"ecs","slug":"ecs","permalink":"http://blog.3amupupup.online/tags/ecs/"},{"name":"linux性能优化实战笔记","slug":"linux性能优化实战笔记","permalink":"http://blog.3amupupup.online/tags/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"},{"name":"cicd","slug":"cicd","permalink":"http://blog.3amupupup.online/tags/cicd/"},{"name":"虚拟内存","slug":"虚拟内存","permalink":"http://blog.3amupupup.online/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"},{"name":"进程","slug":"进程","permalink":"http://blog.3amupupup.online/tags/%E8%BF%9B%E7%A8%8B/"},{"name":"book","slug":"book","permalink":"http://blog.3amupupup.online/tags/book/"},{"name":"mongodb","slug":"mongodb","permalink":"http://blog.3amupupup.online/tags/mongodb/"},{"name":"c primer plus","slug":"c-primer-plus","permalink":"http://blog.3amupupup.online/tags/c-primer-plus/"},{"name":"c","slug":"c","permalink":"http://blog.3amupupup.online/tags/c/"},{"name":"sql_base","slug":"sql-base","permalink":"http://blog.3amupupup.online/tags/sql-base/"},{"name":"kubectl","slug":"kubectl","permalink":"http://blog.3amupupup.online/tags/kubectl/"},{"name":"Nginx","slug":"Nginx","permalink":"http://blog.3amupupup.online/tags/Nginx/"},{"name":"zabbix","slug":"zabbix","permalink":"http://blog.3amupupup.online/tags/zabbix/"},{"name":"c语言基础","slug":"c语言基础","permalink":"http://blog.3amupupup.online/tags/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"},{"name":"Dockerfile","slug":"Dockerfile","permalink":"http://blog.3amupupup.online/tags/Dockerfile/"},{"name":"jenkins","slug":"jenkins","permalink":"http://blog.3amupupup.online/tags/jenkins/"},{"name":"操作系统","slug":"操作系统","permalink":"http://blog.3amupupup.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Jenkinsfile","slug":"Jenkinsfile","permalink":"http://blog.3amupupup.online/tags/Jenkinsfile/"}]}