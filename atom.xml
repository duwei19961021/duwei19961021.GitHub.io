<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BLOG</title>
  
  
  <link href="https://duwei19961021.github.io/atom.xml" rel="self"/>
  
  <link href="https://duwei19961021.github.io/"/>
  <updated>2021-03-21T14:41:57.482Z</updated>
  <id>https://duwei19961021.github.io/</id>
  
  <author>
    <name>拦云</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx双向链表</title>
    <link href="https://duwei19961021.github.io/2021/03/21/ngx_queue/"/>
    <id>https://duwei19961021.github.io/2021/03/21/ngx_queue/</id>
    <published>2021-03-21T11:02:44.000Z</published>
    <updated>2021-03-21T14:41:57.482Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx数据类型：双向链表"><a href="#nginx数据类型：双向链表" class="headerlink" title="nginx数据类型：双向链表"></a>nginx数据类型：双向链表</h4><pre><code class="c">struct ngx_queue_s {      /*          链表这个结构本身不带有任何数据，而是把这个链表结构挂载到业务数据结构上，实现了业务数据结构与链表结构的解耦      */    ngx_queue_t  *prev;    // 前驱指针    ngx_queue_t  *next;    // 后驱指针};</code></pre><p><img src="https://img.3amupupup.online/ngx_queue_2.png" alt="链表示例"></p><h5 id="双向链表提供的接口"><a href="#双向链表提供的接口" class="headerlink" title="双向链表提供的接口"></a>双向链表提供的接口</h5><pre><code class="c">ngx_queue_init(q);                        // 初始化链表指向ngx_queue_empty(h);                        // 判断链表是否为空ngx_queue_insert_head(h, x);    // 链表头插ngx_queue_insert_tail(h, x);    // 链表尾插ngx_queue_head(h);                        // 获取链表第一个元素，h是哨兵位ngx_queue_last(h);                        // 获取链表最后一个元素ngx_queue_sentinel(h);                // 获取哨兵结点ngx_queue_next(q);                        // 获取结点q的下一个结qngx_queue_prev(q);                        // 获取结点q的前一个结点ngx_queue_remove(x);                    // 从链表中移除x结点ngx_queue_split(h, q, n);ngx_queue_add(h, n);ngx_queue_data(q, type, link);// 以上都是宏函数ngx_queue_t *ngx_queue_middle(ngx_queue_t *queue);</code></pre><h5 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h5><ol><li><p>ngx_queue_init(q): 初始化链表</p><pre><code class="c">#define ngx_queue_init(q)                                                     \    (q)-&gt;prev = q;                                                            \    (q)-&gt;next = q/*    前驱、后驱指针都指向自己，当前结点是哨兵位*/</code></pre></li><li><p>ngx_queue_empty(h): 判断链表是否为空</p><pre><code class="c">#define ngx_queue_empty(h)                                                    \    (h == (h)-&gt;prev)/*    双向链表的前驱或者后驱指向的是自己时则为空(仅存在哨兵结点)*/</code></pre></li><li><p>ngx_queue_insert_head(h, x): 在头结点之后插入x结点(头插)</p><pre><code class="c">#define ngx_queue_insert_head(h, x)                                           \    (x)-&gt;next = (h)-&gt;next;                                                    \    (x)-&gt;next-&gt;prev = x;                                                      \    (x)-&gt;prev = h;                                                            \    (h)-&gt;next = x</code></pre></li><li><p>ngx_queue_insert_tail(h, x): 在链表的末尾添加新结点x(尾插)</p><pre><code class="c">#define ngx_queue_insert_tail(h, x)                                           \    (x)-&gt;prev = (h)-&gt;prev;                                                    \    (x)-&gt;prev-&gt;next = x;                                                      \    (x)-&gt;next = h;                                                            \    (h)-&gt;prev = x</code></pre></li><li><p>ngx_queue_head(h): 获取链表的第一个有效结点(除去哨兵位)</p><pre><code class="c">#define ngx_queue_head(h)                                                     \    (h)-&gt;next</code></pre></li><li><p>ngx_queue_last(h): 获取链表最后一个结点</p><pre><code>#define ngx_queue_last(h)                                                     \    (h)-&gt;prev</code></pre></li><li><p>ngx_queue_sentinel(h): 获取哨兵位</p><pre><code>#define ngx_queue_sentinel(h)                                                 \    (h)</code></pre></li><li><p>ngx_queue_next(q): 获取q的下一个结点</p><pre><code class="c">#define ngx_queue_next(q)                                                     \    (q)-&gt;next</code></pre></li><li><p>ngx_queue_prev(q): 获取q的前一个结点</p><pre><code class="c">#define ngx_queue_prev(q)                                                     \    (q)-&gt;prev</code></pre></li><li><p>ngx_queue_remove(x): 从链表中移除结点x</p><pre><code class="c">#define ngx_queue_remove(x)                                                   \    (x)-&gt;next-&gt;prev = (x)-&gt;prev;                                              \    (x)-&gt;prev-&gt;next = (x)-&gt;next;                                              \    (x)-&gt;prev = NULL;                                                         \    (x)-&gt;next = NULL</code></pre></li><li><p>ngx_queue_add</p><pre><code>#define ngx_queue_add(h, n)                                                   \    (h)-&gt;prev-&gt;next = (n)-&gt;next;                                              \    (n)-&gt;next-&gt;prev = (h)-&gt;prev;                                              \    (h)-&gt;prev = (n)-&gt;prev;                                                    \    (h)-&gt;prev-&gt;next = h;</code></pre></li><li><p>ngx_queue_data(q, type, link)</p><pre><code class="c">#define ngx_queue_data(q, type, link)                                         \    (type *) ((u_char *) q - offsetof(type, link))/*    可以通过业务结构体中ngx_queue_t数据结构的偏移量来得到业务主体的数据结构的指针地址，    实现了业务数据结构和链表结构的解耦*/</code></pre><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;stddef.h&gt;struct data{    int _a[10];    long _b;    char* _c;    float _d;    data* _e;};int main(){    printf(&quot;data结构中_a 偏移量 = %ld字节\n&quot;,offsetof(struct data, _a));    printf(&quot;data结构中_d 偏移量 = %ld字节\n&quot;,offsetof(struct data, _d));    return 0;}</code></pre></li><li><p>ngx_queue_t *ngx_queue_middle(ngx_queue_t *queue): 获取链表的中间结点</p><pre><code class="c">/*    快慢指针获取中间结点*/ngx_queue_t *ngx_queue_middle(ngx_queue_t *queue){    ngx_queue_t  *middle, *next;    middle = ngx_queue_head(queue);             //头结点的下一个结点    if (middle == ngx_queue_last(queue)) {      // 如果middle等于头结点的上一个结点，则链表只有两个元素 head 和 mid        return middle;    }    next = ngx_queue_head(queue);               // next保存链表的头结点之后的结点    for ( ;; ) {        middle = ngx_queue_next(middle);        next = ngx_queue_next(next);                        // 走到这里 middle、next都指向第二个有效结点        if (next == ngx_queue_last(queue)) {    // 当next走到末尾元素时，mid才走一半，所以mid是中间元素            return middle;        }        next = ngx_queue_next(next);                    // next走的速度是middle的两倍        if (next == ngx_queue_last(queue)) {            return middle;        }    }}</code></pre></li><li><p>void ngx_queue_sort(ngx_queue_t <em>queue, ngx_int_t (</em>cmp)(const ngx_queue_t *, const ngx_queue_t *)): 链表排序</p><pre><code class="c">voidngx_queue_sort(ngx_queue_t *queue,    ngx_int_t (*cmp)(const ngx_queue_t *, const ngx_queue_t *)){    ngx_queue_t  *q, *prev, *next;    q = ngx_queue_head(queue);    if (q == ngx_queue_last(queue)) {        return;    }    for (q = ngx_queue_next(q); q != ngx_queue_sentinel(queue); q = next) {        prev = ngx_queue_prev(q);        next = ngx_queue_next(q);        ngx_queue_remove(q);        do {            if (cmp(prev, q) &lt;= 0) {                break;            }            prev = ngx_queue_prev(prev);        } while (prev != ngx_queue_sentinel(queue));        ngx_queue_insert_after(prev, q);    }}</code></pre></li><li><p>ngx_queue_split(h, q, n): </p><p><img src="https://img.3amupupup.online/ngx_queue_split_1.png" alt="image-20210321223136781"></p><pre><code class="c">#define ngx_queue_split(h, q, n)                                              \    (n)-&gt;prev = (h)-&gt;prev;                                                    \    (n)-&gt;prev-&gt;next = n;                                                      \    (n)-&gt;next = q;                                                            \    (h)-&gt;prev = (q)-&gt;prev;                                                    \    (h)-&gt;prev-&gt;next = h;                                                      \    (q)-&gt;prev = n;</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx数据类型：双向链表&quot;&gt;&lt;a href=&quot;#nginx数据类型：双向链表&quot; class=&quot;headerlink&quot; title=&quot;nginx数据类型：双向链表&quot;&gt;&lt;/a&gt;nginx数据类型：双向链表&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;stru</summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="queue" scheme="https://duwei19961021.github.io/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>信息的表示和处理</title>
    <link href="https://duwei19961021.github.io/2021/03/20/information_representation_and_processing/"/>
    <id>https://duwei19961021.github.io/2021/03/20/information_representation_and_processing/</id>
    <published>2021-03-20T03:55:12.704Z</published>
    <updated>2021-03-20T03:55:12.704Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2-1-信息存储"><a href="#2-1-信息存储" class="headerlink" title="2.1 信息存储"></a>2.1 信息存储</h4><ul><li>大多数计算机使用8位的块，或者字节(byte)，作为最小的可寻址的内存单位，而不是访问内存中单独的位。</li><li>C编译器把指针和类型联系起来，这样就可以根据指针值的类型，生成不同的机器级别代码来访问存储在指针所指向位置处的值。尽管C编译器维护着这个类型的信息，但是它生成的实际机器级程序不包含关于数据类型的信息。</li><li>机器级程序将内存视为一个非常大的字节数组，称为虚拟内存(virtual memory)。内存的每一个字节都是由唯一的数字标识的，称为地址(address)。所有地址的集合就称为虚拟地址空间(virtual address space)。</li></ul><h5 id="2-1-1-十六进制表示法"><a href="#2-1-1-十六进制表示法" class="headerlink" title="2.1.1 十六进制表示法"></a>2.1.1 十六进制表示法</h5><table><thead><tr><th align="center"></th><th align="left"></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td align="center">十六进制</td><td align="left">1</td><td>7</td><td>3</td><td>A</td><td>4</td></tr><tr><td align="center">二 进 制</td><td align="left">0001</td><td>0111</td><td>0011</td><td>1010</td><td>0100</td></tr></tbody></table><h5 id="2-1-2-字数据大小"><a href="#2-1-2-字数据大小" class="headerlink" title="2.1.2 字数据大小"></a>2.1.2 字数据大小</h5><ul><li><p>对于一个字长为w位的机器而言，虚拟地址的范围是0 ~ 2^w-1，程序最多访问2^w个字节。</p><p><img src="/image/image-20201023114928097.png" alt="image-20201023114928097"></p><p>举个例子：</p><p>32位操作系统，传输总线是32位，8bit为一个字节，那么在读或者写数据时一次就能传输32/8=4个字节。一个字长就是4字节。</p></li></ul><h5 id="2-1-3-寻址和字节顺序"><a href="#2-1-3-寻址和字节顺序" class="headerlink" title="2.1.3 寻址和字节顺序"></a>2.1.3 寻址和字节顺序</h5><ul><li>对于跨越多字节的程序对象，必须建立两个规则：① 这个对象的地址是什么，② 在内存上如何排列</li><li>多字节对象会被存储为连续的字节序列，对象的地址为所使用字节中最小的地址。 </li></ul><p>排列表示一个对象的字节有两个通用规则：小端法 &amp; 大端法</p><p>低有效字节存储在低地址上，称为小端存储，反之则为大端存储。</p><p><img src="/image/image-20201023131136500.png" alt="image-20201023131136500"></p><p>C语言中字符串被编码为一个以null(其值为0)字符结尾的字符数组。</p><h5 id="2-1-6-布尔"><a href="#2-1-6-布尔" class="headerlink" title="2.1.6  布尔"></a>2.1.6  布尔</h5><ul><li><p>NOT: ~</p><pre><code class="c">int main(){    int a = 10; // 0000 0000 0000 0000 0000 0000 0000 1010    printf(&quot;%d\n&quot;,~a);  // 1111 1111 1111 1111 1111 1111 1111 0101 补                        // 1111 1111 1111 1111 1111 1111 1111 0100 反                        // 1000 0000 0000 0000 0000 0000 0000 1011 原}</code></pre></li><li><p>AND: &amp;</p><pre><code class="c">int main(){    int a = 10;         // 0000 0000 0000 0000 0000 0000 0000 1010    int b = 15;         // 0000 0000 0000 0000 0000 0000 0000 1111    printf(&quot;%d\n&quot;,a&amp;b); // 0000 0000 0000 0000 0000 0000 0000 1010}</code></pre></li><li><p>OR: |</p><pre><code class="c">int main(){    int a = 2;          // 0000 0000 0000 0000 0000 0000 0000 0010    int b = 11;         // 0000 0000 0000 0000 0000 0000 0000 1011    printf(&quot;%d\n&quot;,a|b); // 0000 0000 0000 0000 0000 0000 0000 1011}</code></pre></li><li><p>EXCLUSIVE-OR: ^</p><pre><code class="c">int main(){    int a = 10;         // 0000 0000 0000 0000 0000 0000 0000 1010    int b = 2;          // 0000 0000 0000 0000 0000 0000 0000 0010    printf(&quot;%d\n&quot;,a^b); // 0000 0000 0000 0000 0000 0000 0000 1000}</code></pre></li></ul><h5 id="2-1-9-移位运算"><a href="#2-1-9-移位运算" class="headerlink" title="2.1.9 移位运算"></a>2.1.9 移位运算</h5><pre><code class="c">int main(){    unsigned int a = 10;    // 0000 0000 0000 0000 0000 0000 0000 1010    a =  a &gt;&gt; 3;            // 0000 0000 0000 0000 0000 0000 0000 0001    printf(&quot;a = %d\n&quot;,a);   // 1,无符号右移补0    int b = -5;    // 原码: 1000 0000 0000 0000 0000 0000 0000 0101    // 反码: 1111 1111 1111 1111 1111 1111 1111 1010    // 补码: 1111 1111 1111 1111 1111 1111 1111 1011    b = b &lt;&lt; 3;    // 补码: 1111 1111 1111 1111 1111 1111 1101 1000    // 反码: 1111 1111 1111 1111 1111 1111 1101 0111    // 原码: 1000 0000 0000 0000 0000 0000 0010 1000    printf(&quot;b = %d\n&quot;,b);   // -40    int c = -5;    // 原码: 1000 0000 0000 0000 0000 0000 0000 0101    // 反码: 1111 1111 1111 1111 1111 1111 1111 1010    // 补码: 1111 1111 1111 1111 1111 1111 1111 1011    c = c &gt;&gt; 3;    // 补码: 1111 1111 1111 1111 1111 1111 1111 1111    // 反码: 1111 1111 1111 1111 1111 1111 1111 1110    // 补码: 1000 0000 0000 0000 0000 0000 0000 0001    printf(&quot;c = %d\n&quot;,c);   // -1,有符号数右移时补符号位}</code></pre><h4 id="2-2-整数表示"><a href="#2-2-整数表示" class="headerlink" title="2.2 整数表示"></a>2.2 整数表示</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;2-1-信息存储&quot;&gt;&lt;a href=&quot;#2-1-信息存储&quot; class=&quot;headerlink&quot; title=&quot;2.1 信息存储&quot;&gt;&lt;/a&gt;2.1 信息存储&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;大多数计算机使用8位的块，或者字节(byte)，作为最小的可寻址的内存单位，而不</summary>
      
    
    
    
    <category term="操作系统" scheme="https://duwei19961021.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://duwei19961021.github.io/2021/03/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://duwei19961021.github.io/2021/03/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-03-20T03:54:29.615Z</published>
    <updated>2021-03-20T03:54:29.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第九章：虚拟内存"><a href="#第九章：虚拟内存" class="headerlink" title="第九章：虚拟内存"></a>第九章：虚拟内存</h3><h6 id="1、什么是虚拟内存？"><a href="#1、什么是虚拟内存？" class="headerlink" title="1、什么是虚拟内存？"></a>1、什么是虚拟内存？</h6><p>虚拟内存是磁盘上(较低层)连续N个字节组成的数组，每个字节都有唯一的虚拟地址作为数组的索引，磁盘上数组的内容被缓存在主存中。(虚拟页存在于磁盘上)</p><p>物理内存被分隔成物理页(Physical Page,PP)。</p><p>VM系统将虚拟内存分隔成虚拟页(Virtual Page,VP)，虚拟页面的集合分为三个不相交的子集：</p><ol><li>未分配的(VM系统还未分配或者未创建的页，未分配的块没有任何数据和他们相关联，因为不占用任何磁盘空间)。</li><li>缓存的(已缓存在物理内存中的已分配页)。</li><li>未缓存的(未缓存在物理内存中的已分配页)。</li></ol><h6 id="2、DRAM缓存组织结构"><a href="#2、DRAM缓存组织结构" class="headerlink" title="2、DRAM缓存组织结构"></a>2、DRAM缓存组织结构</h6><ul><li>SRAM：表示位于cpu和主存之间的L1、L2、L3高速缓存。</li><li>DRAM：表示虚拟内存系统的缓存，它在主存中缓存虚拟页。</li><li>直   写：当 CPU 要将数据写入内存时 除了更新缓冲内存(高速缓存L1、L2、L3)上的数据外也将数据写在 DRAM 中 以维持主存与缓冲内存的一致性 当要写入内存的数据一多 速度自然就慢了下来 </li><li>回   写：每当 CPU 要将数据写入内存时 只会先更新缓冲内存(高速缓存L1、L2、L3)上的数据 随后再让缓冲内存在总线不塞车的时候 才把数据写回 DRAM 所以速度自然快得多</li></ul><h6 id="3、页表"><a href="#3、页表" class="headerlink" title="3、页表"></a>3、页表</h6><p>虚拟内存必须有某种方法来判定一个虚拟页是否缓存在DRAM中的某个地方。如果是，系统还必须确定这个虚拟页存放在哪个物理页(主存)。如果不命中还必须判断这个虚拟页存放在磁盘的哪个位置上，在物理页中选择一个牺牲页，并将虚拟页从磁盘复制到DRAM中，替换这个牺牲页。(操作系统为每个进程都维护一个独立的页表)</p><p>页表：将虚拟页映射到物理页。每次地址翻译硬件将一个虚拟地址转换为物理地址时，都会读取页表，操作系统负责维护页表的内容，以及在磁盘与DRAM之间来回传送页。</p><p><img src="/image/image-20201020134441586.png" alt="image-20201020134441586"></p><p>我们将假设每个PTE是由一个有效位(valid bit)和一个n位地址字段组成，有效位表明了该虚拟页当前是否被缓存在DRAM中。如果设置了有效位，那么地址字段就表示DRAM中相应的物理页的起始位置，这个物理页中缓存了该虚拟页。 如果没有设置有效位，那么一个空地址表示这个虚拟页还未被分配。否则，这个地址就指向该虚拟页在磁盘上的起始位置。</p><h6 id="4、缺页"><a href="#4、缺页" class="headerlink" title="4、缺页"></a>4、缺页</h6><p>DRAM缓存不命中称为缺页。</p><p>自己的理解：在cpu获取虚拟页中的数据时，地址翻译硬件去读页表的页表记录的有效位，如果有效位为0则推断出该虚拟页未被缓存，并且触发一个缺页异常。缺页异常调用内核中的缺页异常处理程序，该程序会在主存的PP(物理页)中选择一个被缓存的VP作为牺牲页，接下来将要缓存的vp从磁盘中加载出来缓存到主存上去(替换牺牲页)。</p><p><img src="/image/image-20201020140133328.png" alt="image-20201020140133328"></p><h6 id="5、地址翻译"><a href="#5、地址翻译" class="headerlink" title="5、地址翻译"></a>5、地址翻译</h6><p>当页面命中时，CPU硬件执行的步骤：</p><ol><li>处理器生成一个虚拟地址，并把它传送给MMU。</li><li>MMU生成PTE地址，并从高速缓存/主存请求得到它。</li><li>高速缓存/主存向MMU返回PTE。</li><li>MMU构造物理地址，并把它传给告诉缓存/主存。</li><li>高速缓存/主存返回所请求的数据字给处理器。</li></ol><p><img src="/image/image-20201020145055727.png" alt="image-20201020145055727"></p><p>缺页，CPU硬件执行步骤：</p><ol><li>处理器生成一个虚拟地址，并把它传送给MMU。</li><li>MMU生成PTE地址，并从高速缓存/主存请求得到它。</li><li>高速缓存/主存向MMU返回PTE。</li><li>PTE中的有效为是0，所以MMU触发了一次异常，传递CPU中的控制到操作系统内核中的缺页异常处理程序。</li><li>缺页处理程序确定出物理内存中的牺牲页，如果这个页面修改了则把它换出到磁盘。</li><li>缺页处理程序页面调入新的页面，并更新内存中的PTE。</li><li>缺页处理程序返回到原来的进程，再次执行导致缺页的指令，CPU将引起缺页的虚拟地址重新发送给MMU。</li></ol><p><img src="/image/image-20201020145822292.png" alt="image-20201020145822292"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第九章：虚拟内存&quot;&gt;&lt;a href=&quot;#第九章：虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;第九章：虚拟内存&quot;&gt;&lt;/a&gt;第九章：虚拟内存&lt;/h3&gt;&lt;h6 id=&quot;1、什么是虚拟内存？&quot;&gt;&lt;a href=&quot;#1、什么是虚拟内存？&quot; class=&quot;</summary>
      
    
    
    
    <category term="操作系统" scheme="https://duwei19961021.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>虚拟内存</title>
    <link href="https://duwei19961021.github.io/2021/03/20/virtual_memory/"/>
    <id>https://duwei19961021.github.io/2021/03/20/virtual_memory/</id>
    <published>2021-03-20T03:51:57.552Z</published>
    <updated>2021-03-20T03:51:57.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第九章：虚拟内存"><a href="#第九章：虚拟内存" class="headerlink" title="第九章：虚拟内存"></a>第九章：虚拟内存</h3><h5 id="9-1-物理和虚拟寻址"><a href="#9-1-物理和虚拟寻址" class="headerlink" title="9.1 物理和虚拟寻址"></a>9.1 物理和虚拟寻址</h5><p>物理寻址：</p><p><img src="/image/image-20201023182237165.png" alt="image-20201023182237165"></p><p>该示例的上下文是一条加载指令。当cpu加载这条指令时，会生成一个有效物理地址，通过内存总线，把它传递给主存。主存取出从物理地址4开始的四个字节，并将它返回给cpu，cpu会将它存放在一个寄存器里。</p><p>虚拟寻址：</p><p><img src="/image/image-20201023182622615.png" alt="image-20201023182622615"></p><p>使用虚拟地址，cpu通过生成一个虚拟地址(Virtual Address,VA)来访问主存，这个虚拟地址在被送到主存之前先转换成适当的虚拟地址(Memory Manager Unit简称MMU：内存管理单元，利用存放在主存中的查询表来动态翻译虚拟地址)，主存收到翻译过的地址(物理地址)之后从物理内存上取出数据并返回给cpu。</p><h5 id="9-2-地址空间"><a href="#9-2-地址空间" class="headerlink" title="9.2 地址空间"></a>9.2 地址空间</h5><p>地址空间：一个非负整数地址的有序集合。为了简化讨论，总是假设使用的是线性地址空间。</p><p>在一个带虚拟内存的系统，CPU从一个有N=2^n个地址的空间中生成虚拟地址，称为虚拟地址空间。</p><p>{0, 1, 2, 3,…,N-1}</p><p>一个包含N=2^n个地址的虚拟地址空间叫做一个n位地址空间。例如32位操作系统(2^32)、64位操作系统(2^64)。</p><p>主存中的每个字节都有一个选自虚拟空间的地址和一个选自物理空间的地址。</p><table><thead><tr><th align="center">虚拟地址位数(n)</th><th align="center">虚拟地址数(N)</th><th align="center">最大的可能虚拟地址</th></tr></thead><tbody><tr><td align="center">8</td><td align="center">2^8=256 byte</td><td align="center">2^8-1=255</td></tr><tr><td align="center">16</td><td align="center">2^16=64 K</td><td align="center">2^16-1</td></tr><tr><td align="center">32</td><td align="center">2^32 = 4096M = 4G</td><td align="center">2^32-1</td></tr><tr><td align="center">48</td><td align="center">2^48 = 256T</td><td align="center">2^48-1</td></tr><tr><td align="center">64</td><td align="center">2^64 = 16E</td><td align="center">2^64-1</td></tr></tbody></table><h5 id="9-3-虚拟内存作为缓存工具"><a href="#9-3-虚拟内存作为缓存工具" class="headerlink" title="9.3 虚拟内存作为缓存工具"></a>9.3 虚拟内存作为缓存工具</h5><h6 id="1、什么是虚拟内存？"><a href="#1、什么是虚拟内存？" class="headerlink" title="1、什么是虚拟内存？"></a>1、什么是虚拟内存？</h6><p>虚拟内存是磁盘上(较低层)连续N个字节组成的数组，每个字节都有唯一的虚拟地址作为数组的索引，磁盘上数组的内容(指的是数据)被缓存在主存中。(虚拟页存在于磁盘上)</p><p>物理内存被分隔成物理页(Physical Page,PP)。</p><p>VM系统将虚拟内存分隔成虚拟页(Virtual Page,VP)。</p><p>虚拟页面的集合分为三个不相交的子集：</p><ol><li><p>未分配的(VM系统还未分配或者未创建的页，未分配的块没有任何数据和他们相关联，所以不占用任何磁盘空间，linux命令free在计算内存使用量时，未分配的 不会被记入)。</p></li><li><p>缓存的(已缓存在物理内存中的已分配页)。</p></li><li><p>未缓存的(未缓存在物理内存中的已分配页)。</p><p><img src="/image/image-20201026121811373.png" alt="image-20201026121811373"></p></li></ol><h6 id="2、DRAM缓存组织结构"><a href="#2、DRAM缓存组织结构" class="headerlink" title="2、DRAM缓存组织结构"></a>2、DRAM缓存组织结构</h6><ul><li>SRAM：表示位于cpu和主存之间的L1、L2、L3高速缓存。</li><li>DRAM：表示虚拟内存系统的缓存，它在主存中缓存虚拟页。</li><li>直   写：当 CPU 要将数据写入内存时 除了更新缓冲内存(高速缓存L1、L2、L3)上的数据外也将数据写在 DRAM 中 以维持主存与缓冲内存的一致性 当要写入内存的数据一多 速度自然就慢了下来 </li><li>回   写：每当 CPU 要将数据写入内存时 只会先更新缓冲内存(高速缓存L1、L2、L3)上的数据 随后再让缓冲内存在总线不塞车的时候 才把数据写回 DRAM 所以速度自然快得多</li></ul><h6 id="3、页表-将虚拟页映射到物理页"><a href="#3、页表-将虚拟页映射到物理页" class="headerlink" title="3、页表(将虚拟页映射到物理页)"></a>3、页表(将虚拟页映射到物理页)</h6><p>虚拟内存必须有某种方法来判定一个虚拟页是否缓存在DRAM中的某个地方。如果是，系统还必须确定这个虚拟页存放在哪个物理页(主存)。如果不命中还必须判断这个虚拟页存放在磁盘的哪个位置上，在物理页中选择一个牺牲页，并将虚拟页从磁盘复制到DRAM中，替换这个牺牲页。(操作系统为每个进程都维护一个独立的页表)</p><p>页表：将虚拟页映射到物理页。每次地址翻译硬件将一个虚拟地址转换为物理地址时，都会读取页表，操作系统负责维护页表的内容，以及在磁盘与DRAM之间来回传送页。</p><p><img src="/image/image-20201020134441586.png" alt="image-20201020134441586"></p><p>我们将假设每个PTE是由一个有效位(valid bit)和一个n位地址字段组成，有效位表明了该虚拟页当前是否被缓存在DRAM中。如果设置了有效位，那么地址字段就表示DRAM中相应的物理页的起始位置，这个物理页中缓存了该虚拟页。 如果没有设置有效位，那么一个空地址表示这个虚拟页还未被分配。否则，这个地址就指向该虚拟页在磁盘上的起始位置。</p><ul><li><p>确定虚拟地址大小(n)和页大小(P)的组合需要的PTE数量。</p><table><thead><tr><th align="center">n(位)</th><th align="center">P=2^p</th><th align="center">PTE数量</th></tr></thead><tbody><tr><td align="center">16</td><td align="center">4K</td><td align="center">2^16 / 2^12  = 16</td></tr><tr><td align="center">16</td><td align="center">8K</td><td align="center">2^16 / 2^13 = 8</td></tr><tr><td align="center">32</td><td align="center">4K</td><td align="center">2^32 / 2^12 = 2^20</td></tr><tr><td align="center">32</td><td align="center">8K</td><td align="center">2^32 / 2^13 = 2^19</td></tr></tbody></table></li></ul><h6 id="4、缺页"><a href="#4、缺页" class="headerlink" title="4、缺页"></a>4、缺页</h6><p>DRAM缓存不命中称为缺页。</p><p>自己的理解：在cpu获取虚拟页中的数据时，地址翻译硬件去读页表的页表记录的有效位，如果有效位为0则推断出该虚拟页未被缓存，并且触发一个缺页异常。缺页异常调用内核中的缺页异常处理程序，该程序会在主存的PP(物理页)中选择一个被缓存的VP作为牺牲页(如果牺牲页中的数据被修改过那么就会将数据写会磁盘)，接下来将要被缓存的vp从磁盘中加载出来缓存到主存上去(替换牺牲页)。</p><ul><li><p>CPU引用VP3中的一个字，地址翻译硬件将虚拟地址作为一个索引(虚拟地址分为两部分：虚拟页号[VPN:virtual page number]和虚拟页偏移量[VPO:virtual page offset]，使用虚拟页号作为索引)来定位PTE3，通过读取PTE3：有效为为0且地址不为null，所以得出VP3没有被缓存在物理内存中且得到了VP3的磁盘地址，此时触发缺页异常，缺页异常调用内核中的缺页异常处理程序，该程序会选择一个牺牲页(PP3中的VP4，如果VP4的内容被修改了，那么内核就会将VP4的数据复制回磁盘)，无论哪种情况，内核都会修改VP4的页表条目，反映VP4不在缓存在主存中的事实。</p><p><img src="/image/image-20201020140133328.png" alt="image-20201020140133328"></p></li><li><p>随后，内核从磁盘复制VP3到内存PP3，并更新PTE3(将有效为设置为1，地址位设置为物理页号)，随后返回，当异常处理程序返回的时候，它会重启导致缺页的指令，该指令会把缺页的虚拟地址重新发送给地址翻译硬件，但是此时VP3已经缓存在物理内存中了，那么页命中就能由地址翻译硬件正常处理了。</p><p><img src="/image/image-20201026140413910.png" alt="image-20201026140413910"></p></li></ul><p>5、分配页面</p><ul><li><p>操作系统分配一个新的虚拟内存页时对页表的影响，例如：调用mallooc，在这个实例中，VP5的分配过程是在磁盘创建空间并更新PTE5，并使它指向磁盘上这个新创建的页面。此过程中并没有分配物理内存哦。</p><p><img src="/image/image-20201026141028175.png" alt="image-20201026141028175"></p></li></ul><hr><h5 id="9-6-地址翻译"><a href="#9-6-地址翻译" class="headerlink" title="9.6 地址翻译"></a>9.6 地址翻译</h5><ul><li><p>地址翻译符号</p><p><img src="/image/image-20201026153155106.png" alt="image-20201026153155106"></p></li><li><p>MMU利用虚拟地址包含的VPN寻找PTE，将页表条目中的PPN和VPO串联起来就得到响应的物理地址(因为vp和pp都是P字节，所以物理页和虚拟页的偏移量相同)</p><p><img src="/image/image-20201026153233283.png" alt="image-20201026153233283"></p></li></ul><p>当页面命中时，CPU硬件执行的步骤：</p><ol><li>处理器生成一个虚拟地址，并把它传送给MMU。</li><li>MMU生成PTE地址，并从高速缓存/主存请求得到它。</li><li>高速缓存/主存向MMU返回PTE。</li><li>MMU构造物理地址，并把它传给告诉缓存/主存。</li><li>高速缓存/主存返回所请求的数据字给处理器。</li></ol><p><img src="/image/image-20201020145055727.png" alt="image-20201020145055727"></p><p>缺页，CPU硬件执行步骤：</p><ol><li>处理器生成一个虚拟地址，并把它传送给MMU。</li><li>MMU生成PTE地址，并从高速缓存/主存请求得到它。</li><li>高速缓存/主存向MMU返回PTE。</li><li>PTE中的有效为是0，所以MMU触发了一次异常，传递CPU中的控制到操作系统内核中的缺页异常处理程序。</li><li>缺页处理程序确定出物理内存中的牺牲页，如果这个页面修改了则把它换出到磁盘。</li><li>缺页处理程序页面调入新的页面，并更新内存中的PTE。</li><li>缺页处理程序返回到原来的进程，再次执行导致缺页的指令，CPU将引起缺页的虚拟地址重新发送给MMU。</li></ol><p><img src="/image/image-20201020145822292.png" alt="image-20201020145822292"></p><ul><li><p>给定一个32位的虚拟地址空间和一个24位的物理地址，对于下列页面大小P。</p><table><thead><tr><th align="center">P</th><th align="center">VPN位数</th><th align="center">VPO位数</th><th align="center">PPN位数</th><th align="center">PPO位数</th></tr></thead><tbody><tr><td align="center">1KB (2^p=1024,p=10)</td><td align="center">22</td><td align="center">10</td><td align="center">14</td><td align="center">10</td></tr><tr><td align="center">2KB(2^p=2048,p=11)</td><td align="center">21</td><td align="center">11</td><td align="center">13</td><td align="center">11</td></tr><tr><td align="center">4KB(2^p=4096,p=12)</td><td align="center">20</td><td align="center">12</td><td align="center">12</td><td align="center">12</td></tr><tr><td align="center">8KB(2^p=8192,p=13)</td><td align="center">19</td><td align="center">13</td><td align="center">11</td><td align="center">13</td></tr></tbody></table><p>(常说的32位和64位操作系统，指的就是页表条目PTE的长度。)</p></li></ul><h6 id="1、多级页表"><a href="#1、多级页表" class="headerlink" title="1、多级页表"></a>1、多级页表</h6><p>到目前为止，一直假设系统只用一个单独的页表进行地址翻译。但是如果我们有一个32位地址空间、4kb的页和一个4字节的PTE，那么即使应用所引用的只是虚拟空间中很小的一部分，也总是需要4MB的页表驻留内存。(32位地址空间，总共有2^32个内存地址，一个虚拟页的大小是4KB，那么总共有 2^32/2^12=2^20 个内存页，一个内存页需要一个PTE，一个PTE是4字节，那么页表总共大小是：2^20 * 2^12 = 2^32字节 = 2^32 / 2^10 KB = 2^12 / 2^10 MB = 4MB。在没有优化的情况下，一张独立页表在内存中要占用4M物理内存)</p><hr><h6 id="计算机中的字，双字以及存储"><a href="#计算机中的字，双字以及存储" class="headerlink" title="计算机中的字，双字以及存储"></a>计算机中的字，双字以及存储</h6><ul><li>字节(byte)：一个字节由8位二进制数组成</li><li>字(word)：</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第九章：虚拟内存&quot;&gt;&lt;a href=&quot;#第九章：虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;第九章：虚拟内存&quot;&gt;&lt;/a&gt;第九章：虚拟内存&lt;/h3&gt;&lt;h5 id=&quot;9-1-物理和虚拟寻址&quot;&gt;&lt;a href=&quot;#9-1-物理和虚拟寻址&quot; class</summary>
      
    
    
    
    <category term="操作系统" scheme="https://duwei19961021.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="内存" scheme="https://duwei19961021.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>ngx缓冲区</title>
    <link href="https://duwei19961021.github.io/2021/03/18/ngx_buf/"/>
    <id>https://duwei19961021.github.io/2021/03/18/ngx_buf/</id>
    <published>2021-03-18T07:14:01.000Z</published>
    <updated>2021-03-20T03:53:13.842Z</updated>
    
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="buf" scheme="https://duwei19961021.github.io/tags/buf/"/>
    
  </entry>
  
  <entry>
    <title>nginx内存池</title>
    <link href="https://duwei19961021.github.io/2021/03/18/ngx_mem_pool/"/>
    <id>https://duwei19961021.github.io/2021/03/18/ngx_mem_pool/</id>
    <published>2021-03-18T07:14:01.000Z</published>
    <updated>2021-03-21T05:22:34.182Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx内存池"><a href="#nginx内存池" class="headerlink" title="nginx内存池"></a>nginx内存池</h4><h5 id="内存池的数据结构"><a href="#内存池的数据结构" class="headerlink" title="内存池的数据结构"></a>内存池的数据结构</h5><p><img src="http://img.3amupupup.online/ngx_mem_pool_struct.png" alt="内存池结构"></p><p><img src="http://img.3amupupup.online/ngx_mem_pool_5.png" alt="ngx内存池"></p><pre><code class="c">// src/core/ngx_palloc.htypedef struct {    u_char               *last;     /* 内存池中未使用内存的开始节点地址 */    u_char               *end;      /* 内存池的结束地址 */    ngx_pool_t           *next;     /* 指向下一个内存池,组成链表 */    ngx_uint_t            failed;   /* 失败次数 */} ngx_pool_data_t;// typedef struct ngx_pool_s ngx_pool_t;struct ngx_pool_s {    ngx_pool_data_t       d;        /* 内存池的数据区域(小块数据) */    size_t                max;      /* 最大每次可分配内存,大于这个值将被添加到大块数据链表上,小于这个值将被添加到小块数据链表上 */    ngx_pool_t           *current;  /* 指向当前的内存池指针地址。ngx_pool_t链表上最后一个缓存池结构 */    ngx_chain_t          *chain;    /* 缓冲区链表 */    ngx_pool_large_t     *large;    /* 存储大块数据的链表 */    ngx_pool_cleanup_t   *cleanup;  /* 可自定义回调函数，清除内存块分配的内存 */    ngx_log_t            *log;      /* 日志 */};// typedef struct ngx_pool_cleanup_s  ngx_pool_cleanup_t;struct ngx_pool_cleanup_s {    ngx_pool_cleanup_pt   handler;  /* 清理的回调函数 */    void                 *data;     /* 指向存储的数据地址 */    ngx_pool_cleanup_t   *next;     /* 下一个ngx_pool_cleanup_t */};</code></pre><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><ol><li><p>ngx_alloc: 分配内存，底层调用的是malloc。</p><pre><code class="c">void *ngx_alloc(size_t size, ngx_log_t *log){    void  *p;    p = malloc(size);      /*           底层去调用malloc分配内存      */    if (p == NULL) {        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,                      &quot;malloc(%uz) failed&quot;, size);    }    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, log, 0, &quot;malloc: %p:%uz&quot;, p, size);    return p;}</code></pre></li><li><p>ngx_calloc: 分配内存并初始化，底层调用的是malloc和memset。</p><pre><code class="c">void *ngx_calloc(size_t size, ngx_log_t *log){    void  *p;    p = ngx_alloc(size, log);    if (p) {        ngx_memzero(p, size);          /*              ngx_memzero是个宏函数，底层实际调用memset，src/core/ngx_string.h              #define ngx_memzero(buf, n)       (void) memset(buf, 0, n)          */    }    return p;}</code></pre></li><li><p>ngx_create_pool: 创建内存池结点</p><pre><code class="c">ngx_pool_t *ngx_create_pool(size_t size, ngx_log_t *log){    ngx_pool_t  *p;    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);      /*          #define ngx_memalign(alignment, size, log)  ngx_alloc(size, log)，          而ngx_alloc实际上是去调用malloc      */    if (p == NULL) {        return NULL;    }    p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);      /*          p是通过malloc申请得到的内存的首地址，前sizeof(ngx_pool_t)字节的内存要留给内存池的管理结构(我也叫他控制中心)，          控制中心之后的内存是给申请者使用的。last是申请者能够使用内存的起始位置，end是结束位置(由数据结构得知)      */    p-&gt;d.end = (u_char *) p + size;      /*          end指向申请得到的内存的末尾位置，          p是首地址，加上size就是结束地址即end的指向位置，          内存的申请者总共申请了size个字节的内存，能够使用的内存为：size - sizeof(ngx_pool_t)      */    p-&gt;d.next = NULL;      /*          内存池通过指针相连，组成一个链表，下一个结点在创建时应当指向NULL      */    p-&gt;d.failed = 0;    size = size - sizeof(ngx_pool_t);    p-&gt;max = (size &lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;      /*     NGX_MAX_ALLOC_FROM_POOL should be (ngx_pagesize - 1), i.e. 4095 on x86.     On Windows NT it decreases a number of locked pages in a kernel.     max取size和操作系统弄内存页二者中较小的值     */    p-&gt;current = p;    p-&gt;chain = NULL;    p-&gt;large = NULL;    p-&gt;cleanup = NULL;    p-&gt;log = log;      /*          只有缓存池的父节点，才会用到这几个成员  ，子节点只挂载在p-&gt;d.next,并且只负责p-&gt;d的数据内容      */    return p;}</code></pre></li><li><p>ngx_destroy_pool: 销毁内存池结点</p><pre><code class="c">voidngx_destroy_pool(ngx_pool_t *pool){    ngx_pool_t          *p, *n;    ngx_pool_large_t    *l;    ngx_pool_cleanup_t  *c;    for (c = pool-&gt;cleanup; c; c = c-&gt;next) {        if (c-&gt;handler) {            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,                           &quot;run cleanup: %p&quot;, c);            c-&gt;handler(c-&gt;data);        }    }      /*          只有父结点才有cleanup链表，          cleanup链表的结点结构有三个成员：清理函数handler、指向存储数据的data、指向下一个结点的next          这里遍历cleanup链表，调用handler清理data      */#if (NGX_DEBUG)    // 编译debug级别，如果为true，会打印日志    /*     * we could allocate the pool-&gt;log from this pool     * so we cannot use this log while free()ing the pool     */    for (l = pool-&gt;large; l; l = l-&gt;next) {        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0, &quot;free: %p&quot;, l-&gt;alloc);    }    for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) {        ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,                       &quot;free: %p, unused: %uz&quot;, p, p-&gt;d.end - p-&gt;d.last);        if (n == NULL) {            break;        }    }#endif    for (l = pool-&gt;large; l; l = l-&gt;next) {        if (l-&gt;alloc) {            ngx_free(l-&gt;alloc);        }    }      /*          只有父结点才有large链表，          遍历large(大块数据链表)链表，释放alloc指针指向的存储数据的内存          #define ngx_free          free          由此可知ngx_free是个宏，底层调用的还是free，这里直接将大块数据内存还给了操作系统      */    for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) {        ngx_free(p);          /*              至此，父结点上的large链表以及cleanup链表都被清理了，然后循环清理内存池结点，              小块数据内存是分配在内存池结点上的，和其控制中心(ngx_pool_t)是连续的，              释放时直接释放当前结点就行了          */          /*              至此清理工作结束。              但是有个小疑问：chain(缓冲区)链表为啥没有被清理？          */        if (n == NULL) {            break;        }    }}</code></pre></li><li><p>ngx_reset_pool: 清理内存池结点</p><pre><code class="c">voidngx_reset_pool(ngx_pool_t *pool){    ngx_pool_t        *p;    ngx_pool_large_t  *l;    for (l = pool-&gt;large; l; l = l-&gt;next) {        if (l-&gt;alloc) {            ngx_free(l-&gt;alloc);        }    }      /*          清理large链表      */    for (p = pool; p; p = p-&gt;d.next) {        p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);        p-&gt;d.failed = 0;    }      /*          重置小数据块区域的内存，注意这里是修改last的指向，将last重新指向起始位置，          内存并没有被擦除，因为是小数据块内存，这里没有将其归还给操作系统，          目的是避免频繁的malloc和free产生内存碎片问题，频繁调用这两个函数也会给          操作系统带来额外的消耗。      */    pool-&gt;current = pool;    pool-&gt;chain = NULL;    pool-&gt;large = NULL;}</code></pre></li><li><p>ngx_palloc: 向内存池申请内存的函数</p><pre><code class="c">void *ngx_palloc(ngx_pool_t *pool, size_t size){#if !(NGX_DEBUG_PALLOC)      /*          这里是个条件编译，如果没开启ngx palloc debug就会根据size决定调用ngx_palloc_small还是                              ngx_palloc_large，如果开启了debug则一律调用ngx_palloc_large      */    if (size &lt;= pool-&gt;max) {        return ngx_palloc_small(pool, size, 1);    }#endif    return ngx_palloc_large(pool, size);}</code></pre></li><li><p>ngx_palloc_small: 分配小块数据内存的函数，调用这个函数所分配的内存都是在内存池结点上</p><pre><code class="c">static ngx_inline void *ngx_palloc_small(ngx_pool_t *pool, size_t size, ngx_uint_t align){    u_char      *m;    ngx_pool_t  *p;    p = pool-&gt;current;    do {        m = p-&gt;d.last;          /*              m保存了last的指向，last &lt;-&gt; end 之间是未被使用的内存          */        if (align) {            m = ngx_align_ptr(m, NGX_ALIGNMENT);        }          /*              align，暂时不懂是啥意思          */        if ((size_t) (p-&gt;d.end - m) &gt;= size) {            p-&gt;d.last = m + size;            return m;        }          /*              如果end到m(即last)之间的字节数大于size，那么这个内存池结点上的足够申请者使用，              则将last后移size个字节并返回之前last的指向的内存的地址供调用者使用          */        p = p-&gt;d.next;    } while (p);    return ngx_palloc_block(pool, size);      /*          走到这里说明内存池的所有结点上都没有足够的空间分配出去，          此时则调用ngx_palloc_block新开一个内存池的节点(扩容)      */}</code></pre></li><li><p>ngx_palloc_large: 分配大块数据内存的函数，调用这个函数所分配的内存都是在large链表上</p><pre><code class="c">static void *ngx_palloc_large(ngx_pool_t *pool, size_t size){    void              *p;    ngx_uint_t         n;    ngx_pool_large_t  *large;    p = ngx_alloc(size, pool-&gt;log);      /*          底层调用malloc分配内存      */        if (p == NULL) {        return NULL;    }    n = 0;    for (large = pool-&gt;large; large; large = large-&gt;next) {        if (large-&gt;alloc == NULL) {            large-&gt;alloc = p;            return p;        }          /*              遍历large链表，寻找空闲结点，找到了则将large链表上的空闲结点的alloc指向刚刚申请的内存p          */        if (n++ &gt; 3) {            break;        }          /*              如果找了三次还没找到那就不找了，避免链表过长时查找效率低          */    }    large = ngx_palloc_small(pool, sizeof(ngx_pool_large_t), 1);      /*          在内存池结点的小块数据内存上给large的控制中心结构ngx_pool_large_t分配一块内存      */    if (large == NULL) {        ngx_free(p);          /*              如果large分配失败p是要释放的，避免内存泄露          */        return NULL;    }    large-&gt;alloc = p;    large-&gt;next = pool-&gt;large;    pool-&gt;large = large;      /*          新开的large结点变为large链表的头结点。      */    return p;}</code></pre></li><li><p>ngx_palloc_block: 添加新的内存池结点</p><pre><code class="c">static void *ngx_palloc_block(ngx_pool_t *pool, size_t size){    u_char      *m;    size_t       psize;    ngx_pool_t  *p, *new;    psize = (size_t) (pool-&gt;d.end - (u_char *) pool);      /*          要新创建的内存池的结点的size是根据头结点的size创建的      */    m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool-&gt;log);      /*          申请psize大小的内存块      */    if (m == NULL) {        return NULL;    }    new = (ngx_pool_t *) m;      /*          类型转换      */    new-&gt;d.end = m + psize;      /*          end指向末尾      */    new-&gt;d.next = NULL;      /*          下一个结点指针 指向NULL避免野指针      */    new-&gt;d.failed = 0;    m += sizeof(ngx_pool_data_t);      /*          前sizeof(ngx_pool_data_t)个字节留给ngx_pool_data_t结构使用，          这里用的比较巧妙，细品细品，此时有点惊叹设计者的做法。          因为创建的是子节点，所以max、current指针、缓冲区链表指针、large链表指针、          cleanup链表指针，这几个成员所占的内存都可以分配出去给调用者使用(子结点用不到这几个成员)，          避免了空间浪费。      */    m = ngx_align_ptr(m, NGX_ALIGNMENT);    new-&gt;d.last = m + size;      /*          移动last size个字节，标识这段内存已经被分配出去了      */    for (p = pool-&gt;current; p-&gt;d.next; p = p-&gt;d.next) {        if (p-&gt;d.failed++ &gt; 4) {            pool-&gt;current = p-&gt;d.next;        }    }      /*          每遍历一个结点failed++，当failed超过了4时，current会指向新子结点，          这么做可以避免遍历整个链表(如果链表足够长，遍历一次效率比较低)      */    p-&gt;d.next = new;    return m;}</code></pre></li><li><p>ngx_pnalloc: 开辟内存的函数，根据size去调用不同的函数</p><pre><code class="c">void *ngx_pnalloc(ngx_pool_t *pool, size_t size){#if !(NGX_DEBUG_PALLOC)    if (size &lt;= pool-&gt;max) {        return ngx_palloc_small(pool, size, 0);    }#endif    return ngx_palloc_large(pool, size);}</code></pre></li><li><p>ngx_pcalloc: 申请一块内存并初始化为0值</p><pre><code class="c">void *ngx_pcalloc(ngx_pool_t *pool, size_t size){    void *p;    p = ngx_palloc(pool, size);    if (p) {        ngx_memzero(p, size);    }    return p;}</code></pre></li><li><p>ngx_pmemalign:</p><pre><code class="c">void *ngx_pmemalign(ngx_pool_t *pool, size_t size, size_t alignment){    void              *p;    ngx_pool_large_t  *large;    p = ngx_memalign(alignment, size, pool-&gt;log);    if (p == NULL) {        return NULL;    }    large = ngx_palloc_small(pool, sizeof(ngx_pool_large_t), 1);    if (large == NULL) {        ngx_free(p);        return NULL;    }    large-&gt;alloc = p;    large-&gt;next = pool-&gt;large;    pool-&gt;large = large;    return p;}</code></pre></li><li><p>ngx_pfree: 释放large链表上的内存p</p><pre><code class="c">ngx_int_tngx_pfree(ngx_pool_t *pool, void *p){    ngx_pool_large_t  *l;    for (l = pool-&gt;large; l; l = l-&gt;next) {        if (p == l-&gt;alloc) {              /*                  遍历large链表，查找p所在的节点，如果large链表足够长时，这个函数的效率偏低              */            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,                           &quot;free: %p&quot;, l-&gt;alloc);            ngx_free(l-&gt;alloc);              /*                  实际调用的还是free              */            l-&gt;alloc = NULL;            return NGX_OK;        }    }    return NGX_DECLINED;}</code></pre></li><li><p>ngx_pool_cleanup_add: cleanup机制设计的比较灵活，pool-&gt;cleanup是一个链表，每个ngx_pool_cleanup_t的数据结构上保存这指向的内存地址和回调清理函数，通过这个机制可以很方便的管理一些特殊的内存类型，比如文件描述符、自定义类型。</p><pre><code class="c">ngx_pool_cleanup_t *ngx_pool_cleanup_add(ngx_pool_t *p, size_t size){    ngx_pool_cleanup_t  *c;    c = ngx_palloc(p, sizeof(ngx_pool_cleanup_t));      /*          给cleanup的控制中心结构分配内存，分配在内存池小块数据内存上的。      */    if (c == NULL) {        return NULL;    }    if (size) {        c-&gt;data = ngx_palloc(p, size);        if (c-&gt;data == NULL) {            return NULL;        }    } else {        c-&gt;data = NULL;    }      /*          根据size决定是否分配数据区，数据区分配的内存在哪据size的大小而定，          可能在小数据块内存上也可能在large链表上      */    c-&gt;handler = NULL;    c-&gt;next = p-&gt;cleanup;    p-&gt;cleanup = c;      /*          头插进cleanup链表      */    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, p-&gt;log, 0, &quot;add cleanup: %p&quot;, c);    return c;}</code></pre><ol><li>ngx_pool_run_cleanup_file: 清理cleanup链表上的文件描述符fd，时间复杂度O(n)，链表过长时效率偏低</li></ol><pre><code class="c">voidngx_pool_run_cleanup_file(ngx_pool_t *p, ngx_fd_t fd){    ngx_pool_cleanup_t       *c;    ngx_pool_cleanup_file_t  *cf;    for (c = p-&gt;cleanup; c; c = c-&gt;next) {        if (c-&gt;handler == ngx_pool_cleanup_file) {            cf = c-&gt;data;            if (cf-&gt;fd == fd) {                c-&gt;handler(cf);                c-&gt;handler = NULL;                return;            }        }    }}</code></pre><ol><li>ngx_pool_cleanup_file: 关闭文件回调函数</li></ol><pre><code class="c">voidngx_pool_cleanup_file(void *data){    ngx_pool_cleanup_file_t  *c = data;    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &quot;file cleanup: fd:%d&quot;,                   c-&gt;fd);    if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) {        ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,                      ngx_close_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);    }}</code></pre></li><li><p>ngx_pool_delete_file: 删除文件回调函数</p><pre><code class="c">voidngx_pool_delete_file(void *data){    ngx_pool_cleanup_file_t  *c = data;    ngx_err_t  err;    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &quot;file cleanup: fd:%d %s&quot;,                   c-&gt;fd, c-&gt;name);    if (ngx_delete_file(c-&gt;name) == NGX_FILE_ERROR) {        err = ngx_errno;        if (err != NGX_ENOENT) {            ngx_log_error(NGX_LOG_CRIT, c-&gt;log, err,                          ngx_delete_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);        }    }    if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) {        ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,                      ngx_close_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);    }}</code></pre></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol><li>内存池的所有结点上，只有父结点才存在cleanup链表、large链表、buf链表，子节点上只有ngx_pool_data_t结构(pool-&gt;d)和用户内存区域。如果子节点上也能存在着三个链表，说实话结构会变得异常复杂。</li><li>申请小数据内存(size &lt; pool-&gt;max)时不一定是向操作系统申请内存，会先遍历内存池的结点，判断其data区是否能满足分配的需求，能满足则在其结点上分配(移动last的指向)。如果没有满足的结点，则新建一个结点并将其假如内存池链表。</li><li>申请大数据内存(size &gt;= poo-&gt;max)，large的控制中心结构ngx_pool_large_t所需要的内存是在ngx_pool_data_t管理的区域上分配的，size大小的内存是直接向操作系统申请的(malloc)，然后用alloc指针保存分配的内存的地址。</li><li>cleanup设计灵活，能自定义清理工作，便于我们在内存池申请自定义或者特殊类型的内存，申请的数据区域存在于large链表或内存池结点的小块数据区域。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx内存池&quot;&gt;&lt;a href=&quot;#nginx内存池&quot; class=&quot;headerlink&quot; title=&quot;nginx内存池&quot;&gt;&lt;/a&gt;nginx内存池&lt;/h4&gt;&lt;h5 id=&quot;内存池的数据结构&quot;&gt;&lt;a href=&quot;#内存池的数据结构&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Nginx" scheme="https://duwei19961021.github.io/categories/Nginx/"/>
    
    
    <category term="mem_pool" scheme="https://duwei19961021.github.io/tags/mem-pool/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins结合sonar代码检测流水线</title>
    <link href="https://duwei19961021.github.io/2021/03/18/Jenkins%E7%BB%93%E5%90%88sonar%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
    <id>https://duwei19961021.github.io/2021/03/18/Jenkins%E7%BB%93%E5%90%88sonar%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B%E6%B5%81%E6%B0%B4%E7%BA%BF/</id>
    <published>2021-03-18T03:09:52.078Z</published>
    <updated>2021-03-18T03:09:52.078Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、jenkins所需插件"><a href="#1、jenkins所需插件" class="headerlink" title="1、jenkins所需插件"></a>1、jenkins所需插件</h5><p><a href="https://plugins.jenkins.io/workflow-aggregator" target="_blank" rel="noopener">Pipeline</a>、<a href="https://plugins.jenkins.io/sonar-quality-gates" target="_blank" rel="noopener">Sonar Quality Gates Plugin</a>、<a href="https://plugins.jenkins.io/sonar" target="_blank" rel="noopener">SonarQube Scanner</a>、<a href="https://plugins.jenkins.io/generic-webhook-trigger" target="_blank" rel="noopener">Generic Webhook Trigger Plugin</a></p><h5 id="2、jenkins配置"><a href="#2、jenkins配置" class="headerlink" title="2、jenkins配置"></a>2、jenkins配置</h5><ul><li><p>Dashboard =&gt; 系统管理 =&gt; 全局工具配置</p><p><img src="/image/image-20201227165338711.png" alt="sonar scanner安装"></p></li><li><p>Dashboard =&gt; 系统管理 =&gt; 系统配置</p><p><img src="/image/image-20201227165501679.png" alt="sonarqube servers配置"></p></li></ul><p>  <img src="/image/image-20201227165627390.png" alt="token配置"></p><p>  这个token是在sonar web上生成的，然后在jenkins上创建一个secret text类型凭据。</p><p>  <img src="/image/image-20201227165828644.png" alt="gitlab"></p><p>  配置连接gitlab，要生成gitlab api token</p><p>  <img src="/image/image-20201227165956042.png" alt="获取gitlab Private token"></p><p>  生成private token。在sonar检测代码所有条件都通过时，要通过这个private token去操作gitlab的api来自动接受合并请求。</p><p>  <img src="/image/image-20201227170513752.png" alt="private token 凭据"></p><p>  生成凭据，记住这里的id 为12，一会pipeline脚本要用</p><ul><li><p>在gitlab项目下配置触发器，只勾选Merge Request Events (这个token随机生成一个就好了)</p><p><img src="/image/image-20201227170841973.png" alt="gitlab webhook"></p></li></ul><h5 id="3、pipiline脚本"><a href="#3、pipiline脚本" class="headerlink" title="3、pipiline脚本"></a>3、pipiline脚本</h5><pre><code class="pipeline">pipeline {   agent any   environment {        PrivateToken= credentials(&#39;12&#39;) // 获取private token，之前在凭据里配置过，这样比较安全，不需要在脚本里明文使用token    }   options {      gitLabConnection(&#39;gitlab&#39;)    }       triggers {        GenericTrigger(            genericVariables: [            [key: &#39;source_branch&#39;, value: &#39;$.object_attributes.source_branch&#39;], // 获取merge的源分支,只检测源分支，源分支的代码检测成功才能合并到目标分支            [key: &#39;url&#39;, value: &#39;$.object_attributes.url&#39;], // 获取gitlab merge请求的url            [key: &#39;action&#39;, value: &#39;$.object_attributes.action&#39;], // 获取merge动作 [reopen,close,open],只在reopen和open时才出发流水线检测            [key: &#39;source_project_id&#39;, value: &#39;$.object_attributes.source_project_id&#39;],            [key: &#39;iid&#39;, value: &#39;$.object_attributes.iid&#39;],            [key: &#39;name&#39;, value: &#39;$.user.name&#39;], // 获取合并请求的发起人            [key: &#39;project_name&#39;, value: &#39;$.project.name&#39;], // 或者项目名            [key: &#39;target_branch&#39;, value: &#39;$.object_attributes.target_branch&#39;], // 获取目标分支，我这里的需求是：合并到release.test分支的请求才进行质检、自动合并，所以我需要拿到这个变量            [key: &#39;object_kind&#39;, value: &#39;$.object_kind&#39;]            ],            token: &#39;fc161920aa6f1886e7417416edc85500&#39; , // 这是webhook上填写的token            causeString: &#39; Triggered on $ref&#39; ,            printContributedVariables: true,            printPostContent: true        )    }   stages {    stage(&quot;select branch&quot;){        steps{                script{                    if((env.source_branch =~ &#39;release.*&#39;).matches() || (env.action!=&quot;open&quot;  &amp;&amp; env.action!=&quot;update&quot;) || env.target_branch != &quot;release.test&quot;){ // 触发流水线检测代码的条件                        stage(&quot;exit with 0&quot;){                            ansiColor(&#39;gnome-terminal&#39;) {                                echo &quot;\033[32m Jump Sonar\n user:$name\nproject_name:$project_name\nobject_kind:$object_kind\naction:$action\nsource_branch:$source_branch\n target_branch:$target_branch \033[0m&quot;                            }                                   }                    }else{                        stage(&#39;pull branch&#39;) {                            checkout([$class: &#39;GitSCM&#39;, branches: [[name: &quot;*/$source_branch&quot;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &#39;11&#39;, url: &#39;http://gitlab.xxxxxx.com:8888/xubin/xxxxxxxx.git&#39;]]])                        }                        stage(&#39;SonarQubeanalysis&#39;) {                                script {                                    scannerHome = tool &#39;sonar-scanner&#39;                                }                            withSonarQubeEnv(&#39;sonar&#39;) {                            sh &quot;echo ${scannerHome}&quot;                            sh &quot;${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=$JOB_BASE_NAME -Dsonar.sources=./app&quot;                            }                    }                       stage(&quot;SonarQube Quality Gate&quot;) {                                    timeout(time: 1, unit: &#39;HOURS&#39;) {                                    def qg = waitForQualityGate(&#39;sonar&#39;)                                    if (qg.status != &#39;OK&#39;) {                                    echo &quot;Status: ${qg.status}&quot;                                    error &quot;Pipeline aborted due to quality gate failure: ${qg.status}&quot; // 质检没通过直接让流水线失败退出                                    }                                }                                ansiColor(&#39;gnome-terminal&#39;) {                                echo &quot;\033[32m Jump Sonar\n user:$name\nproject_name:$project_name\nobject_kind:$object_kind\naction:$action\nsource_branch:$source_branch\n target_branch:$target_branch \033[0m&quot;                            }                    }                         stage(&quot;Merge&quot;){ // 如果检测通过自动合并请求                                script{                                    httpRequest authentication: &#39;11&#39;, customHeaders: [[maskValue: false, name: &#39;PRIVATE-TOKEN&#39;, value: &quot;$PrivateToken&quot;]], httpMode: &#39;PUT&#39;, responseHandle: &#39;NONE&#39;, url: &quot;http://gitlab.xxxxxx.com:8888/api/v4/projects/$source_project_id/merge_requests/$iid/merge&quot;                                }                        }                    }                }            }        }    }}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1、jenkins所需插件&quot;&gt;&lt;a href=&quot;#1、jenkins所需插件&quot; class=&quot;headerlink&quot; title=&quot;1、jenkins所需插件&quot;&gt;&lt;/a&gt;1、jenkins所需插件&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;https://plugins.j</summary>
      
    
    
    
    <category term="运维" scheme="https://duwei19961021.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="sonar" scheme="https://duwei19961021.github.io/tags/sonar/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://duwei19961021.github.io/2021/03/18/%E6%8E%92%E5%BA%8F/"/>
    <id>https://duwei19961021.github.io/2021/03/18/%E6%8E%92%E5%BA%8F/</id>
    <published>2021-03-18T03:09:52.078Z</published>
    <updated>2021-03-18T03:09:52.078Z</updated>
    
    <content type="html"><![CDATA[<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><ol><li><p>排序思想</p><p>一个无序数列，从第一个数开始，循环比较相邻两个数的大小，如果前一个数大于后一个数则交换它们的位置(升序)。</p></li><li><p>示意图</p><p>一个数列：10 9 8 7 6 5 4 3 2 1</p><p><img src="http://img.3amupupup.online/BoubleSort.png" alt="冒泡排序"></p><p><img src="http://img.3amupupup.online/BubbleSort.gif" alt="冒泡排序"></p></li></ol><ol start="3"><li><p>实现</p><pre><code class="c">void BubbleSort(int* arr, int arrSize){    for (int i = 0; i &lt; arrSize-1; ++i)    {        int flag = 0;        for (int j = 0; j &lt; arrSize-i-1; ++j) // 每循环一次意味着一个最大的数被移动到了数组末尾，在下一次循环时最后一个数没必要参与比较        {            if(arr[j] &gt; arr[j+1])            {                flag = 1; // 判断循环时是否发生交换，没有发生交换则说明已经有序，直接退出。                int temp = arr[j];                arr[j] = arr[j+1];                arr[j+1] = temp;            }        }        if (!flag)            return;    }}</code></pre></li><li><p>理解</p><p>冒泡排序每迭代一次数组，最大数会被冒到最后，在下一次迭代时排除掉之前迭代冒的大数。</p><p>时间复杂度：N-1 + N-2 + …… + 1 即 O(N^2)。</p><p>空间复杂度：在排序过程中无需借助其它空间保存数据，即O(1)。</p></li></ol><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><ol><li><p>排序思想</p><p>一个无序数列，假设前n个数是有序的，依次取出n之后的数字与 n=&gt;0 进行比较，如果小于n则插入到n之前(升序)。</p></li><li><p>示意图</p><p><img src="http://img.3amupupup.online/InsertSort.png" alt="插入排序"></p><p><img src="http://img.3amupupup.online/InsertSort.gif" alt="插入排序"></p></li><li><p>实现</p><pre><code class="c">void InsertSort(int* arr, int arrSize){    for (int i = 0; i &lt; arrSize-1; ++i)    {        int end = i; // 假设 0-end是有序数列，第一次end就是0,拿arr[1]和arr[0]比较        int temp = arr[end+1]; // 选出end之后的第一个数        while (end &gt;= 0)        {            if(temp &lt; arr[end]) // 升序            {                arr[end+1] = arr[end]; // 如果temp小于arr[end]，则说明要将end往后挪一次                end--; // 然后end继续往前走,继续判断temp是否小于arr[end]            }            else            {                break; // 不小于arr[end]时直接跳出循环            }        }        arr[end+1] = temp;    }}</code></pre></li></ol><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><ol><li><p>排序思想</p><p>希尔排序是在插入排序的基础上做的优化。插入排序中，如果值大小分布越不均匀，在选择一个数与有序序列比较时需要移动end的次数会越多，序列越接近有序，需要移动end的次数就会越少。希尔排序在此基础上，将序列分成不连续多个组，然后进行插入排序，这会使得序列能更快的接近有序。直至间隔为1时就是插入排序，此时数组接近有序，效率会更高。</p></li><li><p>示意图</p><p><img src="http://img.3amupupup.online/ShellSort.png" alt="希尔排序"></p><p><img src="http://img.3amupupup.online/ShellSort.gif" alt="希尔排序"></p><p>图中，2、5、13为一组，5、3、3为一组，升序情况下：间隔越大，那么排在靠后位置的数就更加容易的被插入在数组靠前的位置，比如arr[1]=5、arr[5]=3、arr[9]=3，如果是插入排序，arr[9]=3 end需要移动6次才能使arr[9]到达靠前的位置，使用希尔排序，end移动两次就靠前了。会使数组更容易的接近有序。</p></li><li><p>实现</p><pre><code class="c">void ShellSort(int* arr, int arrSize){    int gap = arrSize;    while(gap &gt; 1)    {        gap = gap/3+1; // 2/3=0,会导致排序提前结束(gap还没等于1就结束了),所以每次给gap加上个1。        for(int i = 0;i &lt; arrSize-gap;i++)        // arrSize为什么要减去gap: 假如数组长度是10,gap第一次循环为4。        // 循环开始之后，temp的下标(也就是end+gap)不能超出数组范围即:i+gap &lt; arrsize,也就是i&lt;arrSize-gap        {            int end = i;            int temp = arr[end+gap];            while(end &gt;= 0)            {                if(temp &lt; arr[end])                {                    arr[end+gap] = arr[end];                    end-=gap;                }                else                {                    break;                }            }            arr[end+gap] = temp;        }    }}</code></pre></li></ol><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><ol><li><p>排序思想</p><p>有序数列(数组)的在内存上存储形式是线性的(一段连续的内存)，其逻辑结构是二叉树(完全二叉树)。利用这个特性可以将数组看成一个二叉树，然后进行建堆操作。（大堆的父结点大于左右孩子结点，小堆的父结点小于左右孩子结点），然后每次取出堆顶的数再重新建堆。(升序建大堆，降序建小堆)。leftChild = parent*2+1，rightChile = parent*2+2。</p></li><li><p>示意图</p><p><img src="http://img.3amupupup.online/BuildBigHeap.png" alt="建大堆"></p><p><img src="http://img.3amupupup.online/BuildArrayToHeap.png" alt="建堆完成后的效果"></p><p><img src="http://img.3amupupup.online/SortByHeap.png" alt="利用堆特性排序"></p><p><img src="http://img.3amupupup.online/HeapSort.gif" alt="堆排序"></p></li><li><p>实现</p><pre><code class="c">void Swap(int* a, int* b){    int temp = *a;    *a = *b;    *b= temp;}void AdJustDown(int* arr, int root, int arrSize) // 建堆{    int parent = root;    int child = parent*2 + 1;    while (child &lt; arrSize)    {        if (child+1 &lt; arrSize &amp;&amp; arr[child+1] &gt; arr[child])        {            child++;        }        if(arr[parent] &lt; arr[child])        {            Swap(&amp;arr[parent],&amp;arr[child]);            parent = child;            child = parent*2+1;        }        else        {            break;        }    }}void HeapSort(int* arr, int arrSize){    for (int i = (arrSize-1-1)/2; i &gt;=0 ; --i)    {        AdJustDown(arr,i,arrSize);    }    int end = arrSize-1;    while (end &gt; 0)    {        Swap(&amp;arr[end],&amp;arr[0]);        AdJustDown(arr,0,end);        end--;    }}</code></pre></li></ol><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><ol><li><p>排序思想(升序)</p><p>左右两个指针left、right，取一个key值。左右开始向右向左遍历，左指针遇见比key大的数停止移动，右指针遇见比key小的数停止移动，此时交换左右指针对应的值，直到左右指针重合。此时key左边的值全比key小，右边的值全比key大。再通过分治思想对key左右两边的区间进行递归操作。</p></li><li><p>示意图</p><p><img src="http://img.3amupupup.online/QuickSortt.png" alt="快速排序"></p><p><img src="http://img.3amupupup.online/RecursionForQuickSort.png" alt="分治思想"></p><p><img src="http://img.3amupupup.online/QuickSortTime1.png" alt="时间复杂度"></p><p><img src="http://img.3amupupup.online/QuickSOrt.gif" alt="快速排序"></p></li><li><p>代码实现</p><pre><code class="c">/* * 三数取中 * 在数组有序时(假设是降序),keyIndex每次都是最小的数的下标 * 会导致快排变成一个N^2的算法,三数取中能有效避免这个缺陷。 */int GetMidIdx(int* arr ,int left, int right){    int mid = (left+right)/2;    if (arr[left] &lt; arr[mid])    {        if (arr[mid] &lt; arr[right])            return mid;        else if (arr[left] &gt; arr[right])            return left;        else            return right;    }    else    {        if (arr[mid] &gt; arr[right])            return mid;        else if (arr[left] &lt; arr[right])            return left;        else            return right;    }}int Part(int* arr, int left, int right){    int midIndex = GetMidIdx(arr,left,right); // 找出中位数    Swap(&amp;arr[midIndex],&amp;arr[right]);    int keyIndex = right;    while(left &lt; right)    {        while(left &lt; right &amp;&amp; arr[left] &lt;= arr[keyIndex]) // 因为是left先移动,所以left的最终停留位置的数一定比keyIndex大            left++;        while(left &lt; right &amp;&amp; arr[right] &gt;= arr[keyIndex])            right--;        Swap(&amp;arr[left], &amp;arr[right]); // 循环走到这里时,left位置的数比keyIndex大,right位置的数比keyIndex小,对它们进行交换    }    Swap(&amp;arr[keyIndex], &amp;arr[left]); // left最终停止的位置和keyIndex进行交换,此时left的左边全是比选出的keyIndex小的数,右边全是比keyIndex大的数。    return left; // 必须返回left,下一次排序时就可以排除掉left，对left左右的两边的数进行排序}void QuickSort(int* arr, int left, int right){    if(left &lt; right)    {        int div = Part(arr,left,right);        QuickSort(arr,left,div-1);        QuickSort(arr,div+1,right);    }}void QuickSortNoR(int* arr, int left, int right){    Stack st;    StackInit(&amp;st);    StackPush(&amp;st,left); // 注意进栈顺序,先进的后被取出来    StackPush(&amp;st,right);    while(!StackEmpty(&amp;st)) // 栈不为空说明还存在没被排序的区间则要继续循环    {        int _right = StackTop(&amp;st);        StackPop(&amp;st);        int _left = StackTop(&amp;st);        StackPop(&amp;st);        int div = Part(arr,_left,_right);        if(div+1 &lt; _right)        {            StackPush(&amp;st,div+1); // 保证入栈顺序和第一次一致            StackPush(&amp;st,_right);        }        if(_left &lt; div-1)        {            StackPush(&amp;st,_left);            StackPush(&amp;st,div-1);        }    }    StackDestory(&amp;st);}</code></pre></li></ol><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><ol><li><p>排序思想</p><p>合并有序数组</p></li><li><p>示意图</p><p><img src="http://img.3amupupup.online/MergeSort.png" alt="归并排序"></p><p><img src="http://img.3amupupup.online/MergeSortNoR.png" alt="非递归"></p><p><img src="http://img.3amupupup.online/MergeSort.gif" alt="归并排序"></p></li><li><p>实现</p><pre><code class="c">// 将数组分割成N个有序小区间(1个数的区间，一个数也算有序)，再合并有序的数组void _MergeSort(int* arr,int left, int right, int* tmp){    if(left&gt;=right) // 分割退出的条件        return;    int mid = (left+right)/2; // 拿到中间位置的索引，下一步递归分割，直到不可分为止(分割到只有一个数)    _MergeSort(arr,left,mid,tmp); // 递归分割左半边    _MergeSort(arr,mid+1,right,tmp); // 递归分割右半边    int begin1 = left, end1 = mid; // 走到这里说明已经分割完了，分成了right+1个一个元素的数组    int begin2 = mid+1, end2 = right;    int index = begin1; // tmp区间起始位置    while (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2) // 归并有序数组    {        if (arr[begin1] &lt; arr[begin2])        {            tmp[index++] = arr[begin1++];        }        else        {           tmp[index++] = arr[begin2++];        }    }    while (begin1&lt;=end1)        tmp[index++] = arr[begin1++];    while (begin2&lt;=end2)        tmp[index++] = arr[begin2++];    for (int i = left; i &lt;= right; ++i) // 拷贝回原数组，拷贝一定是 &lt;= 闭区间，因为right传入的是闭区间    {        arr[i] = tmp[i];    }}// 归并，递归实现void MergeSort(int* arr, int arrSize){    int* tmp = malloc(sizeof(int)*arrSize);    _MergeSort(arr,0,arrSize-1,tmp);    free(tmp);}// 归并，非递归实现void _MergeSortNoR(int* arr, int begin1, int end1, int begin2, int end2, int* tmp){    PrintArr(arr,10);    int left = begin1,right = end2; // 这里必须使用新变量记录数组的起始结束位置，因为经过迭代后begin1会自增    int index = begin1; // tmp区间起始位置    while (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2) // 归并有序数组    {        if (arr[begin1] &lt; arr[begin2])        {            tmp[index++] = arr[begin1++];        }        else        {            tmp[index++] = arr[begin2++];        }    }    while (begin1&lt;=end1)        tmp[index++] = arr[begin1++];    while (begin2&lt;=end2)        tmp[index++] = arr[begin2++];    for (int i = left; i &lt;= right; ++i)    {        arr[i] = tmp[i];    }}void MergeSortNoR(int* arr, int arrSize){    int* tmp = (int*)malloc(sizeof(int)*arrSize);    int gap = 1;    while (gap&lt;arrSize)    {        for (int i = 0; i &lt; arrSize; i+=2*gap)        {            // [i,i+gap-1] [i+gap, i+2*gap-1]            int begin1 = i, end1 = i+gap-1, begin2 = i+gap, end2 =i+gap*2-1;            if (begin2 &gt;= arrSize) // begin2大于等于数组长度时说明只存在一组数据(无法分割成两组)                break;            if (end2&gt;=arrSize) // end2大于等于数组长度则说明无法分割成均等的两组，end2超出了数组的范围                end2 = arrSize-1; // 所以需要调整end2的位置，使其不能超出数组范围            _MergeSortNoR(arr,begin1,end1,begin2,end2,tmp);        }        gap*=2;    }    free(tmp);}</code></pre></li></ol><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><ol><li><p>思想</p><p>记录一个序列中数字出现的次数。</p><p>找出序列中的最大值 max 然后创建一个size为max+1的tmp数组，遍历数据序列，拿序列中的值做tmp数组的下标，tmp对应下标的值进行++ 计数。遍历结束后，依次从tmp中取值拷贝到原序列中，tmp的下标作为序列的值，tmp下标对应的值作为拷贝的次数。</p></li><li><p>示意图</p><p><img src="http://img.3amupupup.online/CountSort.png" alt="计数排序"></p><p><img src="http://img.3amupupup.online/849589-20171015231740840-6968181.gif" alt="计数排序"></p></li><li><p>实现</p><pre><code class="c">void CountSort(int* arr, int arrSize){    int min = arr[0];     int max = arr[0]; // 找出最大最小的值    for (int i = 0; i &lt; arrSize; ++i)    {        if (arr[i] &gt; max)        {            max = arr[i];        }        if (arr[i] &lt; min)        {            min = arr[i];        }    }    int range = max-min+1; // 创建一个range+1大小的数组，利用相对位置存储计数，还原时tmp数组下标加上min就是原数组的值    int* countArray = (int*)malloc(sizeof(int)*range);    if (!countArray)    {        printf(&quot;malloc failed.\n&quot;);        exit(-1);    }    memset(countArray,0,sizeof(int)*range);    for (int i = 0; i &lt; arrSize; ++i)    {        countArray[arr[i]-min]++;    }    int index = 0;    for (int i = 0; i &lt; range; ++i)    {        while (countArray[i]--)        {            arr[index++] = i+min;        }    }    free(countArray);}</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;排序思想&lt;/p&gt;
&lt;p&gt;一个无序数列，从第一个数开始，循环比较相邻两个数的大小，如果前一个数大于后一个数则</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="排序" scheme="https://duwei19961021.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>带环链表</title>
    <link href="https://duwei19961021.github.io/2021/03/18/%E5%B8%A6%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    <id>https://duwei19961021.github.io/2021/03/18/%E5%B8%A6%E7%8E%AF%E9%93%BE%E8%A1%A8/</id>
    <published>2021-03-18T03:09:52.077Z</published>
    <updated>2021-03-18T03:09:52.077Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、判断链表是否带环"><a href="#1、判断链表是否带环" class="headerlink" title="1、判断链表是否带环"></a>1、<a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">判断链表是否带环</a></h4><h5 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h5><ol><li><p>给链表设置两个指针，slow移动一步，fast移动两步。</p><p><img src="/image/image-20201227013251253.png" alt="初始状态"></p></li><li><p>fast和slow指针都进入环之后</p><p><img src="/image/image-20201227013617501.png" alt="fast、slow进环"></p></li><li><p>fast和slow指针重合</p><p>在slow和fast都进环之后，fast开始追slow。slow移动一步，fast移动两步。</p><p><img src="/image/image-20201227014743194.png" alt="指针追赶"></p><p>每一次移动fast和slow之间的距离缩短一步，最终重合，则证明有环。如果fast指针在经过若干次移动之后为NULL(循环结束)，则说明不带环。</p><p><img src="/image/image-20201227013919844.png" alt="指针重合"></p></li><li><p>代码：</p><pre><code class="c">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     struct ListNode *next; * }; */bool hasCycle(struct ListNode *head) {    struct ListNode *slow = head;    struct ListNode *fast = head;    while(fast &amp;&amp; fast-&gt;next)    {        slow = slow-&gt;next;        fast = fast-&gt;next-&gt;next;        if (slow == fast)        {            return true;        }    }    return false;}</code></pre></li></ol><h4 id="2、带环链表的入环结点"><a href="#2、带环链表的入环结点" class="headerlink" title="2、带环链表的入环结点"></a>2、<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">带环链表的入环结点</a></h4><h5 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h5><ol><li><p>给链表设置两个指针，slow移动一步，fast移动两步。</p><p><img src="/image/image-20201227132753055.png" alt="初始状态"></p></li><li><p>slow在进入环之后，在一个C之内就会被fast追上(fast的速度是slow的两倍)。</p><p>slow走的距离是：L+X</p><p>fast走的距离是 ：L+N*C+X (如果L足够长环足够小，fast进环且绕环N次之后slow才会进入)</p><p>2*(L+X) = L+N*C+X =&gt; L = N*C -X</p><p>然后同时从head和fast位置开始遍历，找到相同的节点。</p><p><img src="/image/image-20201227154937844.png" alt="slow、fast重合"></p></li><li><p>代码：</p><pre><code class="c">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     struct ListNode *next; * }; */struct ListNode *detectCycle(struct ListNode *head) {    struct ListNode *slow = head;    struct ListNode *fast = head;    while(fast &amp;&amp; fast-&gt;next) // 遍历链表，找到slow与fast重合的点    {        slow = slow-&gt;next;        fast = fast-&gt;next-&gt;next;        if(fast == slow)        {            break;        }    }    if(!fast || !fast-&gt;next) // 判断上一步循环时因为遍历到NULL结束的还是因为 fast==slow 结束的    {        return NULL; // 如果fast或者fast-&gt;next为NULL说明链表不带环，直接返回NULL    }    while(fast &amp;&amp; head) // 遍历寻找相交结点    {        if(fast == head)        {            return fast;        }        fast = fast-&gt;next;        head = head-&gt;next;    }    return NULL;}</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、判断链表是否带环&quot;&gt;&lt;a href=&quot;#1、判断链表是否带环&quot; class=&quot;headerlink&quot; title=&quot;1、判断链表是否带环&quot;&gt;&lt;/a&gt;1、&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="数据结构" scheme="https://duwei19961021.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ECS磁盘扩容</title>
    <link href="https://duwei19961021.github.io/2021/03/18/ECS%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
    <id>https://duwei19961021.github.io/2021/03/18/ECS%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</id>
    <published>2021-03-18T03:09:52.075Z</published>
    <updated>2021-03-18T03:09:52.076Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1、通过-df-h-知根分区大小为40G。"><a href="#1、通过-df-h-知根分区大小为40G。" class="headerlink" title="1、通过 df -h 知根分区大小为40G。"></a>1、通过 df -h 知根分区大小为40G。</h6><p><img src="/image/image-20200512133700547.png" alt="image-20200512133700547"></p><h6 id="2、在阿里云后台对当前ECS实例的磁盘进行在线扩容。"><a href="#2、在阿里云后台对当前ECS实例的磁盘进行在线扩容。" class="headerlink" title="2、在阿里云后台对当前ECS实例的磁盘进行在线扩容。"></a>2、在阿里云后台对当前ECS实例的磁盘进行在线扩容。</h6><p><img src="/image/image-20200512134218782.png" alt="image-20200512134218782"></p><h6 id="3、扩容后登陆ECS使用fdisk-l查看磁盘大小，磁盘已经扩容到100G。"><a href="#3、扩容后登陆ECS使用fdisk-l查看磁盘大小，磁盘已经扩容到100G。" class="headerlink" title="3、扩容后登陆ECS使用fdisk -l查看磁盘大小，磁盘已经扩容到100G。"></a>3、扩容后登陆ECS使用fdisk -l查看磁盘大小，磁盘已经扩容到100G。</h6><p><img src="/image/image-20200512134102595.png" alt="image-20200512134102595"></p><h6 id="4、安装growpart"><a href="#4、安装growpart" class="headerlink" title="4、安装growpart"></a>4、安装growpart</h6><pre><code class="shell">[root@iZbp1e8z3uz7pmqbsis8bkZ ~]# yum -y install cloud-utils-growpartLoaded plugins: fastestmirrorbase                                                     | 3.6 kB     00:00epel                                                     | 4.7 kB     00:00extras                                                   | 2.9 kB     00:00updates                                                  | 2.9 kB     00:00(1/7): base/7/x86_64/group_gz                              | 153 kB   00:00(2/7): extras/7/x86_64/primary_db                          | 190 kB   00:00(3/7): epel/x86_64/group_gz                                |  95 kB   00:00(4/7): updates/7/x86_64/primary_db                         | 176 kB   00:00(5/7): epel/x86_64/updateinfo                              | 1.0 MB   00:00(6/7): base/7/x86_64/primary_db                            | 6.1 MB   00:00(7/7): epel/x86_64/primary_db                              | 6.8 MB   00:00Determining fastest mirrors * base: mirrors.cloud.aliyuncs.com * epel: mirrors.cloud.aliyuncs.com * extras: mirrors.cloud.aliyuncs.com * updates: mirrors.cloud.aliyuncs.comResolving Dependencies--&gt; Running transaction check---&gt; Package cloud-utils-growpart.noarch 0:0.29-5.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================ Package                     Arch          Version            Repository   Size================================================================================Installing: cloud-utils-growpart        noarch        0.29-5.el7         base         27 kTransaction Summary================================================================================Install  1 PackageTotal download size: 27 kInstalled size: 61 kDownloading packages:cloud-utils-growpart-0.29-5.el7.noarch.rpm                 |  27 kB   00:00Running transaction checkRunning transaction testTransaction test succeededRunning transaction  Installing : cloud-utils-growpart-0.29-5.el7.noarch                       1/1  Verifying  : cloud-utils-growpart-0.29-5.el7.noarch                       1/1Installed:  cloud-utils-growpart.noarch 0:0.29-5.el7Complete!</code></pre><h6 id="5、扩展-dev-vda1分区（命名含义为扩展-dev-vda磁盘的第一个分区）。"><a href="#5、扩展-dev-vda1分区（命名含义为扩展-dev-vda磁盘的第一个分区）。" class="headerlink" title="5、扩展/dev/vda1分区（命名含义为扩展/dev/vda磁盘的第一个分区）。"></a>5、扩展/dev/vda1分区（命名含义为扩展/dev/vda磁盘的第一个分区）。</h6><pre><code class="shell">[root@iZbp1e8z3uz7pmqbsis8bkZ ~]# growpart /dev/vda 1CHANGED: partition=1 start=2048 old: size=83881984 end=83884032 new: size=209713119 end=209715167</code></pre><p>​     若报错unexpected output in sfdisk –version……..则运行LANG=en_US.UTF-8切换ECS实例的字符编码类型。</p><p>6、运行resize2fs <PartitionName> 命令调用resize2fs扩容文件系统。</p><pre><code class="shell">[root@iZbp1e8z3uz7pmqbsis8bkZ ~]# resize2fs /dev/vda1resize2fs 1.42.9 (28-Dec-2013)Filesystem at /dev/vda1 is mounted on /; on-line resizing requiredold_desc_blocks = 3, new_desc_blocks = 7The filesystem on /dev/vda1 is now 26214139 blocks long.[root@iZbp1e8z3uz7pmqbsis8bkZ ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        99G  1.5G   93G   2% /devtmpfs        487M     0  487M   0% /devtmpfs           497M     0  497M   0% /dev/shmtmpfs           497M  308K  496M   1% /runtmpfs           497M     0  497M   0% /sys/fs/cgrouptmpfs           100M     0  100M   0% /run/user/0</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;1、通过-df-h-知根分区大小为40G。&quot;&gt;&lt;a href=&quot;#1、通过-df-h-知根分区大小为40G。&quot; class=&quot;headerlink&quot; title=&quot;1、通过 df -h 知根分区大小为40G。&quot;&gt;&lt;/a&gt;1、通过 df -h 知根分区大小为40G。</summary>
      
    
    
    
    <category term="运维" scheme="https://duwei19961021.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="ecs" scheme="https://duwei19961021.github.io/tags/ecs/"/>
    
  </entry>
  
  <entry>
    <title>linux性能优化实战笔记</title>
    <link href="https://duwei19961021.github.io/2021/03/18/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://duwei19961021.github.io/2021/03/18/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-18T03:09:52.075Z</published>
    <updated>2021-03-18T03:09:52.075Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01、平均负载"><a href="#01、平均负载" class="headerlink" title="01、平均负载"></a>01、平均负载</h4><p>平均负载：系统出于可运行状态<font size=2 color=red>（正在使用cpu或者正在等待cpu的进程，也就是ps命令看到的Running 或 Runnable状态的进程）</font>和不可中断状态<font size=2 color=red>（进程正在处于内核态关键流程中的进程，这些流程是不可打断的，例如等待硬件设备的I/O响应，也就是ps命令看到的D状态。比如，当一个进程向磁盘读写数据时，为了保证数据的一致性，在得到磁盘回复前，它是不能被其他进程或者中断打断的，这个时候的进程就处于不可中断状态。如果此时的进程被打断了，就容易出现磁盘数据与进程数据不一致的问题。所以，不可中断状态实际上是系统对进程和硬件设备的一种保护机制。）</font>的平均进程数，也就是平均活跃进程数。</p><pre><code class="shell">#观察进程的cpu使用情况，间隔一秒输出一次pidstat  -u 1#观察cpu使用情况，观察各状态占比mpstat -P ALL  1</code></pre><h4 id="02、CPU-上下文切换"><a href="#02、CPU-上下文切换" class="headerlink" title="02、CPU 上下文切换"></a>02、CPU 上下文切换</h4><p>CPU 寄存器：是 CPU 内置的容量小、但速度极快的内存。</p><p>程序计数器：则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。</p><p>它们都是 CPU 在运行任何任务前，必须的依赖环境，因此也被叫做 CPU 上下文。</p><p>CPU 上下文切换，就是先把前一个任务的 CPU 上下文（也就是 CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。</p><p>上下文切换情景：</p><p>① 系统调用，cpu寄存器里原来用户态的指令位置，需要先保存起来，接着为了执行内核态的代码，cpu寄存器需要更新为内核态指令的最新位置，最后才是跳转到内核态运行内核任务，系统调用结束后cpu需要恢复到原来保存的用户态，继续运行进程。so，一次系统调用发生了两次cpu上下文切换。（<font size=2 color=red>系统调用过程中，并不会涉及到虚拟内存等进程用户态的资源，也不会切换进程。这跟我们通常所说的进程上下文切换是不一样的</font>）</p><p>进程上下文切换，是指从一个进程切换到另一个进程运行。而系统调用过程中一直是同一个进程在运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;01、平均负载&quot;&gt;&lt;a href=&quot;#01、平均负载&quot; class=&quot;headerlink&quot; title=&quot;01、平均负载&quot;&gt;&lt;/a&gt;01、平均负载&lt;/h4&gt;&lt;p&gt;平均负载：系统出于可运行状态&lt;font size=2 color=red&gt;（正在使用cpu或者正在等</summary>
      
    
    
    
    <category term="运维" scheme="https://duwei19961021.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux性能优化实战笔记" scheme="https://duwei19961021.github.io/tags/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一次海外k8s集群代码发布实践</title>
    <link href="https://duwei19961021.github.io/2021/03/18/%E4%B8%80%E6%AC%A1%E6%B5%B7%E5%A4%96k8s%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E5%AE%9E%E8%B7%B5/"/>
    <id>https://duwei19961021.github.io/2021/03/18/%E4%B8%80%E6%AC%A1%E6%B5%B7%E5%A4%96k8s%E9%9B%86%E7%BE%A4%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-03-18T03:09:52.074Z</published>
    <updated>2021-03-18T03:09:52.074Z</updated>
    
    <content type="html"><![CDATA[<p>项目背景：要上一个海外版的小说平台，gitlab在国内，当前是要求在海外搭建一个测试环境(php代码)</p><h3 id="第一阶段："><a href="#第一阶段：" class="headerlink" title="第一阶段："></a>第一阶段：</h3><p>话不多说，在香港买了台机器，down了个oneinstack脚本装环境，环境具体为mysql+redis+php-fpm7.1.3+nginx。</p><p>jenkins+gitlab都是在国内，也没多想直接在jenkins创建了一个工程，使用ssh-server插件将构建好的代码push到香港机器。问题来了，因为机器是在香港，在jenkins push代码的时候巨慢无比，每一次发布起码花费十分钟以上的时间，严重影响开发效率。</p><h3 id="第二阶段："><a href="#第二阶段：" class="headerlink" title="第二阶段："></a>第二阶段：</h3><p>想到了用容器的方式发布，思路是这样：在杭州机器上将镜像构建好，然后push到香港仓库去，因为镜像push的时候会进行压缩，另外push到香港仓库之后那边机器拉取代码的速度会大大提升，缩短了发布时间（这是为以后生产发布做考虑，代码同步慢，有些文件更新有些文件没更新可能会造成线上报错的）。于是开始构建基础镜像，编写<a href="http://127.0.0.1:4000/2020/07/28/Dockerfile/" target="_blank" rel="noopener">Dockerfile</a>。</p><p>编写dockerfile：①保证镜像精简 ②尽量减少镜像的层数，将底层环境固定。</p><p>nginx和php-fpm基础镜像构建完成后使用jenkins进行打包代码到镜像里，使用的pipeline脚本。</p><p>第二阶段使用的是docker compose，因此每一次更新都需要登录香港机器手动拉取并更新镜像，比较麻烦，所以很快就放弃了这种方式</p><h3 id="第三阶段："><a href="#第三阶段：" class="headerlink" title="第三阶段："></a>第三阶段：</h3><p>考虑使用k8s，于是在香港买了个k8s集群，两个2c4g的节点，外加一台2c4g的机器作为数据库机器（redis+mysql），后续正式上线之后再考虑扩容。</p><p>问题：</p><p>​    1、nginx容器和php-fpm容器需要共享代码才能正常提供服务。</p><p>​    解决：首先想到的是每次发布构建两个镜像，即将代码分别拷贝进nginx和php容器，然后通过deployment去运行，但是这种方法太麻烦，因为没次都需要重新更新php和nginx容器，这两个镜像的体积加起来差不多有800M了，所以不考虑这种方式。</p><p>​                于是使用了deployment控制器中的volume —- emptydir共享卷，代码使用一个initcontainer拷贝进去。这样的话我每次只需要更新initcontainer(initcontainer不需要什么环境，使用的busybox，基础镜像才几M，加上代码也就30M左右，这样的话大大提高了镜像构建、推送、拉取的速度)。</p><p>使用pipeline构建代码容器：</p><pre><code class="yaml">pipeline {   agent any   stages {      stage(&#39;pull code&#39;) {         steps {            checkout([$class: &#39;GitSCM&#39;, branches: [[name: &#39;*/test&#39;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &#39;11&#39;, url: &#39;http://xxxxx.xxxxxxx.com/xxxxx/xxxxxxx_api.git&#39;]]])         }      }      stage(&#39;build image&#39;){          steps {              sh &#39;wget http://172.16.72.173/leshuapi/.dockerignore -O .dockerignore&#39;              sh &#39;wget http://172.16.72.173/leshuapi/Dockerfile -O Dockerfile&#39;              sh &#39;sudo docker build -t registry.cn-hongkong.aliyuncs.com/ysg_codebox/$JOB_BASE_NAME:latest .&#39;          }      }      stage(&#39;push image&#39;){          steps {              timeout(time: 3, unit: &#39;MINUTES&#39;){                  retry(5) {                      sh &#39;docker push registry.cn-hongkong.aliyuncs.com/ysg_codebox/$JOB_BASE_NAME:latest&#39;                  }              }          }      }   }}</code></pre><p>deployment.yaml内容如下：</p><pre><code class="yaml">---apiVersion: extensions/v1beta1kind: Deploymentmetadata:  name: leshuapispec:  replicas: 2  template:    metadata:      labels:        app: leshuapp    spec:      dnsPolicy: Default      shareProcessNamespace: true      imagePullSecrets:        - name: regsecret      initContainers:      - name: copycode        #代码容器        image: registry.cn-hongkong.aliyuncs.com/ysg_codebox/xxxxxxxxx:latest        imagePullPolicy: Always        command: [&quot;mv&quot;,&quot;/data/wwwroot/&quot;,&quot;/data/www/&quot;]        volumeMounts:        - name: www          mountPath: /data/www      - name: chown        image: registry.cn-hongkong.aliyuncs.com/ysg_baseimage/xxxxbox:v2        imagePullPolicy: IfNotPresent        command: [&quot;chown&quot;,&quot;-R&quot;,&quot;www.www&quot;,&quot;/data/www/&quot;]        volumeMounts:        - name: www          mountPath: /data/www      containers:        - name: nginx          image: registry.cn-hongkong.aliyuncs.com/ysg_baseimage/nginx:v3          imagePullPolicy: IfNotPresent          securityContext:            capabilities:              add:              - SYS_PTRACE          stdin: true          tty: true          resources:            requests:              memory: 200Mi              cpu: 100m            limits:              memory: 300Mi              cpu: 200m          ports:            - containerPort: 80          livenessProbe:            tcpSocket:              port: 80          command: [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]          volumeMounts:            - name: www              mountPath: /data/www            - name: logs              mountPath: /data/logs/            - name: nginx-conf              mountPath: /etc/nginx/conf.d/            - name: env              mountPath: /data/www/wwwroot/env/        - name: php-fpm          image: registry.cn-hongkong.aliyuncs.com/ysg_baseimage/php-fpm:v2          imagePullPolicy: IfNotPresent          securityContext:            capabilities:              add:              - SYS_PTRACE          stdin: true          tty: true          resources:            requests:              memory: 200Mi              cpu: 100m            limits:            memory: 300Mi              cpu: 200m          ports:            - containerPort: 9000          livenessProbe:            tcpSocket:              port: 9000          command: [&quot;/usr/local/php/sbin/php-fpm&quot;,&quot;-F&quot;]          volumeMounts:            - name: www              mountPath: /data/www            - name: logs              mountPath: /data/logs/            - name: phpfpm-conf              mountPath: /usr/local/php/etc/php-fpm.d/            - name: env              mountPath: /data/www/wwwroot/env/      volumes:      - name: www        emptyDir: {}      - name: logs        emptyDir: {}      - name: nginx-conf        configMap:          name: leshuapi-nginx-conf          items:           - key: server.conf             path: server.conf      - name: phpfpm-conf        configMap:          name: leshuapi-phpfpm-conf          items:           - key: www.conf             path: www.conf      - name: env        configMap:          name: leshuapi-env          items:           - key: .env             path: .env---apiVersion: v1kind: Servicemetadata:  name: leshuapiservicespec:  ports:  - protocol: TCP    port: 80    targetPort: 80  selector:    app: leshuapp</code></pre><p>镜像里的项目配置文件、nginx配置文件、php-fpm的配置文件全部通过configmap挂载出来方便修改，具体yaml省略。</p><p>配置文件结构：</p><p><img src="/image/image-20201016181209870.png" alt="image-20201016181209870"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目背景：要上一个海外版的小说平台，gitlab在国内，当前是要求在海外搭建一个测试环境(php代码)&lt;/p&gt;
&lt;h3 id=&quot;第一阶段：&quot;&gt;&lt;a href=&quot;#第一阶段：&quot; class=&quot;headerlink&quot; title=&quot;第一阶段：&quot;&gt;&lt;/a&gt;第一阶段：&lt;/h3&gt;&lt;p</summary>
      
    
    
    
    <category term="k8s" scheme="https://duwei19961021.github.io/categories/k8s/"/>
    
    
    <category term="cicd" scheme="https://duwei19961021.github.io/tags/cicd/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://duwei19961021.github.io/2021/03/18/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://duwei19961021.github.io/2021/03/18/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-03-18T03:09:52.073Z</published>
    <updated>2021-03-18T03:09:52.073Z</updated>
    
    <content type="html"><![CDATA[<h6 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h6><ol><li><p>示意图</p><p><img src="http://img.3amupupup.online/FullBinaryTree.png" alt="满二叉树"></p><p><img src="http://img.3amupupup.online/wanquanBinaryTree.png" alt="完全二叉树"></p></li><li><p>性质</p><ol><li>一个二叉树，如果每一层的结点个数都达到最大值则就是满二叉树。也就是说一个深度为k的二叉树，如果结点总数是(2^k)-1则是满二叉树。</li><li>前k-1层结点个数都是满的(达到最大个数)，最后一层可以不满，但是必须从左到右连续，称为完全二叉树。(满二叉树是特殊的完全二叉树)</li><li>若规定根结点的层数为1，则一棵非空二叉树的第i层至多有2^(i-1)个结点。</li><li>任何一颗二叉树，度为0的结点个数比度为2的结点个数多1。</li><li>对于有N个结点的满二叉树，二叉树的高度 h=log<sub>2</sub><sup>N+1</sup>。</li><li>对于有N个结点的完全二叉树，二叉树的高度 h=log<sub>2</sub><sup>N</sup>+1。</li></ol></li></ol><h6 id="二叉树的顺序存储。"><a href="#二叉树的顺序存储。" class="headerlink" title="二叉树的顺序存储。"></a>二叉树的顺序存储。</h6><ol><li><p>示意图</p><p><img src="http://img.3amupupup.online/BinaryTreeStorageInArray1.png" alt="image-20210125135822359"></p></li><li><p>父亲结点下标是i，则左孩子结点下标为2*i+1、右孩子结点下标</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;示意图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.3amupupup.online/FullBina</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://duwei19961021.github.io/2021/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://duwei19961021.github.io/2021/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2021-03-18T03:09:52.072Z</published>
    <updated>2021-03-18T03:09:52.072Z</updated>
    
    <content type="html"><![CDATA[<p>计算机网络</p><h5 id="三种交换方式："><a href="#三种交换方式：" class="headerlink" title="三种交换方式："></a>三种交换方式：</h5><table><thead><tr><th>交换方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>电路交换</td><td>通信时延小(比特流直达终点)<br />有序传输<br />没有冲突<br />使用范围广(模拟信号、数字信号)<br />实时性强<br />控制简单</td><td>建立连接时间长<br />线路独占，使用效率低<br />灵活性差<br />难以规格化</td></tr><tr><td>报文交换</td><td>无需建立连接(不需要为通信双方事先建立一条专用的通信线路，不存在建立连接的时延。)<br />动态分配线路<br />提高线路可靠性<br />提高线路利用率<br />提供多目标服务</td><td>引起了转发时延<br />需要较大的存储缓存空间<br />需要传输额外的信息量(报头要携带目标地址、源地址等信息)<br /></td></tr><tr><td>分组交换</td><td>无需建立连接<br />线路利用率高<br />简化了存储管理<br />加速传输<br />减少出错概率和重传数据量</td><td>引起了转发时延<br />需要传输额外的信息量<br />对于数据报服务，存在失序、丢失或重复分组的问题；对于虚电路服务，存在呼叫建立、数据传输和虚电路释放三个过程</td></tr></tbody></table><h5 id="计算机网络的定义和分类"><a href="#计算机网络的定义和分类" class="headerlink" title="计算机网络的定义和分类"></a>计算机网络的定义和分类</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计算机网络&lt;/p&gt;
&lt;h5 id=&quot;三种交换方式：&quot;&gt;&lt;a href=&quot;#三种交换方式：&quot; class=&quot;headerlink&quot; title=&quot;三种交换方式：&quot;&gt;&lt;/a&gt;三种交换方式：&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;交换方式&lt;/th&gt;
&lt;th&gt;优</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sonar</title>
    <link href="https://duwei19961021.github.io/2021/03/18/sonar/"/>
    <id>https://duwei19961021.github.io/2021/03/18/sonar/</id>
    <published>2021-03-18T03:09:52.072Z</published>
    <updated>2021-03-18T03:09:52.073Z</updated>
    
    <content type="html"><![CDATA[<pre><code>gitlabBranchgitlabSourceBranchgitlabActionTypegitlabUserNamegitlabUserUsernamegitlabUserEmailgitlabSourceRepoHomepagegitlabSourceRepoNamegitlabSourceNamespacegitlabSourceRepoURLgitlabSourceRepoSshUrlgitlabSourceRepoHttpUrlgitlabMergeRequestTitlegitlabMergeRequestDescriptiongitlabMergeRequestIdgitlabMergeRequestIidgitlabMergeRequestStategitlabMergedByUsergitlabMergeRequestAssigneegitlabMergeRequestLastCommitgitlabMergeRequestTargetProjectIdgitlabTargetBranchgitlabTargetRepoNamegitlabTargetNamespacegitlabTargetRepoSshUrlgitlabTargetRepoHttpUrlgitlabBeforegitlabAftergitlabTriggerPhrase</code></pre><pre><code class="java">pipeline {   agent any   stages {      stage(&#39;pull code&#39;) {         steps {            checkout([$class: &#39;GitSCM&#39;, branches: [[name: &#39;*/release.test&#39;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &#39;11&#39;, url: &#39;http://xxxx.xxxxxx.com:8888/xxxx/xxxxxx.git&#39;]]])         }      }      stage(&#39;SonarQube&#39;) {            steps{                sh &quot;sonar-scanner -X -Dsonar.host.url=http://172.16.72.182:8888/ -Dsonar.language=php -Dsonar.projectVersion=$BUILD_NUMBER -Dsonar.sources=./app -Dsonar.sourceEncoding=UTF-8  -Dsonar.projectName=$JOB_BASE_NAME -Dsonar.projectKey=$JOB_BASE_NAME -Dsonar.login=a65d0c254cfxx2ax013bcxe93xb8xg13f25b2407&quot;         }      }  }}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;gitlabBranch
gitlabSourceBranch
gitlabActionType
gitlabUserName
gitlabUserUsername
gitlabUserEmail
gitlabSourceRepoHomepage
gitla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>汇编笔记</title>
    <link href="https://duwei19961021.github.io/2021/03/18/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/"/>
    <id>https://duwei19961021.github.io/2021/03/18/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-18T03:09:52.070Z</published>
    <updated>2021-03-18T03:09:52.071Z</updated>
    
    <content type="html"><![CDATA[<p>AX = AH + AL</p><p>BX = BH + BL</p><p>CX = CH + CL</p><p>DX = DH + DL</p><p>数据寄存器</p><p>段地址寄存器：偏移地址寄存器</p><p>DS    SP</p><p>ES    BP</p><p>SS    SI</p><p>CS    DI</p><p>​         IP(和指令有关)</p><p>​         BX</p><p>u指令：将内存某个地址开始的字节全部当做指令</p><p>d指令：将某个内存地址开始的字节全部当做数据</p><p>指令和数据在内存中是没有区别的</p><p>cpu中的cs段地址寄存器和ip这个偏移地址寄存器组合的时候，从中读取的内容当作指令来执行</p><p>指令是有长度的，一条指令可以由多个字节构成</p><p>执行过程：</p><p>1、cpu从cs:ip所指向的内存单元读取指令，存放到指令缓存器中</p><p>2、ip = ip+所读指令的长度，从而指向下一条指令</p><p>3、执行指令缓存器中的内容，毁到步骤1</p><p>汇编指令 jmp</p><p>转移指令，可以修改cs和ip这两个寄存器 决定了cpu从哪里读取指令</p><p>debug调试工具：</p><ul><li><p>r：可以查看和改变寄存器中的内容</p><p><img src="/Users/duwei/Desktop/source/image/image-20201102234009082.png" alt="image-20201102234009082"></p><p><img src="/Users/duwei/Desktop/source/image/image-20201102234134627.png" alt="image-20201102234134627"></p></li><li><p>d：可以查看内存中的内容</p><p><img src="/Users/duwei/Desktop/source/image/image-20201102234450730.png" alt="image-20201102234450730"></p></li></ul><ul><li><p>u：可以将内存中的机器指令翻译成汇编指令 u:地址</p><p><img src="/Users/duwei/Desktop/source/image/image-20201102234935752.png" alt="image-20201102234935752"></p></li><li><p>a：向内存写入一条汇编指令</p><p><img src="/Users/duwei/Desktop/source/image/image-20201102235151996.png" alt="image-20201102235151996"></p></li><li><p>t：执行当前cs:ip所指向的机器指令</p></li><li><p>e：可以改写内存中的内容</p><p><img src="/Users/duwei/Desktop/source/image/image-20201102235637216.png" alt="image-20201102235637216"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;AX = AH + AL&lt;/p&gt;
&lt;p&gt;BX = BH + BL&lt;/p&gt;
&lt;p&gt;CX = CH + CL&lt;/p&gt;
&lt;p&gt;DX = DH + DL&lt;/p&gt;
&lt;p&gt;数据寄存器&lt;/p&gt;
&lt;p&gt;段地址寄存器：偏移地址寄存器&lt;/p&gt;
&lt;p&gt;DS    SP&lt;/p&gt;
&lt;p&gt;ES    </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>进程</title>
    <link href="https://duwei19961021.github.io/2021/03/18/%E8%BF%9B%E7%A8%8B/"/>
    <id>https://duwei19961021.github.io/2021/03/18/%E8%BF%9B%E7%A8%8B/</id>
    <published>2021-03-18T03:09:52.070Z</published>
    <updated>2021-03-18T03:09:52.070Z</updated>
    
    <content type="html"><![CDATA[<h4 id="fork"><a href="#fork" class="headerlink" title="fork:"></a>fork:</h4><p>fork()函数man手册：</p><ul><li>fork函数通过调用它的进程复制出一个新的进程(谁调用它复制谁，准确说是共享（比如代码段），对于私有数据采用写时复制机制)。</li><li>子进程的父进程id与父进程相同</li><li>子进程不继承父进程的内存锁</li><li>子进程的资源利用率和cpu使用时间计数会被置0。</li><li>子进程信号集为空(进程运行过程中收到的信号都会保存在一个集合中)。</li><li>子进程不继承父进程的信号量(引自百度百科：<a href="https://baike.baidu.com/item/信号量/9807501" target="_blank" rel="noopener">信号量</a>的值与相应资源的使用情况有关，当它的值大于 0 时，表示当前可用的资源数的数量；当它的值小于 0 时，其绝对值表示等待使用该资源的进程个数。信号量的值仅能由 PV 操作来改变。)</li><li>子进程不继承父进程的记录锁(The child does not inherit record locks from its parent (fcntl(2)))</li><li>子进程不继承父进程的计时器。</li></ul><p>fork调用的一个奇妙之处就是它仅仅被调用一次但是返回两次：</p><p><img src="http://img.3amupupup.online/do_fork.png" alt="do_fork"></p><p>为什么能返回两次：父进程创建子进程时，子进程共享父进程上下文，其中上下文包含程序计数器，它里面存储的是程序要执行的下一条cpu指令。程序执行到return之前，子进程已完成创建，并且通过wake_up_new_task函数将子进程添加到可调度队列中去了，此时子进程共享父进程的程序计数器，它们的程序计数器里的指令都指向tracehook_report_clone_complete函数，因此当子进程拿到cpu时，会从tracehook_report_clone_complete开始执行直至return。因此调用fork函数会有两次返回，一次是父进程中另一次是在子进程中。</p><p>函数，当子进程拿到cpu时，会执行程序计数器中的指令即return，所以fork函数会返回两次，一次是在父进程中，一次是在子进程中)。</p><p>它可能有三种不同的返回值：</p><ol><li>在父进程中，fork()返回新创建的子进程的pid。</li><li>在子进程中，fork()返回0。</li><li>如果fork()出现错误，返回一个负值。</li></ol><p>在fork函数执行完毕之后，如果创建进程成功，则出现两个进程，一个是子进程一个是父进程。在父进程中返回新创建子进程的pid，在子进程中返回0，可以通过fork返回值判断当前进程是父进程还是子进程。</p><p>另外根据程序的输出信息：父进程中的age结果为-1，子进程中的age为1，但是age的地址在父子进程中相同。父进程和子进程共享内存，但是不共享私有数据，使用了写时复制的机制。但是pid不同(现阶段认知)。内存地址相同但是值却不相同，这里需要学习一下操作系统-虚拟内存。这里解释下：虽然父子进程中的age的内存地址相同，但是他们彼此独立不可见，虚拟内存地址相同但是它们各自对应的物理地址不相同。</p><pre><code class="c">#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    int age = 0;    int pid;    pid = fork();    if(pid &lt; 0)    {        printf(&quot;fork() error.\n)&quot;);        exit(-1);    }    else if (pid == 0)    {        age++;        printf(&quot;I am child and my pid = %d, age = %d, addr = %p\n&quot;,getpid(),age,&amp;age);    }    else if (pid &gt; 0)    {        age--;        printf(&quot;I am parent and my Pid=%d, age = %d, addr = %p\n&quot;,getpid(),age,&amp;age);    }    return 0;}// 编译执行结果：// I am parent and my Pid=13086, age = -1, addr = 0x7fffc4e4dc98// I am child and my pid = 13087, age = 1, addr = 0x7fffc4e4dc98</code></pre><h4 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h4><h4 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid"></a>waitpid</h4><p>pid_t waitpid(pid_t pid, int *statusp, int options);</p><p>当options=0时，waitpid挂起调用进程的执行，直到它的等待集合中的一个进程终止；如果这个集合中的一个进程在刚调用的时刻就已经终止，那么waitpid立即返回。</p><ol><li><p>判定等待集合的成员</p><p>等待集合的成员是由 pid 参数决定的：</p><ol><li>pid &gt; 0 ，等待的集合就是一个单独的子进程，它的进程id等于pid。</li><li>pid = -1，那么等待就是父进程的所有子进程组成的集合中的任意子进程。</li><li>pid &lt; -1，回收进程组id为abs(pid)的一组进程，也就是所有子进程。</li><li>pid = 0，回收 与调用进程组id相同组内的子进程。</li></ol></li><li><p>修改默认行为</p><ul><li><p>0</p><p>与wait基本没有区别。</p></li><li><p>WNOHANG</p><p>如果等待集合中的任何子进程都没有终止，那么立即返回(返回值为0)，如果有子进程退出返回退出子进程的pid，失败返回-1(没有子进程或者子进程死光了)。在等待子进程终止的同时如果想做其它事情，这个选项很有用。</p><pre><code class="c">#include &lt;unistd.h&gt;#include &lt;sys/wait.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;int main(){    int status;    int pid;    pid = fork();    if(pid == 0)    {        printf(&quot;I&#39;m child.\n&quot;);        sleep(3);        exit(0);    }    while((pid = waitpid(-1,&amp;status,WNOHANG)) &gt; 0)    {        printf(&quot;child exit.\n&quot;);    }    printf(&quot;I&#39;m parent.\n&quot;);    return 0;}// 使用 WNOHANG 父进程不会等待自己成退出，所以执行效果是: 父进程、子进程执行各自的代码，父进程执行完毕之后退出，因为子进程sleep(3)，所以子进程在输出打印之后三秒钟退出。</code></pre></li><li><p>WUNTRACED</p><p>挂起调动进程的执行，直到等待集合中的一个进程变成已终止或者停止。返回的pid为导致返回的已终止或被停止子进程的pid。默认的行为是只返回已终止子进程。在想要检查已终止或已停止的子进程时，这个选项比较有用。</p><pre><code class="c">#include &lt;unistd.h&gt;#include &lt;sys/wait.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;int main(){    int status;    int pid;    pid = fork();    if(pid == 0)    {        printf(&quot;child run and pid = %d\n&quot;,getpid());        printf(&quot;I&#39;m child.\n&quot;);        sleep(3);        exit(0);    }    while((pid = waitpid(-1,&amp;status,WUNTRACED)) &gt; 0)    {        printf(&quot;child exit who pid = %d.\n&quot;,pid);    }    printf(&quot;I&#39;m parent.\n&quot;);    return 0;}// root$ ./a.out// child run and pid = 26334// I&#39;m child.// child exit who pid = 26334.// I&#39;m parent.</code></pre></li><li><p>WCONTINUED</p><p>挂起调用进程的执行，直到等待集合中一个正在运行的进程终止或者等待集合中一个被停止的进程收到SIGCONT信号重新开始执行。</p></li><li><p>组合使用：WNOHANG | WUNTRACED</p><p>立即返回，如果等待集合中的子进程都没有停止或者终止则返回0，如果有一个停止或者终止则返回该子进程的pid。</p></li></ul></li><li><p>检查已回收子进程的退出状态</p><p><img src="http://img.3amupupup.online/childProcessStatus.png" alt="waitpid() status参数"></p><p>如果statusp参数是非空的，那么操作系统就会读取进程的PCB，保存在status指向的变量中。</p><p>status中保存的就是进程退出的信息，int是32bit，是否正常运行，退出码是多少，退出信号是多少。</p><pre><code class="c">#include &lt;unistd.h&gt;#include &lt;sys/wait.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    int status = 0;    pid_t id = fork();    if(id &lt; 0)    {        perror(&quot;fork error!\n&quot;);    }    else if(id == 0) // child    {        printf(&quot;i am child process\n&quot;);        int count = 0;        while (count &lt; 5)        {            sleep(1);            count++;            printf(&quot;sleep 1\n&quot;);        }//        int ret = 1/0;//        exit(99);        exit(0);    }    // parent    printf(&quot;father wait before.\n&quot;);    pid_t ret = waitpid(id,&amp;status,0);    printf(&quot;status = %d\n&quot;,status); // 保存子进程的返回状态    if(ret &gt; 0)    {        printf(&quot;子进程终止信号: %d\n&quot;, status &amp; 0x7f); // 0 表示是正常退出        printf(&quot;子进程退出码: %d\n&quot;,(status &gt;&gt; 8) &amp; 0xff);        printf(&quot;wait success!\n&quot;);        if(status &amp; 0x7f) // 非0则说明子进程不是正常退出的        {            printf(&quot;child run error!\n&quot;);        }        else        {            if((status&gt;&gt;8) &amp; 0xff) // 运行成功但是结果不正确            {                printf(&quot;child run success, but result is not right, exit code: %d\n&quot;,(status&gt;&gt;8)&amp;0xff);            }            else            {                printf(&quot;child run success and result is right,exit code: %d\n&quot;,(status&gt;&gt;8)&amp;0xff);            }        }    }    else    {        printf(&quot;wait failed!\n&quot;);    }    printf(&quot;father wait after.\n&quot;);    return 0;}</code></pre><p><img src="http://img.3amupupup.online/WaitpidStatus.png" alt="image-20210202163458393"></p><p>图中在子进程sleep的时候给其发送了一个SIGSTOP信号导致子进程退出，status中保存的是子进程终止的状态信息。</p><p>标准库中也提供一些宏函数来检测进程的退出状态：</p><ol><li><p>WIFEXITED(status): 如果为正常子进程终止子进程的返回状态，则为真。(查看子进程是否正常退出：! (status &amp; 0x7f))</p></li><li><p>WEXITSTATUS(status): 如果WIFEXITED(status)为非零，提取子进程退出码。(查看子进程退出码: (status&gt;&gt;8)&amp;0xff))</p><pre><code class="c">#include &lt;unistd.h&gt;#include &lt;sys/wait.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    int status = 0;    pid_t id = fork();    if(id &lt; 0)    {        perror(&quot;fork error!\n&quot;);    }    else if(id == 0) // child    {        printf(&quot;i am child process\n&quot;);        int count = 0;        while (count &lt; 3)        {            sleep(1);            count++;            printf(&quot;sleep 1\n&quot;);        }        int ret = 1/0;        exit(10);    }    // parent    printf(&quot;father wait before.\n&quot;);    pid_t ret = waitpid(id,&amp;status,0);    printf(&quot;status = %d\n&quot;,status); // 保存子进程的返回状态    if(WIFEXITED(status)) // 为真说明是正常退出的    {        printf(&quot;child exit code: %d\n&quot;,WEXITSTATUS(status));    }    else    {        printf(&quot;child exit error!\n&quot;);    }    printf(&quot;father wait after.\n&quot;);    return 0; }</code></pre></li></ol></li></ol><h4 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h4><h5 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h5><pre><code class="c">#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/wait.h&gt;int main(){    int fd[2];     pipe(fd); // fd[1]是写端，fd[0]是读端    int pid = fork();    if(pid == 0)    {        sleep(3);        write(fd[1],&quot;hello world\n&quot;,13);    }    else if(pid &gt; 0)    {        waitpid(-1,NULL,0);        char buf[20]={0};        int ret = read(fd[0],buf,sizeof(buf)); // read会阻塞等待        if(ret&gt;0)            write(STDOUT_FILENO,buf,ret);    }    return 0;}</code></pre><p>管道大小</p><ul><li><pre><code class="shell">[root@iZbp11u8qxiwepq15dm1liZ ComputerSystem]# ulimit -acore file size          (blocks, -c) 0data seg size           (kbytes, -d) unlimitedscheduling priority             (-e) 0file size               (blocks, -f) unlimitedpending signals                 (-i) 6946max locked memory       (kbytes, -l) 64max memory size         (kbytes, -m) unlimitedopen files                      (-n) 65535pipe size            (512 bytes, -p) 8POSIX message queues     (bytes, -q) 819200real-time priority              (-r) 0stack size              (kbytes, -s) 8192cpu time               (seconds, -t) unlimitedmax user processes              (-u) 6946virtual memory          (kbytes, -v) unlimitedfile locks                      (-x) unlimited</code></pre><p>可以看到在linux系统上pipe size 为512bytes * 8 = 4096bytes。</p></li></ul><p>优点：简单</p><p>缺点：</p><ul><li>只能有血缘关系的进程之间才能使用</li><li>只能单向通信(半双工通信)，如果需要双向通信需要创建两个管道</li></ul><h5 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h5><p>有名管道，实现无血缘关系进程通信。</p><ul><li><p>创建一个管道的伪文件</p><ul><li>int mkfifo(const char *pathname, mode_t mode);</li><li>mkfifo fifoName 命令创建</li></ul></li><li><p>内核会给fifo文件开辟一个缓冲区，操作fifo文件，可以操作缓冲区，实现进程通信–实际上就是文件读写</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;#define FIFO &quot;/root/ComputerSystem/myfifo&quot; // shell: mkfifo myfifoint main(){    int fd = open(FIFO,O_WRONLY); // 如果没有程序 read，open会阻塞    char buf[256];    int num = 1;    while(1)       {        memset(buf,0x00,sizeof(buf));        sprintf(buf,&quot;hello%d&quot;,num++);        write(fd,buf,strlen(buf));        sleep(1);    }    close(fd);    return 0;}//  若无读端写端open阻塞</code></pre><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;int main(){    int fd = open(&quot;myfifo&quot;,O_RDONLY);    char buf[256];    int num = 1;    while(1)       {        int ret = read(fd,buf,sizeof(buf));        if(ret &gt; 0)        {            printf(&quot;read:%s\n&quot;,buf);        }    }    close(fd);    return 0;}//  若无写端读端阻塞，有点类似golang里的无缓冲channel</code></pre><p>linux系统上通过命令：man 7 signal 查看信号的手册</p><p><img src="http://img.3amupupup.online/SignalAction.png" alt="signal"></p><p><img src="http://img.3amupupup.online/fifo.png" alt="fifo"></p><p>若读端关闭，写端也会终止。至于为什么会关闭，如下解释：</p><p>执行写端程序时，open函数打开管道文件 myfifo，由于没有读端，所以写端会阻塞住。当执行读端程序之后 open停止阻塞 继续向下执行开始往管道里写数据。当关闭读端时，操作系统发送 sigpipe 信号给写端。由图可知 sigpipe 是一个Term(terminate)信号，所以写端程序终止退出。</p></li></ul><h5 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;fork&quot;&gt;&lt;a href=&quot;#fork&quot; class=&quot;headerlink&quot; title=&quot;fork:&quot;&gt;&lt;/a&gt;fork:&lt;/h4&gt;&lt;p&gt;fork()函数man手册：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fork函数通过调用它的进程复制出一个新的进程(谁调用它复制谁，</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="进程" scheme="https://duwei19961021.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C深入剖析</title>
    <link href="https://duwei19961021.github.io/2021/03/18/C%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90/"/>
    <id>https://duwei19961021.github.io/2021/03/18/C%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90/</id>
    <published>2021-03-18T03:09:52.069Z</published>
    <updated>2021-03-18T03:09:52.070Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>定义和声明</p><ul><li><p>定义：编译器创建一个对象，为这个对象分配一块内存并给它取一个名字，名字就是我们常说的变量或对象名。</p><pre><code class="c">int a;</code></pre></li><li><p>声明：告诉编译器，这个名字已经匹配到一块内存上了；告诉编译器，这个名字预定了，其它地方不能再使用，这种声明的最典型例子就是声明一个函数；声明不会分配内存。</p><pre><code class="c">extern inn a;void func(int a);    //声明一个函数</code></pre></li></ul></li><li><p>struct</p><pre><code class="c">#include &lt;stdio.h&gt;struct stu{} s1;int main(){    printf(&quot;%lu\n&quot;,sizeof(s1)); // 0    return 0;}// 编译器gcc</code></pre></li><li><p>柔性数组</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct{    int a;    int b[];} soft_arr;int main(){    printf(&quot;%lu\n&quot;,sizeof(soft_arr)); // 4    soft_arr *p = malloc(sizeof(soft_arr)+sizeof(int));    free(p);    return 0;}</code></pre><p>结构中最后一个成员允许是一个未知大小的数组，这个成员叫做柔性数组。sizefo 返回这种类型的大小不包括柔性数组的内存。包含柔性数组成员的结构用malloc进行内存动态分配。(应用：比如网络通信，收发数据包)</p></li><li><p>union</p><pre><code class="c">union Person{    char *name;    int age;    char *addr;    double balance;};int main(){    printf(&quot;%lu\n&quot;,sizeof(union Person));    return 0;}</code></pre><p>union维护足够的空间来置放多个成员的某一个成员，而不是为每个数据成员配置空间。在union中所有成员公用一个空间，同一时间只能存储其中一个数据成员，所有数据成员拥有相同的起始地址。</p><p>一个union需要配置足够的空间来容纳所有成员。上述例子中：double占用内存空间最大，所以Person的内存大小是8字节。</p><p>大小端对union的影响：</p><pre><code class="c">union T{    char a;    int b;};int main(){    union T t1;    t1.b = 1;    printf(&quot;%d\n&quot;,t1.a);    return 0;}</code></pre><img src="https://upload-images.jianshu.io/upload_images/15150075-33c893aeed324c98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" style="zoom:67%;" /></li><li><p>enum</p><pre><code class="c">enum Color{    RED,    BLACK,    WHITE,    YELLOW,};int main(){    RED = 3; // expression is not assignable    return 0;}</code></pre></li><li><p>auto</p><p>编译器在默认缺省的情况下，所有变量都是auto。</p></li><li><p>register</p><p>请求编译器尽可能的将这个变量存在cpu内部的寄存器中而不是通过内存寻址访问。register变量可能不存放在内存中，所以不能用&amp;符取地址。</p></li><li><p>static</p><ul><li>修饰变量。<ul><li>变量分局部变量和全局变量，被static修饰它们都存在于内存的静态区。</li><li>静态全局变量：作用域仅限于变量被定义的文件中。</li><li>局部静态变量：只能在定义这个局部静态变量的函数使用，即使函数调用结束，这个变量也不会消失。</li></ul></li><li>修饰函数。<ul><li>函数前加static称为静态函数，静态不是指存储方式，而是此函数的作用域仅限于本文件内。</li></ul></li></ul></li><li><p>switch</p><pre><code class="c">int main(){    int a = 4;    int c=6;    switch (a) {        case 1:            printf(&quot;1\n&quot;);            break;        default:            printf(&quot;default\n&quot;);        case 2:            printf(&quot;2\n&quot;);        case 3:            printf(&quot;3\n&quot;);//        case c:   // error//            printf(&quot;%d&quot;,c);//            break;//        case 3.14:    // error//            printf(&quot;3.14\n&quot;);    }}// output:// default// 2// 3</code></pre><ul><li>case后只能是整形或字符型常量或常量表达式</li></ul></li><li><p>End0</p></li><li><p>0x01&lt;&lt;2+3</p><p>结果为32，+的优先级比&lt;&lt;高。</p><p>左移右移的位数不能大于数据的长度，不能小于0。</p></li><li><p>++i、i++</p><pre><code class="c">int main(){    int i = 0;    int j = (++i,++i,++i);      // ++i 先自增再进它其他运算。i在遇见逗号之后认为本计算单位已经结束，然后进行自增。    printf(&quot;j = %d\n&quot;,j);       // 3    int k = 0;    int z = (k++,k++,k++);      // i++ 先进行其它运算再自增    printf(&quot;z = %d\n&quot;,z);       // 2    int x = 0;    int y = (x++) + (x++) + (x++);    printf(&quot;y = %d\n&quot;,y);       // 1+1+1=3 x遇到分号之后才认为本次计算单位已结束，x这时候才会进行自加}</code></pre></li><li><p>++i+++i+++i</p><pre><code class="c">int main(){    int a = 1;    int b = 2;    int ret = a+++b;            // 贪心算法：a++ + b    printf(&quot;ret = %d\n&quot;,ret);   // ret = 3}</code></pre></li><li><p>#define宏定义注释符号</p><pre><code class="c">#define BSC //#define BMC /*#define EMC */int main(){    int a = 10;BSC a is int    DMC input a number:EMC}</code></pre><p>注释先于预处理指令被处理。当发生宏替换时，注释已经处理完毕，再出现//、/*则会出现错误。</p></li><li><p>宏定义中的空格</p><pre><code class="c">#define SUM(x) (x)+(x)int main(){    int ret = SUM (3);    return 0;}</code></pre><p>这个空格仅在定义的时候有效，在使用这个宏函数的时候，空格会被忽略掉。因此：SUM(x) 和SUM (x)是一样的。</p><pre><code class="shell">duweideMacBook-Pro:test duwei$ cat test.c#define SUM(x) (x)+(x)int main(){    int ret = SUM (3);    return 0;}duweideMacBook-Pro:test duwei$ gcc -E test.c -o test.iduweideMacBook-Pro:test duwei$ cat test.i# 1 &quot;test.c&quot;# 1 &quot;&lt;built-in&gt;&quot; 1# 1 &quot;&lt;built-in&gt;&quot; 3# 361 &quot;&lt;built-in&gt;&quot; 3# 1 &quot;&lt;command line&gt;&quot; 1# 1 &quot;&lt;built-in&gt;&quot; 2# 1 &quot;test.c&quot; 2</code></pre></li></ul><p>  int main(){<br>   int ret = (3)+(3);<br>   return 0;<br>  }<br>  duweideMacBook-Pro:test duwei$</p><pre><code>- 预处理余下部分暂时省略，以后回来看- 略- 略- 略- int *p = NULL和 *p = NULL的区别  - ```c    int *p = NULL;    ```    定义一个指针变量p，其指向的内存里面保存的是int类型的数据，在定义变量p的同时把p的值设为0x00000000，这个过程叫初始化，是在编译的时候进行的。  - ```c    int *p;    *p = NULL;    ```    第一行代码，定义了一个指针变量p，其指向内存里保存的是int类型的数据，此时p变量本身是多少不可知，也就是说p变量此时指向的内存地址可能是个非法值。第二行代码给*p赋值为NULL，也就是给 *p指向的内存赋值NULL。由于p变量的内存地址可能是非法的，所以在调试时编译器可能会报错。- ```c  int main(){      char *p1 = &quot;abcdef&quot;;      printf(&quot;p1 = %p\n&quot;,p1);         // p1 = 0x109002f82      printf(&quot;p1 = %p\n&quot;,p1+1);       // p1 = 0x109002f82      printf(&quot;p1 = %p\n&quot;,p1+2);       // p1 = 0x109002f82      printf(&quot;&amp;p1 = %p\n&quot;,&amp;p1);       // &amp;p1 = 0x7ffee6bfda48      char p2[] = &quot;123456&quot;;      printf(&quot;p2 = %p\n&quot;,p2);         // p2 = 0x7ffee6bfda41      printf(&quot;&amp;p2 = %p\n&quot;,p2+1);      // &amp;p2 = 0x7ffee6bfda42      printf(&quot;&amp;p2 = %p\n&quot;,p2+2);      // &amp;p2 = 0x7ffee6bfda43  }</code></pre><p>  <img src="https://upload-images.jianshu.io/upload_images/15150075-95496cd76b42207b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="p1的访问方式"></p><p>  <img src="https://upload-images.jianshu.io/upload_images/15150075-586f59dc81a1ece9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="p2的访问方式"></p><p>  结论：</p><ul><li>数组名即为数据本身</li><li>数组作为参数传递给函数时，数组的地址赋值给形参，发生降维。</li></ul><ul><li><p>a和&amp;a的区别(数组名)</p><pre><code class="c">int main(){    int a[5] = {1,2,3,4,5};    int *ptr = (int *)(&amp;a+1);    printf(&quot;*(a+1)=%d\n*(ptr-1))=%d\n&quot;,*(a+1),*(ptr-1));    // *(a+1)=2，*(ptr-1))=5}</code></pre><p>结论：</p><ul><li>&amp;a代表的是数组地址，&amp;a+1，加上的是sizeof(a)，指向a[4]的下一个元素。</li><li>a代表的是首元素地址。</li></ul></li><li><p>定义为数组，声明为指针</p><pre><code class="c">int arr[3] = {1,2,3};int main(){    extern int *arr;}</code></pre><p>将arr声明为指针会造成访问方式的错误，得出意外的结果。本应该是直接读取到arr的内存地址然后进行偏移操作，但是这里声明为指针，导致了访问方式的改变，访问时会先读取arr所在内存空间存放的内存地址，然后再进行偏移操作。</p></li><li><p>定义为指针，声明为数组</p><pre><code class="c">char *p = &quot;abcd&quot;;int main(){    extern char p[];}</code></pre><p>也会因为定义和声明的方式不一样造成访问方式不一样从而得到意外的结果。</p></li><li><p>指针和数组对比</p><table><thead><tr><th>指针</th><th>数组</th></tr></thead><tbody><tr><td>保存数据的地址，任何被存入指针变量p的数据都会被当做地址处理。p本身的地址有编译器另外存储，存储在哪里我们并不知道。</td><td>保存数据，数组名a代表的是数组首元素的地址而不是数组的首地址，&amp;a才是整个数组的首地址。a本身的地址由编译器另外存储，存储在哪里，我们并不知道。</td></tr><tr><td>间接访问数据，首先取得指针变量p的内容，把它当做地址，然后从这个地址提取或者写入数据。指针可以以指针的形式访问*(p+i)；也可以以下标的方式访问p[i]。但是其本质都是先取p的内容然后加上 i * sizeof(类型)个byte作为数据的真正地址。</td><td>直接访问数据，数组名a是整个数组的名字，数组内每个元素并没有名字。只能通过”具名+匿名”的方式来访问其它某个元素，不能把数组当做一个整体来进行读写操作。数组可以以指针的形式访问*(pa+i)；也可以以下标的方式访问a[i]。但其本质都是a所代表的数组的首元素地址加上 i * sizeof(类型)个byte作为数据的真正地址。</td></tr><tr><td>通常用于动态数据结构</td><td>通常用于存储固定数目且数据类型相同的元素</td></tr><tr><td>相关函数malloc和free</td><td>隐式分配和删除</td></tr><tr><td>通常指向匿名数据（也可指向具名数据）</td><td>自身即为数组名</td></tr></tbody></table></li><li><p>地址强制转换</p><pre><code class="c">int main(){    int a[4] = {1,2,3,4};    int *ptr1 = (int *)(&amp;a+1);    int *ptr2 = (int *)((int)a+1);    printf(&quot;ptr1[-1] = %x\n&quot;,ptr1[-1]);    printf(&quot;*ptr2 = %x\n&quot;,*ptr2);    return 0;}</code></pre><p>32位系统下：</p><p><img src="https://upload-images.jianshu.io/upload_images/15150075-c638b8896fc9d3be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>64位系统下会报错：Segmentation fault</p><p>个人看法：a代表的是首元素地址，将其强转成int然后+1再强转成int<em>，即将a地址进行+1操作然后赋值给ptr2。在32位下指针的长度和 int\</em> 类型的长度相同，所以不会发生提升。但是在64位下，将4位的int* 提升为8位的地址会发生提升，提升后的地址远远大于当前数组所有元素的地址，所以在进行printf访问打印时会报错：Segmentation fault。</p></li><li><p>&amp;p[4][2] - &amp;a[4][2] 等于多少？</p><pre><code class="c">int main(){    int a[5][5];    int(*p)[4];    p = a;    printf(&quot;%p,%d\n&quot;,&amp;p[4][2] - &amp;a[4][2],&amp;p[4][2] - &amp;a[4][2]);}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/15150075-59a8fe82de0a6d11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" 是"></p></li><li><p>无法向一个函数传递数组</p><ul><li>C语言中，当一维数组作为函数参数时，编译器总把它解析成一个指向其首元素地址的指针。</li><li>函数本身没有类型，只有函数的返回值才有类型。</li></ul></li><li><p>能否把指针变量本身传递给一个函数</p><p>main函数中的变量不是全局变量，只不过是它的声明周期和全区变量一样长而已。全局变量定义在函数外部。</p></li><li><p>函数指针的定义</p><pre><code class="c">char* (*func1)(char* p1, char* p2);</code></pre><p>func1是一个指针变量，指向一个有两个char*类型参数且返回值是char*类型的函数</p></li><li><p>*(int*)&amp;p</p><pre><code class="c">// 32位void Function(){    printf(&quot;Call Function.\n&quot;);}int main(){    void (*p)();    *(int*)&amp;p = (int)Function;    (*p)();    return 0;}</code></pre><p>p是一个指针变量，指向一个无参数无返回值的函数；</p><p>(int*)&amp;p将p的地址强转成int数据类型的指针；</p><p>*(int*)&amp;p 就是一个整型，要将函数Function的地址赋值给p得先将其转为整型。</p></li><li><p>(*(void(*)())0)();</p><p>void(*)()：表示一个指针，指向一个返回值时void且没有参数的函数。</p><p>(void(*)())0：表示将0强制转换成void(*)()这个函数指针类型。</p><p>(*(void(*)())0)：获取地址0开始的内存中的一段内容(解引用)。</p><p>(*(void(*)())0)()：函数调用。</p></li><li><p>函数指针数组</p><pre><code class="c">char* (*pf1)(char *p);        // pf1是一个指向参数是char *类型，返回值时char*的函数的指针char* (*pf2[3])(char *p);    // pf2是函数指针数组</code></pre><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;char * func1(char *p){    printf(&quot;%s\n&quot;,p);    return p;}char * func2(char *p){    printf(&quot;%s\n&quot;,p);    return p;}char * func3(char *p){    printf(&quot;%s\n&quot;,p);    return p;}int main(){    char *(*pf[3])(char *);    pf[0]=func1;    pf[1]=func2;    pf[2]=func3;    pf[0](&quot;func1&quot;);    pf[1](&quot;func2&quot;);    pf[2](&quot;func3&quot;);    return 0;}</code></pre></li><li><p>函数指针数组的指针</p><pre><code class="c">char* (*pf2[3])(char *p);    // pf2是函数指针数组char* (*(*pf2)[3])(char *p);    // pf2是函数指针数组指针</code></pre></li><li><p>常见内存错误以及对策</p><ul><li><p>指针没有指向一块合法的内存</p><ul><li><p>结构体成员指针未初始化</p><pre><code class="c">struct student{    char *name;    int score;}stu,*pstu;int main(){    strcpy(stu.name,&quot;jim&quot;);    stu.score=99;    return 0;}</code></pre><p>在实例化stu时，给name分配了四字节的内存，但并没有指向合法的地址。调用strcpy往所指向的内存拷贝”jim”，这块内存name指针根本就无权访问，导致出错。</p><pre><code class="c">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;struct student{    char *name;    int score;}stu,*pstu;int main(){    stu.name = (char*)malloc(sizeof(char));    strcpy(stu.name,&quot;jim&quot;);    stu.score=99;    printf(&quot;%s\n&quot;,stu.name);    free(pstu);    return 0;}</code></pre></li><li><p>没有为结构体指针分配足够的内存</p></li><li><p>函数入口校验</p><pre><code class="c">assert(NULL!=p); // 是一个宏而非函数</code></pre></li></ul></li><li><p>为指针分配的内存太小</p></li><li><p>内存分配成功，但未初始化</p><pre><code class="c">int i = 10;char *p = (char *)malloc(sizeof(char));//在不确定变量初始值的时候可以初始化为0或者NULLint i = 0;char *p = NULL;//或者使用memset(起始地址,要被设置的值,要被设置的内存大小);int a[10];memset(a,0,sizeof(a));</code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义和声明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义：编译器创建一个对象，为这个对象分配一块内存并给它取一个名字，名字就是我们常说的变量或对象名。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;int a;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="C语言" scheme="https://duwei19961021.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="book" scheme="https://duwei19961021.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>mongo</title>
    <link href="https://duwei19961021.github.io/2021/03/18/mongo/"/>
    <id>https://duwei19961021.github.io/2021/03/18/mongo/</id>
    <published>2021-03-18T03:09:52.068Z</published>
    <updated>2021-03-18T03:09:52.069Z</updated>
    
    <content type="html"><![CDATA[<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><h6 id="mongo备份-mongoexport导出json文件"><a href="#mongo备份-mongoexport导出json文件" class="headerlink" title="mongo备份: mongoexport导出json文件"></a>mongo备份: mongoexport导出json文件</h6><pre><code class="shell">./mongoexport --host 0.0.0.0:65535 -u username -p password --authenticationDatabase admin -d database -c collection -o file.json</code></pre><h6 id="mongo恢复-mongoimport导入json文件"><a href="#mongo恢复-mongoimport导入json文件" class="headerlink" title="mongo恢复: mongoimport导入json文件"></a>mongo恢复: mongoimport导入json文件</h6><pre><code class="shell">./mongoimport --host 0.0.0.0:65535 -u username -p password  --authenticationDatabase admin  -d database -c collection --file file.json</code></pre><h6 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合:"></a>创建集合:</h6><pre><code class="sql">db.createCollection()</code></pre><h6 id="查看库信息"><a href="#查看库信息" class="headerlink" title="查看库信息:"></a>查看库信息:</h6><pre><code class="sql">db.stats();</code></pre><h6 id="查看集合信息"><a href="#查看集合信息" class="headerlink" title="查看集合信息:"></a>查看集合信息:</h6><pre><code class="sql">db.collection.stats()</code></pre><hr><h5 id="mongo遇见的一些问题"><a href="#mongo遇见的一些问题" class="headerlink" title="mongo遇见的一些问题"></a>mongo遇见的一些问题</h5><h6 id="删除数据，磁盘空间不释放"><a href="#删除数据，磁盘空间不释放" class="headerlink" title="删除数据，磁盘空间不释放:"></a>删除数据，磁盘空间不释放:</h6><p><code>db.collection.remove({}, {multi: true})</code>命令删除文档，删除之后不会将被删除数据的磁盘空间归还给操作系统，但是当有新数据插入时mongo能重新使用这块空间。(<a href="https://help.aliyun.com/document_detail/96530.html?spm=a2c4g.11186623.2.13.6cd05d5dLZVLZJ" target="_blank" rel="noopener">解决办法</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h5&gt;&lt;h6 id=&quot;mongo备份-mongoexport导出json文件&quot;&gt;&lt;a href=&quot;#mongo备份-mongoexpor</summary>
      
    
    
    
    <category term="运维" scheme="https://duwei19961021.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="mongodb" scheme="https://duwei19961021.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>CppPrimer</title>
    <link href="https://duwei19961021.github.io/2021/03/18/CppPrimer/"/>
    <id>https://duwei19961021.github.io/2021/03/18/CppPrimer/</id>
    <published>2021-03-18T03:09:52.068Z</published>
    <updated>2021-03-18T03:09:52.068Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第七章-类"><a href="#第七章-类" class="headerlink" title="第七章 类"></a>第七章 类</h4><p>类作用域和成员函数：</p><p>编译器分两步处理类：首先编译成员的声明，然后才轮到成员函数体(如果有的话)。因此，成员函数体可以随意使用类中的其它成员而无需在意这些成员出现的次序。</p><p>IO类属于不能被拷贝的类型，因此只能通过引用传递。</p><p>每个类都分别定义了它的对象被初始化的方式，类通过一个或者几个特殊的成员函数来控制其对象的初始化过程，被称为构造函数。构造函数的任务是初始化类对象的数据成员，无论何时只要类的对象被创建，就会执行构造函数。</p><p>构造函数不能被声明成const，当创建一个const对象时，直到构造函数完成初始化过程，对象才能真正取得其“常量”属性。因此，构造函数在const对象的构造过程中可以向其写值。</p><p>如果类没有显示的定义构造函数，那么编译器就会为我们隐式的定义一个默认构造函数。</p><p>某些类不能依赖于合成的默认构造函数：</p><ol><li>只有当类没有声明任何构造函数时，编译器才会自动的生成默认构造函数。</li><li>合成的默认构造函数有可能执行错误的操作。如果定义在块中的内置类型或符合类型(比如数组和指针)的对象被默认初始化，则他们的值将是未定义的。该准则同样适用于默认初始化的内置类型成员。因此，函数内置类型或者复合类型成员的类应该在类的内部初始化这些成员，或者定义一个自己的默认构造函数。否则，用户在创建类对象时就可能得到未定义的值。</li><li>编译器不能为某些类合成默认的构造函数。例如：一个类中包含另一个类类型的成员且这个成员没有默认构造函数。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;第七章-类&quot;&gt;&lt;a href=&quot;#第七章-类&quot; class=&quot;headerlink&quot; title=&quot;第七章 类&quot;&gt;&lt;/a&gt;第七章 类&lt;/h4&gt;&lt;p&gt;类作用域和成员函数：&lt;/p&gt;
&lt;p&gt;编译器分两步处理类：首先编译成员的声明，然后才轮到成员函数体(如果有的话)。因此</summary>
      
    
    
    
    
  </entry>
  
</feed>
