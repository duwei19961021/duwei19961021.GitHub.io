#### 第七章 类

类作用域和成员函数：

编译器分两步处理类：首先编译成员的声明，然后才轮到成员函数体(如果有的话)。因此，成员函数体可以随意使用类中的其它成员而无需在意这些成员出现的次序。

IO类属于不能被拷贝的类型，因此只能通过引用传递。

每个类都分别定义了它的对象被初始化的方式，类通过一个或者几个特殊的成员函数来控制其对象的初始化过程，被称为构造函数。构造函数的任务是初始化类对象的数据成员，无论何时只要类的对象被创建，就会执行构造函数。

构造函数不能被声明成const，当创建一个const对象时，直到构造函数完成初始化过程，对象才能真正取得其“常量”属性。因此，构造函数在const对象的构造过程中可以向其写值。

如果类没有显示的定义构造函数，那么编译器就会为我们隐式的定义一个默认构造函数。

某些类不能依赖于合成的默认构造函数：

1. 只有当类没有声明任何构造函数时，编译器才会自动的生成默认构造函数。
2. 合成的默认构造函数有可能执行错误的操作。如果定义在块中的内置类型或符合类型(比如数组和指针)的对象被默认初始化，则他们的值将是未定义的。该准则同样适用于默认初始化的内置类型成员。因此，函数内置类型或者复合类型成员的类应该在类的内部初始化这些成员，或者定义一个自己的默认构造函数。否则，用户在创建类对象时就可能得到未定义的值。
3. 编译器不能为某些类合成默认的构造函数。例如：一个类中包含另一个类类型的成员且这个成员没有默认构造函数。

